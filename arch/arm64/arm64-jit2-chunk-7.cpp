#include <arm64-jit2.h>
#include <queue>
#include <set>
#pragma GCC diagnostic ignored "-Wunused-variable"
using namespace captive::arch::arm64;
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_addp_vector(const arm64_decode_a64_SIMD_THREE_SAME&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:995 [F] s_b_0_0=sym_3699_3_parameter_inst.arrangement (const) */
    /* execute.simd:996 [F] s_b_0_1 = constant s32 0 (const) */
    /* execute.simd:1014 [F] s_b_0_2 = constant s32 1 (const) */
    /* execute.simd:1030 [F] s_b_0_3 = constant s32 2 (const) */
    /* execute.simd:1048 [F] s_b_0_4 = constant s32 3 (const) */
    /* execute.simd:1064 [F] s_b_0_5 = constant s32 4 (const) */
    /* execute.simd:1082 [F] s_b_0_6 = constant s32 5 (const) */
    /* execute.simd:1098 [F] s_b_0_7 = constant s32 6 (const) */
    /* execute.simd:995 [F] s_b_0_8: Switch s_b_0_0: < <todo> > def b_9 (const) -> b_9, b_8, b_7, b_6, b_5, b_4, b_3, b_2,  */
    switch (insn.arrangement) 
    {
    case (int32_t)0ULL:
      goto fixed_block_b_2;
      break;
    case (int32_t)6ULL:
      goto fixed_block_b_8;
      break;
    case (int32_t)5ULL:
      goto fixed_block_b_7;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_6;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_5;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_4;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_3;
      break;
    default:
      goto fixed_block_b_9;
    }
  }
  /* b_2, b_3, b_4, b_5, b_6, b_7, b_8, b_9,  */
  fixed_block_b_1: 
  {
    /* ???:4294967295 [F] s_b_1_0: Return */
    goto fixed_done;
  }
  /* b_0,  */
  fixed_block_b_2: 
  {
    /* execute.simd:997 [F] s_b_2_0=sym_3699_3_parameter_inst.rn (const) */
    /* execute.simd:997 [D] s_b_2_1 = ReadRegBank 15:s_b_2_0 (v8u8) */
    auto s_b_2_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_2_1,emitter.const_u8(8));
    }
    /* execute.simd:998 [F] s_b_2_2=sym_3699_3_parameter_inst.rm (const) */
    /* execute.simd:998 [D] s_b_2_3 = ReadRegBank 15:s_b_2_2 (v8u8) */
    auto s_b_2_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_2_3,emitter.const_u8(8));
    }
    /* ???:4294967295 [F] s_b_2_4 = constant v8u8 
    {
    }
    (const) */
    /* execute.simd:1002 [F] s_b_2_5 = constant u32 0 (const) */
    /* execute.simd:1002 [D] s_b_2_1[s_b_2_5] */
    auto s_b_2_6 = emitter.vector_extract(s_b_2_1, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1002 [F] s_b_2_7 = constant u32 1 (const) */
    /* execute.simd:1002 [D] s_b_2_1[s_b_2_7] */
    auto s_b_2_8 = emitter.vector_extract(s_b_2_1, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1002 [D] s_b_2_9 = s_b_2_6+s_b_2_8 */
    auto s_b_2_9 = emitter.add(s_b_2_6, s_b_2_8);
    /* execute.simd:1002 [F] s_b_2_10 = constant s32 0 (const) */
    /* execute.simd:1002 [D] s_b_2_11 = s_b_2_4[s_b_2_10] <= s_b_2_9 */
    auto s_b_2_11 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint8_t, 8>(0)[0], emitter.context().types().v8u8()), emitter.const_s32((int32_t)0ULL), s_b_2_9);
    /* execute.simd:1002 [F] s_b_2_12 = constant u32 2 (const) */
    /* execute.simd:1002 [D] s_b_2_1[s_b_2_12] */
    auto s_b_2_13 = emitter.vector_extract(s_b_2_1, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1002 [F] s_b_2_14 = constant u32 3 (const) */
    /* execute.simd:1002 [D] s_b_2_1[s_b_2_14] */
    auto s_b_2_15 = emitter.vector_extract(s_b_2_1, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1002 [D] s_b_2_16 = s_b_2_13+s_b_2_15 */
    auto s_b_2_16 = emitter.add(s_b_2_13, s_b_2_15);
    /* execute.simd:1002 [F] s_b_2_17 = constant s32 1 (const) */
    /* execute.simd:1002 [D] s_b_2_18 = s_b_2_11[s_b_2_17] <= s_b_2_16 */
    auto s_b_2_18 = emitter.vector_insert(s_b_2_11, emitter.const_s32((int32_t)1ULL), s_b_2_16);
    /* execute.simd:1002 [F] s_b_2_19 = constant u32 4 (const) */
    /* execute.simd:1002 [D] s_b_2_1[s_b_2_19] */
    auto s_b_2_20 = emitter.vector_extract(s_b_2_1, emitter.const_u32((uint32_t)4ULL));
    /* execute.simd:1002 [F] s_b_2_21 = constant u32 5 (const) */
    /* execute.simd:1002 [D] s_b_2_1[s_b_2_21] */
    auto s_b_2_22 = emitter.vector_extract(s_b_2_1, emitter.const_u32((uint32_t)5ULL));
    /* execute.simd:1002 [D] s_b_2_23 = s_b_2_20+s_b_2_22 */
    auto s_b_2_23 = emitter.add(s_b_2_20, s_b_2_22);
    /* execute.simd:1002 [F] s_b_2_24 = constant s32 2 (const) */
    /* execute.simd:1002 [D] s_b_2_25 = s_b_2_18[s_b_2_24] <= s_b_2_23 */
    auto s_b_2_25 = emitter.vector_insert(s_b_2_18, emitter.const_s32((int32_t)2ULL), s_b_2_23);
    /* execute.simd:1002 [F] s_b_2_26 = constant u32 6 (const) */
    /* execute.simd:1002 [D] s_b_2_1[s_b_2_26] */
    auto s_b_2_27 = emitter.vector_extract(s_b_2_1, emitter.const_u32((uint32_t)6ULL));
    /* execute.simd:1002 [F] s_b_2_28 = constant u32 7 (const) */
    /* execute.simd:1002 [D] s_b_2_1[s_b_2_28] */
    auto s_b_2_29 = emitter.vector_extract(s_b_2_1, emitter.const_u32((uint32_t)7ULL));
    /* execute.simd:1002 [D] s_b_2_30 = s_b_2_27+s_b_2_29 */
    auto s_b_2_30 = emitter.add(s_b_2_27, s_b_2_29);
    /* execute.simd:1002 [F] s_b_2_31 = constant s32 3 (const) */
    /* execute.simd:1002 [D] s_b_2_32 = s_b_2_25[s_b_2_31] <= s_b_2_30 */
    auto s_b_2_32 = emitter.vector_insert(s_b_2_25, emitter.const_s32((int32_t)3ULL), s_b_2_30);
    /* execute.simd:1006 [F] s_b_2_33 = constant u32 0 (const) */
    /* execute.simd:1006 [D] s_b_2_3[s_b_2_33] */
    auto s_b_2_34 = emitter.vector_extract(s_b_2_3, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1006 [F] s_b_2_35 = constant u32 1 (const) */
    /* execute.simd:1006 [D] s_b_2_3[s_b_2_35] */
    auto s_b_2_36 = emitter.vector_extract(s_b_2_3, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1006 [D] s_b_2_37 = s_b_2_34+s_b_2_36 */
    auto s_b_2_37 = emitter.add(s_b_2_34, s_b_2_36);
    /* execute.simd:1006 [F] s_b_2_38 = constant s32 4 (const) */
    /* execute.simd:1006 [D] s_b_2_39 = s_b_2_32[s_b_2_38] <= s_b_2_37 */
    auto s_b_2_39 = emitter.vector_insert(s_b_2_32, emitter.const_s32((int32_t)4ULL), s_b_2_37);
    /* execute.simd:1006 [F] s_b_2_40 = constant u32 2 (const) */
    /* execute.simd:1006 [D] s_b_2_3[s_b_2_40] */
    auto s_b_2_41 = emitter.vector_extract(s_b_2_3, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1006 [F] s_b_2_42 = constant u32 3 (const) */
    /* execute.simd:1006 [D] s_b_2_3[s_b_2_42] */
    auto s_b_2_43 = emitter.vector_extract(s_b_2_3, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1006 [D] s_b_2_44 = s_b_2_41+s_b_2_43 */
    auto s_b_2_44 = emitter.add(s_b_2_41, s_b_2_43);
    /* execute.simd:1006 [F] s_b_2_45 = constant s32 5 (const) */
    /* execute.simd:1006 [D] s_b_2_46 = s_b_2_39[s_b_2_45] <= s_b_2_44 */
    auto s_b_2_46 = emitter.vector_insert(s_b_2_39, emitter.const_s32((int32_t)5ULL), s_b_2_44);
    /* execute.simd:1006 [F] s_b_2_47 = constant u32 4 (const) */
    /* execute.simd:1006 [D] s_b_2_3[s_b_2_47] */
    auto s_b_2_48 = emitter.vector_extract(s_b_2_3, emitter.const_u32((uint32_t)4ULL));
    /* execute.simd:1006 [F] s_b_2_49 = constant u32 5 (const) */
    /* execute.simd:1006 [D] s_b_2_3[s_b_2_49] */
    auto s_b_2_50 = emitter.vector_extract(s_b_2_3, emitter.const_u32((uint32_t)5ULL));
    /* execute.simd:1006 [D] s_b_2_51 = s_b_2_48+s_b_2_50 */
    auto s_b_2_51 = emitter.add(s_b_2_48, s_b_2_50);
    /* execute.simd:1006 [F] s_b_2_52 = constant s32 6 (const) */
    /* execute.simd:1006 [D] s_b_2_53 = s_b_2_46[s_b_2_52] <= s_b_2_51 */
    auto s_b_2_53 = emitter.vector_insert(s_b_2_46, emitter.const_s32((int32_t)6ULL), s_b_2_51);
    /* execute.simd:1006 [F] s_b_2_54 = constant u32 6 (const) */
    /* execute.simd:1006 [D] s_b_2_3[s_b_2_54] */
    auto s_b_2_55 = emitter.vector_extract(s_b_2_3, emitter.const_u32((uint32_t)6ULL));
    /* execute.simd:1006 [F] s_b_2_56 = constant u32 7 (const) */
    /* execute.simd:1006 [D] s_b_2_3[s_b_2_56] */
    auto s_b_2_57 = emitter.vector_extract(s_b_2_3, emitter.const_u32((uint32_t)7ULL));
    /* execute.simd:1006 [D] s_b_2_58 = s_b_2_55+s_b_2_57 */
    auto s_b_2_58 = emitter.add(s_b_2_55, s_b_2_57);
    /* execute.simd:1006 [F] s_b_2_59 = constant s32 7 (const) */
    /* execute.simd:1006 [D] s_b_2_60 = s_b_2_53[s_b_2_59] <= s_b_2_58 */
    auto s_b_2_60 = emitter.vector_insert(s_b_2_53, emitter.const_s32((int32_t)7ULL), s_b_2_58);
    /* execute.simd:1009 [F] s_b_2_61=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1009 [D] s_b_2_62: WriteRegBank 15:s_b_2_61 = s_b_2_60 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_2_60,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_2_60);
    /* execute.simd:1010 [F] s_b_2_63=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1010 [F] s_b_2_64 = constant u64 0 (const) */
    /* execute.simd:1010 [F] s_b_2_65: WriteRegBank 3:s_b_2_63 = s_b_2_64 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_2_66: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:1015 [F] s_b_3_0=sym_3699_3_parameter_inst.rn (const) */
    /* execute.simd:1015 [D] s_b_3_1 = ReadRegBank 16:s_b_3_0 (v16u8) */
    auto s_b_3_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_3_1,emitter.const_u8(16));
    }
    /* execute.simd:1016 [F] s_b_3_2=sym_3699_3_parameter_inst.rm (const) */
    /* execute.simd:1016 [D] s_b_3_3 = ReadRegBank 16:s_b_3_2 (v16u8) */
    auto s_b_3_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_3_3,emitter.const_u8(16));
    }
    /* ???:4294967295 [F] s_b_3_4 = constant v16u8 
    {
    }
    (const) */
    /* execute.simd:1020 [F] s_b_3_5 = constant u32 0 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_5] */
    auto s_b_3_6 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1020 [F] s_b_3_7 = constant u32 1 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_7] */
    auto s_b_3_8 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1020 [D] s_b_3_9 = s_b_3_6+s_b_3_8 */
    auto s_b_3_9 = emitter.add(s_b_3_6, s_b_3_8);
    /* execute.simd:1020 [F] s_b_3_10 = constant s32 0 (const) */
    /* execute.simd:1020 [D] s_b_3_11 = s_b_3_4[s_b_3_10] <= s_b_3_9 */
    auto s_b_3_11 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint8_t, 16>(0)[0], emitter.context().types().v16u8()), emitter.const_s32((int32_t)0ULL), s_b_3_9);
    /* execute.simd:1020 [F] s_b_3_12 = constant u32 2 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_12] */
    auto s_b_3_13 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1020 [F] s_b_3_14 = constant u32 3 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_14] */
    auto s_b_3_15 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1020 [D] s_b_3_16 = s_b_3_13+s_b_3_15 */
    auto s_b_3_16 = emitter.add(s_b_3_13, s_b_3_15);
    /* execute.simd:1020 [F] s_b_3_17 = constant s32 1 (const) */
    /* execute.simd:1020 [D] s_b_3_18 = s_b_3_11[s_b_3_17] <= s_b_3_16 */
    auto s_b_3_18 = emitter.vector_insert(s_b_3_11, emitter.const_s32((int32_t)1ULL), s_b_3_16);
    /* execute.simd:1020 [F] s_b_3_19 = constant u32 4 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_19] */
    auto s_b_3_20 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)4ULL));
    /* execute.simd:1020 [F] s_b_3_21 = constant u32 5 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_21] */
    auto s_b_3_22 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)5ULL));
    /* execute.simd:1020 [D] s_b_3_23 = s_b_3_20+s_b_3_22 */
    auto s_b_3_23 = emitter.add(s_b_3_20, s_b_3_22);
    /* execute.simd:1020 [F] s_b_3_24 = constant s32 2 (const) */
    /* execute.simd:1020 [D] s_b_3_25 = s_b_3_18[s_b_3_24] <= s_b_3_23 */
    auto s_b_3_25 = emitter.vector_insert(s_b_3_18, emitter.const_s32((int32_t)2ULL), s_b_3_23);
    /* execute.simd:1020 [F] s_b_3_26 = constant u32 6 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_26] */
    auto s_b_3_27 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)6ULL));
    /* execute.simd:1020 [F] s_b_3_28 = constant u32 7 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_28] */
    auto s_b_3_29 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)7ULL));
    /* execute.simd:1020 [D] s_b_3_30 = s_b_3_27+s_b_3_29 */
    auto s_b_3_30 = emitter.add(s_b_3_27, s_b_3_29);
    /* execute.simd:1020 [F] s_b_3_31 = constant s32 3 (const) */
    /* execute.simd:1020 [D] s_b_3_32 = s_b_3_25[s_b_3_31] <= s_b_3_30 */
    auto s_b_3_32 = emitter.vector_insert(s_b_3_25, emitter.const_s32((int32_t)3ULL), s_b_3_30);
    /* execute.simd:1020 [F] s_b_3_33 = constant u32 8 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_33] */
    auto s_b_3_34 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)8ULL));
    /* execute.simd:1020 [F] s_b_3_35 = constant u32 9 (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_35] */
    auto s_b_3_36 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)9ULL));
    /* execute.simd:1020 [D] s_b_3_37 = s_b_3_34+s_b_3_36 */
    auto s_b_3_37 = emitter.add(s_b_3_34, s_b_3_36);
    /* execute.simd:1020 [F] s_b_3_38 = constant s32 4 (const) */
    /* execute.simd:1020 [D] s_b_3_39 = s_b_3_32[s_b_3_38] <= s_b_3_37 */
    auto s_b_3_39 = emitter.vector_insert(s_b_3_32, emitter.const_s32((int32_t)4ULL), s_b_3_37);
    /* execute.simd:1020 [F] s_b_3_40 = constant u32 a (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_40] */
    auto s_b_3_41 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)10ULL));
    /* execute.simd:1020 [F] s_b_3_42 = constant u32 b (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_42] */
    auto s_b_3_43 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)11ULL));
    /* execute.simd:1020 [D] s_b_3_44 = s_b_3_41+s_b_3_43 */
    auto s_b_3_44 = emitter.add(s_b_3_41, s_b_3_43);
    /* execute.simd:1020 [F] s_b_3_45 = constant s32 5 (const) */
    /* execute.simd:1020 [D] s_b_3_46 = s_b_3_39[s_b_3_45] <= s_b_3_44 */
    auto s_b_3_46 = emitter.vector_insert(s_b_3_39, emitter.const_s32((int32_t)5ULL), s_b_3_44);
    /* execute.simd:1020 [F] s_b_3_47 = constant u32 c (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_47] */
    auto s_b_3_48 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)12ULL));
    /* execute.simd:1020 [F] s_b_3_49 = constant u32 d (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_49] */
    auto s_b_3_50 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)13ULL));
    /* execute.simd:1020 [D] s_b_3_51 = s_b_3_48+s_b_3_50 */
    auto s_b_3_51 = emitter.add(s_b_3_48, s_b_3_50);
    /* execute.simd:1020 [F] s_b_3_52 = constant s32 6 (const) */
    /* execute.simd:1020 [D] s_b_3_53 = s_b_3_46[s_b_3_52] <= s_b_3_51 */
    auto s_b_3_53 = emitter.vector_insert(s_b_3_46, emitter.const_s32((int32_t)6ULL), s_b_3_51);
    /* execute.simd:1020 [F] s_b_3_54 = constant u32 e (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_54] */
    auto s_b_3_55 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)14ULL));
    /* execute.simd:1020 [F] s_b_3_56 = constant u32 f (const) */
    /* execute.simd:1020 [D] s_b_3_1[s_b_3_56] */
    auto s_b_3_57 = emitter.vector_extract(s_b_3_1, emitter.const_u32((uint32_t)15ULL));
    /* execute.simd:1020 [D] s_b_3_58 = s_b_3_55+s_b_3_57 */
    auto s_b_3_58 = emitter.add(s_b_3_55, s_b_3_57);
    /* execute.simd:1020 [F] s_b_3_59 = constant s32 7 (const) */
    /* execute.simd:1020 [D] s_b_3_60 = s_b_3_53[s_b_3_59] <= s_b_3_58 */
    auto s_b_3_60 = emitter.vector_insert(s_b_3_53, emitter.const_s32((int32_t)7ULL), s_b_3_58);
    /* execute.simd:1024 [F] s_b_3_61 = constant u32 0 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_61] */
    auto s_b_3_62 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1024 [F] s_b_3_63 = constant u32 1 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_63] */
    auto s_b_3_64 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1024 [D] s_b_3_65 = s_b_3_62+s_b_3_64 */
    auto s_b_3_65 = emitter.add(s_b_3_62, s_b_3_64);
    /* execute.simd:1024 [F] s_b_3_66 = constant s32 8 (const) */
    /* execute.simd:1024 [D] s_b_3_67 = s_b_3_60[s_b_3_66] <= s_b_3_65 */
    auto s_b_3_67 = emitter.vector_insert(s_b_3_60, emitter.const_s32((int32_t)8ULL), s_b_3_65);
    /* execute.simd:1024 [F] s_b_3_68 = constant u32 2 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_68] */
    auto s_b_3_69 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1024 [F] s_b_3_70 = constant u32 3 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_70] */
    auto s_b_3_71 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1024 [D] s_b_3_72 = s_b_3_69+s_b_3_71 */
    auto s_b_3_72 = emitter.add(s_b_3_69, s_b_3_71);
    /* execute.simd:1024 [F] s_b_3_73 = constant s32 9 (const) */
    /* execute.simd:1024 [D] s_b_3_74 = s_b_3_67[s_b_3_73] <= s_b_3_72 */
    auto s_b_3_74 = emitter.vector_insert(s_b_3_67, emitter.const_s32((int32_t)9ULL), s_b_3_72);
    /* execute.simd:1024 [F] s_b_3_75 = constant u32 4 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_75] */
    auto s_b_3_76 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)4ULL));
    /* execute.simd:1024 [F] s_b_3_77 = constant u32 5 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_77] */
    auto s_b_3_78 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)5ULL));
    /* execute.simd:1024 [D] s_b_3_79 = s_b_3_76+s_b_3_78 */
    auto s_b_3_79 = emitter.add(s_b_3_76, s_b_3_78);
    /* execute.simd:1024 [F] s_b_3_80 = constant s32 a (const) */
    /* execute.simd:1024 [D] s_b_3_81 = s_b_3_74[s_b_3_80] <= s_b_3_79 */
    auto s_b_3_81 = emitter.vector_insert(s_b_3_74, emitter.const_s32((int32_t)10ULL), s_b_3_79);
    /* execute.simd:1024 [F] s_b_3_82 = constant u32 6 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_82] */
    auto s_b_3_83 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)6ULL));
    /* execute.simd:1024 [F] s_b_3_84 = constant u32 7 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_84] */
    auto s_b_3_85 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)7ULL));
    /* execute.simd:1024 [D] s_b_3_86 = s_b_3_83+s_b_3_85 */
    auto s_b_3_86 = emitter.add(s_b_3_83, s_b_3_85);
    /* execute.simd:1024 [F] s_b_3_87 = constant s32 b (const) */
    /* execute.simd:1024 [D] s_b_3_88 = s_b_3_81[s_b_3_87] <= s_b_3_86 */
    auto s_b_3_88 = emitter.vector_insert(s_b_3_81, emitter.const_s32((int32_t)11ULL), s_b_3_86);
    /* execute.simd:1024 [F] s_b_3_89 = constant u32 8 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_89] */
    auto s_b_3_90 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)8ULL));
    /* execute.simd:1024 [F] s_b_3_91 = constant u32 9 (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_91] */
    auto s_b_3_92 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)9ULL));
    /* execute.simd:1024 [D] s_b_3_93 = s_b_3_90+s_b_3_92 */
    auto s_b_3_93 = emitter.add(s_b_3_90, s_b_3_92);
    /* execute.simd:1024 [F] s_b_3_94 = constant s32 c (const) */
    /* execute.simd:1024 [D] s_b_3_95 = s_b_3_88[s_b_3_94] <= s_b_3_93 */
    auto s_b_3_95 = emitter.vector_insert(s_b_3_88, emitter.const_s32((int32_t)12ULL), s_b_3_93);
    /* execute.simd:1024 [F] s_b_3_96 = constant u32 a (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_96] */
    auto s_b_3_97 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)10ULL));
    /* execute.simd:1024 [F] s_b_3_98 = constant u32 b (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_98] */
    auto s_b_3_99 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)11ULL));
    /* execute.simd:1024 [D] s_b_3_100 = s_b_3_97+s_b_3_99 */
    auto s_b_3_100 = emitter.add(s_b_3_97, s_b_3_99);
    /* execute.simd:1024 [F] s_b_3_101 = constant s32 d (const) */
    /* execute.simd:1024 [D] s_b_3_102 = s_b_3_95[s_b_3_101] <= s_b_3_100 */
    auto s_b_3_102 = emitter.vector_insert(s_b_3_95, emitter.const_s32((int32_t)13ULL), s_b_3_100);
    /* execute.simd:1024 [F] s_b_3_103 = constant u32 c (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_103] */
    auto s_b_3_104 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)12ULL));
    /* execute.simd:1024 [F] s_b_3_105 = constant u32 d (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_105] */
    auto s_b_3_106 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)13ULL));
    /* execute.simd:1024 [D] s_b_3_107 = s_b_3_104+s_b_3_106 */
    auto s_b_3_107 = emitter.add(s_b_3_104, s_b_3_106);
    /* execute.simd:1024 [F] s_b_3_108 = constant s32 e (const) */
    /* execute.simd:1024 [D] s_b_3_109 = s_b_3_102[s_b_3_108] <= s_b_3_107 */
    auto s_b_3_109 = emitter.vector_insert(s_b_3_102, emitter.const_s32((int32_t)14ULL), s_b_3_107);
    /* execute.simd:1024 [F] s_b_3_110 = constant u32 e (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_110] */
    auto s_b_3_111 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)14ULL));
    /* execute.simd:1024 [F] s_b_3_112 = constant u32 f (const) */
    /* execute.simd:1024 [D] s_b_3_3[s_b_3_112] */
    auto s_b_3_113 = emitter.vector_extract(s_b_3_3, emitter.const_u32((uint32_t)15ULL));
    /* execute.simd:1024 [D] s_b_3_114 = s_b_3_111+s_b_3_113 */
    auto s_b_3_114 = emitter.add(s_b_3_111, s_b_3_113);
    /* execute.simd:1024 [F] s_b_3_115 = constant s32 f (const) */
    /* execute.simd:1024 [D] s_b_3_116 = s_b_3_109[s_b_3_115] <= s_b_3_114 */
    auto s_b_3_116 = emitter.vector_insert(s_b_3_109, emitter.const_s32((int32_t)15ULL), s_b_3_114);
    /* execute.simd:1027 [F] s_b_3_117=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1027 [D] s_b_3_118: WriteRegBank 16:s_b_3_117 = s_b_3_116 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_3_116,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_3_116);
    /* execute.simd:0 [F] s_b_3_119: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_4: 
  {
    /* execute.simd:1031 [F] s_b_4_0=sym_3699_3_parameter_inst.rn (const) */
    /* execute.simd:1031 [D] s_b_4_1 = ReadRegBank 17:s_b_4_0 (v4u16) */
    auto s_b_4_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_4_1,emitter.const_u8(8));
    }
    /* execute.simd:1032 [F] s_b_4_2=sym_3699_3_parameter_inst.rm (const) */
    /* execute.simd:1032 [D] s_b_4_3 = ReadRegBank 17:s_b_4_2 (v4u16) */
    auto s_b_4_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_4_3,emitter.const_u8(8));
    }
    /* ???:4294967295 [F] s_b_4_4 = constant v4u16 
    {
    }
    (const) */
    /* execute.simd:1036 [F] s_b_4_5 = constant u32 0 (const) */
    /* execute.simd:1036 [D] s_b_4_1[s_b_4_5] */
    auto s_b_4_6 = emitter.vector_extract(s_b_4_1, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1036 [F] s_b_4_7 = constant u32 1 (const) */
    /* execute.simd:1036 [D] s_b_4_1[s_b_4_7] */
    auto s_b_4_8 = emitter.vector_extract(s_b_4_1, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1036 [D] s_b_4_9 = s_b_4_6+s_b_4_8 */
    auto s_b_4_9 = emitter.add(s_b_4_6, s_b_4_8);
    /* execute.simd:1036 [F] s_b_4_10 = constant s32 0 (const) */
    /* execute.simd:1036 [D] s_b_4_11 = s_b_4_4[s_b_4_10] <= s_b_4_9 */
    auto s_b_4_11 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint16_t, 4>(0)[0], emitter.context().types().v4u16()), emitter.const_s32((int32_t)0ULL), s_b_4_9);
    /* execute.simd:1036 [F] s_b_4_12 = constant u32 2 (const) */
    /* execute.simd:1036 [D] s_b_4_1[s_b_4_12] */
    auto s_b_4_13 = emitter.vector_extract(s_b_4_1, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1036 [F] s_b_4_14 = constant u32 3 (const) */
    /* execute.simd:1036 [D] s_b_4_1[s_b_4_14] */
    auto s_b_4_15 = emitter.vector_extract(s_b_4_1, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1036 [D] s_b_4_16 = s_b_4_13+s_b_4_15 */
    auto s_b_4_16 = emitter.add(s_b_4_13, s_b_4_15);
    /* execute.simd:1036 [F] s_b_4_17 = constant s32 1 (const) */
    /* execute.simd:1036 [D] s_b_4_18 = s_b_4_11[s_b_4_17] <= s_b_4_16 */
    auto s_b_4_18 = emitter.vector_insert(s_b_4_11, emitter.const_s32((int32_t)1ULL), s_b_4_16);
    /* execute.simd:1040 [F] s_b_4_19 = constant u32 0 (const) */
    /* execute.simd:1040 [D] s_b_4_3[s_b_4_19] */
    auto s_b_4_20 = emitter.vector_extract(s_b_4_3, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1040 [F] s_b_4_21 = constant u32 1 (const) */
    /* execute.simd:1040 [D] s_b_4_3[s_b_4_21] */
    auto s_b_4_22 = emitter.vector_extract(s_b_4_3, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1040 [D] s_b_4_23 = s_b_4_20+s_b_4_22 */
    auto s_b_4_23 = emitter.add(s_b_4_20, s_b_4_22);
    /* execute.simd:1040 [F] s_b_4_24 = constant s32 2 (const) */
    /* execute.simd:1040 [D] s_b_4_25 = s_b_4_18[s_b_4_24] <= s_b_4_23 */
    auto s_b_4_25 = emitter.vector_insert(s_b_4_18, emitter.const_s32((int32_t)2ULL), s_b_4_23);
    /* execute.simd:1040 [F] s_b_4_26 = constant u32 2 (const) */
    /* execute.simd:1040 [D] s_b_4_3[s_b_4_26] */
    auto s_b_4_27 = emitter.vector_extract(s_b_4_3, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1040 [F] s_b_4_28 = constant u32 3 (const) */
    /* execute.simd:1040 [D] s_b_4_3[s_b_4_28] */
    auto s_b_4_29 = emitter.vector_extract(s_b_4_3, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1040 [D] s_b_4_30 = s_b_4_27+s_b_4_29 */
    auto s_b_4_30 = emitter.add(s_b_4_27, s_b_4_29);
    /* execute.simd:1040 [F] s_b_4_31 = constant s32 3 (const) */
    /* execute.simd:1040 [D] s_b_4_32 = s_b_4_25[s_b_4_31] <= s_b_4_30 */
    auto s_b_4_32 = emitter.vector_insert(s_b_4_25, emitter.const_s32((int32_t)3ULL), s_b_4_30);
    /* execute.simd:1043 [F] s_b_4_33=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1043 [D] s_b_4_34: WriteRegBank 17:s_b_4_33 = s_b_4_32 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_32,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_32);
    /* execute.simd:1044 [F] s_b_4_35=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1044 [F] s_b_4_36 = constant u64 0 (const) */
    /* execute.simd:1044 [F] s_b_4_37: WriteRegBank 3:s_b_4_35 = s_b_4_36 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_4_38: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_5: 
  {
    /* execute.simd:1049 [F] s_b_5_0=sym_3699_3_parameter_inst.rn (const) */
    /* execute.simd:1049 [D] s_b_5_1 = ReadRegBank 18:s_b_5_0 (v8u16) */
    auto s_b_5_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_5_1,emitter.const_u8(16));
    }
    /* execute.simd:1050 [F] s_b_5_2=sym_3699_3_parameter_inst.rm (const) */
    /* execute.simd:1050 [D] s_b_5_3 = ReadRegBank 18:s_b_5_2 (v8u16) */
    auto s_b_5_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_5_3,emitter.const_u8(16));
    }
    /* ???:4294967295 [F] s_b_5_4 = constant v8u16 
    {
    }
    (const) */
    /* execute.simd:1054 [F] s_b_5_5 = constant u32 0 (const) */
    /* execute.simd:1054 [D] s_b_5_1[s_b_5_5] */
    auto s_b_5_6 = emitter.vector_extract(s_b_5_1, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1054 [F] s_b_5_7 = constant u32 1 (const) */
    /* execute.simd:1054 [D] s_b_5_1[s_b_5_7] */
    auto s_b_5_8 = emitter.vector_extract(s_b_5_1, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1054 [D] s_b_5_9 = s_b_5_6+s_b_5_8 */
    auto s_b_5_9 = emitter.add(s_b_5_6, s_b_5_8);
    /* execute.simd:1054 [F] s_b_5_10 = constant s32 0 (const) */
    /* execute.simd:1054 [D] s_b_5_11 = s_b_5_4[s_b_5_10] <= s_b_5_9 */
    auto s_b_5_11 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint16_t, 8>(0)[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_5_9);
    /* execute.simd:1054 [F] s_b_5_12 = constant u32 2 (const) */
    /* execute.simd:1054 [D] s_b_5_1[s_b_5_12] */
    auto s_b_5_13 = emitter.vector_extract(s_b_5_1, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1054 [F] s_b_5_14 = constant u32 3 (const) */
    /* execute.simd:1054 [D] s_b_5_1[s_b_5_14] */
    auto s_b_5_15 = emitter.vector_extract(s_b_5_1, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1054 [D] s_b_5_16 = s_b_5_13+s_b_5_15 */
    auto s_b_5_16 = emitter.add(s_b_5_13, s_b_5_15);
    /* execute.simd:1054 [F] s_b_5_17 = constant s32 1 (const) */
    /* execute.simd:1054 [D] s_b_5_18 = s_b_5_11[s_b_5_17] <= s_b_5_16 */
    auto s_b_5_18 = emitter.vector_insert(s_b_5_11, emitter.const_s32((int32_t)1ULL), s_b_5_16);
    /* execute.simd:1054 [F] s_b_5_19 = constant u32 4 (const) */
    /* execute.simd:1054 [D] s_b_5_1[s_b_5_19] */
    auto s_b_5_20 = emitter.vector_extract(s_b_5_1, emitter.const_u32((uint32_t)4ULL));
    /* execute.simd:1054 [F] s_b_5_21 = constant u32 5 (const) */
    /* execute.simd:1054 [D] s_b_5_1[s_b_5_21] */
    auto s_b_5_22 = emitter.vector_extract(s_b_5_1, emitter.const_u32((uint32_t)5ULL));
    /* execute.simd:1054 [D] s_b_5_23 = s_b_5_20+s_b_5_22 */
    auto s_b_5_23 = emitter.add(s_b_5_20, s_b_5_22);
    /* execute.simd:1054 [F] s_b_5_24 = constant s32 2 (const) */
    /* execute.simd:1054 [D] s_b_5_25 = s_b_5_18[s_b_5_24] <= s_b_5_23 */
    auto s_b_5_25 = emitter.vector_insert(s_b_5_18, emitter.const_s32((int32_t)2ULL), s_b_5_23);
    /* execute.simd:1054 [F] s_b_5_26 = constant u32 6 (const) */
    /* execute.simd:1054 [D] s_b_5_1[s_b_5_26] */
    auto s_b_5_27 = emitter.vector_extract(s_b_5_1, emitter.const_u32((uint32_t)6ULL));
    /* execute.simd:1054 [F] s_b_5_28 = constant u32 7 (const) */
    /* execute.simd:1054 [D] s_b_5_1[s_b_5_28] */
    auto s_b_5_29 = emitter.vector_extract(s_b_5_1, emitter.const_u32((uint32_t)7ULL));
    /* execute.simd:1054 [D] s_b_5_30 = s_b_5_27+s_b_5_29 */
    auto s_b_5_30 = emitter.add(s_b_5_27, s_b_5_29);
    /* execute.simd:1054 [F] s_b_5_31 = constant s32 3 (const) */
    /* execute.simd:1054 [D] s_b_5_32 = s_b_5_25[s_b_5_31] <= s_b_5_30 */
    auto s_b_5_32 = emitter.vector_insert(s_b_5_25, emitter.const_s32((int32_t)3ULL), s_b_5_30);
    /* execute.simd:1058 [F] s_b_5_33 = constant u32 0 (const) */
    /* execute.simd:1058 [D] s_b_5_3[s_b_5_33] */
    auto s_b_5_34 = emitter.vector_extract(s_b_5_3, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1058 [F] s_b_5_35 = constant u32 1 (const) */
    /* execute.simd:1058 [D] s_b_5_3[s_b_5_35] */
    auto s_b_5_36 = emitter.vector_extract(s_b_5_3, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1058 [D] s_b_5_37 = s_b_5_34+s_b_5_36 */
    auto s_b_5_37 = emitter.add(s_b_5_34, s_b_5_36);
    /* execute.simd:1058 [F] s_b_5_38 = constant s32 4 (const) */
    /* execute.simd:1058 [D] s_b_5_39 = s_b_5_32[s_b_5_38] <= s_b_5_37 */
    auto s_b_5_39 = emitter.vector_insert(s_b_5_32, emitter.const_s32((int32_t)4ULL), s_b_5_37);
    /* execute.simd:1058 [F] s_b_5_40 = constant u32 2 (const) */
    /* execute.simd:1058 [D] s_b_5_3[s_b_5_40] */
    auto s_b_5_41 = emitter.vector_extract(s_b_5_3, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1058 [F] s_b_5_42 = constant u32 3 (const) */
    /* execute.simd:1058 [D] s_b_5_3[s_b_5_42] */
    auto s_b_5_43 = emitter.vector_extract(s_b_5_3, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1058 [D] s_b_5_44 = s_b_5_41+s_b_5_43 */
    auto s_b_5_44 = emitter.add(s_b_5_41, s_b_5_43);
    /* execute.simd:1058 [F] s_b_5_45 = constant s32 5 (const) */
    /* execute.simd:1058 [D] s_b_5_46 = s_b_5_39[s_b_5_45] <= s_b_5_44 */
    auto s_b_5_46 = emitter.vector_insert(s_b_5_39, emitter.const_s32((int32_t)5ULL), s_b_5_44);
    /* execute.simd:1058 [F] s_b_5_47 = constant u32 4 (const) */
    /* execute.simd:1058 [D] s_b_5_3[s_b_5_47] */
    auto s_b_5_48 = emitter.vector_extract(s_b_5_3, emitter.const_u32((uint32_t)4ULL));
    /* execute.simd:1058 [F] s_b_5_49 = constant u32 5 (const) */
    /* execute.simd:1058 [D] s_b_5_3[s_b_5_49] */
    auto s_b_5_50 = emitter.vector_extract(s_b_5_3, emitter.const_u32((uint32_t)5ULL));
    /* execute.simd:1058 [D] s_b_5_51 = s_b_5_48+s_b_5_50 */
    auto s_b_5_51 = emitter.add(s_b_5_48, s_b_5_50);
    /* execute.simd:1058 [F] s_b_5_52 = constant s32 6 (const) */
    /* execute.simd:1058 [D] s_b_5_53 = s_b_5_46[s_b_5_52] <= s_b_5_51 */
    auto s_b_5_53 = emitter.vector_insert(s_b_5_46, emitter.const_s32((int32_t)6ULL), s_b_5_51);
    /* execute.simd:1058 [F] s_b_5_54 = constant u32 6 (const) */
    /* execute.simd:1058 [D] s_b_5_3[s_b_5_54] */
    auto s_b_5_55 = emitter.vector_extract(s_b_5_3, emitter.const_u32((uint32_t)6ULL));
    /* execute.simd:1058 [F] s_b_5_56 = constant u32 7 (const) */
    /* execute.simd:1058 [D] s_b_5_3[s_b_5_56] */
    auto s_b_5_57 = emitter.vector_extract(s_b_5_3, emitter.const_u32((uint32_t)7ULL));
    /* execute.simd:1058 [D] s_b_5_58 = s_b_5_55+s_b_5_57 */
    auto s_b_5_58 = emitter.add(s_b_5_55, s_b_5_57);
    /* execute.simd:1058 [F] s_b_5_59 = constant s32 7 (const) */
    /* execute.simd:1058 [D] s_b_5_60 = s_b_5_53[s_b_5_59] <= s_b_5_58 */
    auto s_b_5_60 = emitter.vector_insert(s_b_5_53, emitter.const_s32((int32_t)7ULL), s_b_5_58);
    /* execute.simd:1060 [F] s_b_5_61=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1060 [D] s_b_5_62: WriteRegBank 18:s_b_5_61 = s_b_5_60 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_60,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_60);
    /* execute.simd:0 [F] s_b_5_63: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_6: 
  {
    /* execute.simd:1065 [F] s_b_6_0=sym_3699_3_parameter_inst.rn (const) */
    /* execute.simd:1065 [D] s_b_6_1 = ReadRegBank 19:s_b_6_0 (v2u32) */
    auto s_b_6_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_6_1,emitter.const_u8(8));
    }
    /* execute.simd:1066 [F] s_b_6_2=sym_3699_3_parameter_inst.rm (const) */
    /* execute.simd:1066 [D] s_b_6_3 = ReadRegBank 19:s_b_6_2 (v2u32) */
    auto s_b_6_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_6_3,emitter.const_u8(8));
    }
    /* ???:4294967295 [F] s_b_6_4 = constant v2u32 
    {
    }
    (const) */
    /* execute.simd:1070 [F] s_b_6_5 = constant u32 0 (const) */
    /* execute.simd:1070 [D] s_b_6_1[s_b_6_5] */
    auto s_b_6_6 = emitter.vector_extract(s_b_6_1, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1070 [F] s_b_6_7 = constant u32 1 (const) */
    /* execute.simd:1070 [D] s_b_6_1[s_b_6_7] */
    auto s_b_6_8 = emitter.vector_extract(s_b_6_1, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1070 [D] s_b_6_9 = s_b_6_6+s_b_6_8 */
    auto s_b_6_9 = emitter.add(s_b_6_6, s_b_6_8);
    /* execute.simd:1070 [F] s_b_6_10 = constant s32 0 (const) */
    /* execute.simd:1070 [D] s_b_6_11 = s_b_6_4[s_b_6_10] <= s_b_6_9 */
    auto s_b_6_11 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint32_t, 2>(0)[0], emitter.context().types().v2u32()), emitter.const_s32((int32_t)0ULL), s_b_6_9);
    /* execute.simd:1074 [F] s_b_6_12 = constant u32 0 (const) */
    /* execute.simd:1074 [D] s_b_6_3[s_b_6_12] */
    auto s_b_6_13 = emitter.vector_extract(s_b_6_3, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1074 [F] s_b_6_14 = constant u32 1 (const) */
    /* execute.simd:1074 [D] s_b_6_3[s_b_6_14] */
    auto s_b_6_15 = emitter.vector_extract(s_b_6_3, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1074 [D] s_b_6_16 = s_b_6_13+s_b_6_15 */
    auto s_b_6_16 = emitter.add(s_b_6_13, s_b_6_15);
    /* execute.simd:1074 [F] s_b_6_17 = constant s32 1 (const) */
    /* execute.simd:1074 [D] s_b_6_18 = s_b_6_11[s_b_6_17] <= s_b_6_16 */
    auto s_b_6_18 = emitter.vector_insert(s_b_6_11, emitter.const_s32((int32_t)1ULL), s_b_6_16);
    /* execute.simd:1077 [F] s_b_6_19=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1077 [D] s_b_6_20: WriteRegBank 19:s_b_6_19 = s_b_6_18 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_18,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_18);
    /* execute.simd:1078 [F] s_b_6_21=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1078 [F] s_b_6_22 = constant u64 0 (const) */
    /* execute.simd:1078 [F] s_b_6_23: WriteRegBank 3:s_b_6_21 = s_b_6_22 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_6_24: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_7: 
  {
    /* execute.simd:1083 [F] s_b_7_0=sym_3699_3_parameter_inst.rn (const) */
    /* execute.simd:1083 [D] s_b_7_1 = ReadRegBank 20:s_b_7_0 (v4u32) */
    auto s_b_7_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_7_1,emitter.const_u8(16));
    }
    /* execute.simd:1084 [F] s_b_7_2=sym_3699_3_parameter_inst.rm (const) */
    /* execute.simd:1084 [D] s_b_7_3 = ReadRegBank 20:s_b_7_2 (v4u32) */
    auto s_b_7_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_7_3,emitter.const_u8(16));
    }
    /* ???:4294967295 [F] s_b_7_4 = constant v4u32 
    {
    }
    (const) */
    /* execute.simd:1088 [F] s_b_7_5 = constant u32 0 (const) */
    /* execute.simd:1088 [D] s_b_7_1[s_b_7_5] */
    auto s_b_7_6 = emitter.vector_extract(s_b_7_1, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1088 [F] s_b_7_7 = constant u32 1 (const) */
    /* execute.simd:1088 [D] s_b_7_1[s_b_7_7] */
    auto s_b_7_8 = emitter.vector_extract(s_b_7_1, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1088 [D] s_b_7_9 = s_b_7_6+s_b_7_8 */
    auto s_b_7_9 = emitter.add(s_b_7_6, s_b_7_8);
    /* execute.simd:1088 [F] s_b_7_10 = constant s32 0 (const) */
    /* execute.simd:1088 [D] s_b_7_11 = s_b_7_4[s_b_7_10] <= s_b_7_9 */
    auto s_b_7_11 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint32_t, 4>(0)[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_7_9);
    /* execute.simd:1088 [F] s_b_7_12 = constant u32 2 (const) */
    /* execute.simd:1088 [D] s_b_7_1[s_b_7_12] */
    auto s_b_7_13 = emitter.vector_extract(s_b_7_1, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1088 [F] s_b_7_14 = constant u32 3 (const) */
    /* execute.simd:1088 [D] s_b_7_1[s_b_7_14] */
    auto s_b_7_15 = emitter.vector_extract(s_b_7_1, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1088 [D] s_b_7_16 = s_b_7_13+s_b_7_15 */
    auto s_b_7_16 = emitter.add(s_b_7_13, s_b_7_15);
    /* execute.simd:1088 [F] s_b_7_17 = constant s32 1 (const) */
    /* execute.simd:1088 [D] s_b_7_18 = s_b_7_11[s_b_7_17] <= s_b_7_16 */
    auto s_b_7_18 = emitter.vector_insert(s_b_7_11, emitter.const_s32((int32_t)1ULL), s_b_7_16);
    /* execute.simd:1092 [F] s_b_7_19 = constant u32 0 (const) */
    /* execute.simd:1092 [D] s_b_7_3[s_b_7_19] */
    auto s_b_7_20 = emitter.vector_extract(s_b_7_3, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1092 [F] s_b_7_21 = constant u32 1 (const) */
    /* execute.simd:1092 [D] s_b_7_3[s_b_7_21] */
    auto s_b_7_22 = emitter.vector_extract(s_b_7_3, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1092 [D] s_b_7_23 = s_b_7_20+s_b_7_22 */
    auto s_b_7_23 = emitter.add(s_b_7_20, s_b_7_22);
    /* execute.simd:1092 [F] s_b_7_24 = constant s32 2 (const) */
    /* execute.simd:1092 [D] s_b_7_25 = s_b_7_18[s_b_7_24] <= s_b_7_23 */
    auto s_b_7_25 = emitter.vector_insert(s_b_7_18, emitter.const_s32((int32_t)2ULL), s_b_7_23);
    /* execute.simd:1092 [F] s_b_7_26 = constant u32 2 (const) */
    /* execute.simd:1092 [D] s_b_7_3[s_b_7_26] */
    auto s_b_7_27 = emitter.vector_extract(s_b_7_3, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:1092 [F] s_b_7_28 = constant u32 3 (const) */
    /* execute.simd:1092 [D] s_b_7_3[s_b_7_28] */
    auto s_b_7_29 = emitter.vector_extract(s_b_7_3, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:1092 [D] s_b_7_30 = s_b_7_27+s_b_7_29 */
    auto s_b_7_30 = emitter.add(s_b_7_27, s_b_7_29);
    /* execute.simd:1092 [F] s_b_7_31 = constant s32 3 (const) */
    /* execute.simd:1092 [D] s_b_7_32 = s_b_7_25[s_b_7_31] <= s_b_7_30 */
    auto s_b_7_32 = emitter.vector_insert(s_b_7_25, emitter.const_s32((int32_t)3ULL), s_b_7_30);
    /* execute.simd:1095 [F] s_b_7_33=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1095 [D] s_b_7_34: WriteRegBank 20:s_b_7_33 = s_b_7_32 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_32,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_32);
    /* execute.simd:0 [F] s_b_7_35: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_8: 
  {
    /* execute.simd:1099 [F] s_b_8_0=sym_3699_3_parameter_inst.rn (const) */
    /* execute.simd:1099 [D] s_b_8_1 = ReadRegBank 21:s_b_8_0 (v2u64) */
    auto s_b_8_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_8_1,emitter.const_u8(16));
    }
    /* execute.simd:1100 [F] s_b_8_2=sym_3699_3_parameter_inst.rm (const) */
    /* execute.simd:1100 [D] s_b_8_3 = ReadRegBank 21:s_b_8_2 (v2u64) */
    auto s_b_8_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_8_3,emitter.const_u8(16));
    }
    /* ???:4294967295 [F] s_b_8_4 = constant v2u64 
    {
    }
    (const) */
    /* execute.simd:1104 [F] s_b_8_5 = constant u32 0 (const) */
    /* execute.simd:1104 [D] s_b_8_1[s_b_8_5] */
    auto s_b_8_6 = emitter.vector_extract(s_b_8_1, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1104 [F] s_b_8_7 = constant u32 1 (const) */
    /* execute.simd:1104 [D] s_b_8_1[s_b_8_7] */
    auto s_b_8_8 = emitter.vector_extract(s_b_8_1, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1104 [D] s_b_8_9 = s_b_8_6+s_b_8_8 */
    auto s_b_8_9 = emitter.add(s_b_8_6, s_b_8_8);
    /* execute.simd:1104 [F] s_b_8_10 = constant s32 0 (const) */
    /* execute.simd:1104 [D] s_b_8_11 = s_b_8_4[s_b_8_10] <= s_b_8_9 */
    auto s_b_8_11 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint64_t, 2>(0)[0], emitter.context().types().v2u64()), emitter.const_s32((int32_t)0ULL), s_b_8_9);
    /* execute.simd:1108 [F] s_b_8_12 = constant u32 0 (const) */
    /* execute.simd:1108 [D] s_b_8_3[s_b_8_12] */
    auto s_b_8_13 = emitter.vector_extract(s_b_8_3, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:1108 [F] s_b_8_14 = constant u32 1 (const) */
    /* execute.simd:1108 [D] s_b_8_3[s_b_8_14] */
    auto s_b_8_15 = emitter.vector_extract(s_b_8_3, emitter.const_u32((uint32_t)1ULL));
    /* execute.simd:1108 [D] s_b_8_16 = s_b_8_13+s_b_8_15 */
    auto s_b_8_16 = emitter.add(s_b_8_13, s_b_8_15);
    /* execute.simd:1108 [F] s_b_8_17 = constant s32 1 (const) */
    /* execute.simd:1108 [D] s_b_8_18 = s_b_8_11[s_b_8_17] <= s_b_8_16 */
    auto s_b_8_18 = emitter.vector_insert(s_b_8_11, emitter.const_s32((int32_t)1ULL), s_b_8_16);
    /* execute.simd:1111 [F] s_b_8_19=sym_3699_3_parameter_inst.rd (const) */
    /* execute.simd:1111 [D] s_b_8_20: WriteRegBank 21:s_b_8_19 = s_b_8_18 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_8_18,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_8_18);
    /* execute.simd:0 [F] s_b_8_21: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_9: 
  {
    /* execute.simd:1115 [D] s_b_9_0 = trap */
    emitter.raise(emitter.const_u8(0));
    /* execute.simd:0 [F] s_b_9_1: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_barrier(const arm64_decode_a64_SYSTEM&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* ???:4294967295 [F] s_b_0_0: Return */
    goto fixed_done;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_br(const arm64_decode_a64_UB_REG&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  uint64_t CV_sym_54385_1_temporary_value;
  auto DV_sym_54385_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:615 [F] s_b_0_0=sym_6424_3_parameter_inst.opc (const) */
    /* execute.a64:615 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:615 [F] s_b_0_2 = constant u32 1 (const) */
    /* execute.a64:615 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.opc) == (uint32_t)1ULL));
    /* execute.a64:615 [F] s_b_0_4: If s_b_0_3: Jump b_1 else b_2 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_2;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:616 [D] s_b_1_0 = read_pc */
    auto s_b_1_0 = emitter.load_pc();
    /* execute.a64:616 [F] s_b_1_1 = constant u64 4 (const) */
    /* execute.a64:616 [D] s_b_1_2 = s_b_1_0+s_b_1_1 */
    auto s_b_1_2 = emitter.add(s_b_1_0, emitter.const_u64((uint64_t)4ULL));
    /* execute.a64:2747 [F] s_b_1_3 = constant u8 1e (const) */
    /* execute.a64:2747 [D] s_b_1_4: WriteRegBank 0:s_b_1_3 = s_b_1_2 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * (uint8_t)30ULL))),s_b_1_2,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * (uint8_t)30ULL))),s_b_1_2);
    /* execute.a64:0 [F] s_b_1_5: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_0, b_1,  */
  fixed_block_b_2: 
  {
    /* execute.a64:2720 [F] s_b_2_0=sym_6424_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [F] s_b_2_1 = (u32)s_b_2_0 (const) */
    /* execute.a64:2714 [F] s_b_2_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_2_3 = s_b_2_1==s_b_2_2 (const) */
    uint8_t s_b_2_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_2_4: If s_b_2_3: Jump b_3 else b_4 (const) */
    if (s_b_2_3) 
    {
      goto fixed_block_b_3;
    }
    else 
    {
      goto fixed_block_b_4;
    }
  }
  /* b_2,  */
  fixed_block_b_3: 
  {
    /* execute.a64:2714 [F] s_b_3_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_3_1: sym_54385_1_temporary_value = s_b_3_0 (const), dominates: s_b_5_0  */
    CV_sym_54385_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_54385_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_3_2: Jump b_5 (const) */
    goto fixed_block_b_5;
  }
  /* b_2,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2714 [F] s_b_4_0=sym_6424_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [D] s_b_4_1 = ReadRegBank 0:s_b_4_0 (u64) */
    auto s_b_4_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_4_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_4_2: sym_54385_1_temporary_value = s_b_4_1, dominates: s_b_5_0  */
    emitter.store_local(DV_sym_54385_1_temporary_value, s_b_4_1);
    /* execute.a64:2714 [F] s_b_4_3: Jump b_5 (const) */
    goto fixed_block_b_5;
  }
  /* b_3, b_4,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2714 [D] s_b_5_0 = sym_54385_1_temporary_value uint64_t */
    auto s_b_5_0 = emitter.load_local(DV_sym_54385_1_temporary_value, emitter.context().types().u64());
    /* execute.a64:571 [D] s_b_5_1 = write_pc */
    emitter.store_pc(s_b_5_0);
    /* execute.a64:572 [D] s_b_5_2 = __branch_taken */
    emitter.call(__captive___branch_taken);
    /* ???:4294967295 [F] s_b_5_3: Return */
    goto fixed_done;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_cls(const arm64_decode_a64_DP_1S&insn, captive::arch::dbt::el::Emitter& emitter)
{
  std::queue<captive::arch::dbt::el::Block *> dynamic_block_queue;
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto block_b_2 = emitter.context().create_block();
  auto block_b_4 = emitter.context().create_block();
  auto block_b_5 = emitter.context().create_block();
  auto block_b_6 = emitter.context().create_block();
  auto block_b_7 = emitter.context().create_block();
  auto block_b_14 = emitter.context().create_block();
  auto block_b_15 = emitter.context().create_block();
  auto block_b_16 = emitter.context().create_block();
  auto block_b_17 = emitter.context().create_block();
  auto DV_sym_56267_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), true);
  auto DV_sym_56312_3_parameter_value = emitter.alloc_local(emitter.context().types().u32(), true);
  uint64_t CV_sym_56188_1_temporary_value;
  auto DV_sym_56188_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_56216_1_temporary_value;
  auto DV_sym_56216_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_6967_0_rn = emitter.alloc_local(emitter.context().types().u32(), true);
  auto DV_sym_6931_0_rn = emitter.alloc_local(emitter.context().types().u64(), true);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2284 [F] s_b_0_0=sym_6922_3_parameter_inst.sf (const) */
    /* execute.a64:2284 [F] s_b_0_1: If s_b_0_0: Jump b_1 else b_3 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2285 [F] s_b_1_0=sym_6922_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [F] s_b_1_1 = (u32)s_b_1_0 (const) */
    /* execute.a64:2714 [F] s_b_1_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_1_3 = s_b_1_1==s_b_1_2 (const) */
    uint8_t s_b_1_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_1_4: If s_b_1_3: Jump b_8 else b_9 (const) */
    if (s_b_1_3) 
    {
      goto fixed_block_b_8;
    }
    else 
    {
      goto fixed_block_b_9;
    }
  }
  // BLOCK b_2 not fully fixed
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.a64:2294 [F] s_b_3_0=sym_6922_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [F] s_b_3_1 = (u32)s_b_3_0 (const) */
    /* execute.a64:2709 [F] s_b_3_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_3_3 = s_b_3_1==s_b_3_2 (const) */
    uint8_t s_b_3_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_3_4: If s_b_3_3: Jump b_11 else b_12 (const) */
    if (s_b_3_3) 
    {
      goto fixed_block_b_11;
    }
    else 
    {
      goto fixed_block_b_12;
    }
  }
  // BLOCK b_4 not fully fixed
  // BLOCK b_5 not fully fixed
  // BLOCK b_6 not fully fixed
  // BLOCK b_7 not fully fixed
  /* b_1,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2714 [F] s_b_8_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_8_1: sym_56188_1_temporary_value = s_b_8_0 (const), dominates: s_b_10_0  */
    CV_sym_56188_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_56188_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_8_2: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_1,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2714 [F] s_b_9_0=sym_6922_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [D] s_b_9_1 = ReadRegBank 0:s_b_9_0 (u64) */
    auto s_b_9_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_9_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_9_2: sym_56188_1_temporary_value = s_b_9_1, dominates: s_b_10_0  */
    emitter.store_local(DV_sym_56188_1_temporary_value, s_b_9_1);
    /* execute.a64:2714 [F] s_b_9_3: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_8, b_9,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2714 [D] s_b_10_0 = sym_56188_1_temporary_value uint64_t */
    auto s_b_10_0 = emitter.load_local(DV_sym_56188_1_temporary_value, emitter.context().types().u64());
    /* execute.a64:2285 [D] s_b_10_1: sym_6931_0_rn = s_b_10_0, dominates: s_b_5_0  */
    emitter.store_local(DV_sym_6931_0_rn, s_b_10_0);
    /* execute.a64:2287 [F] s_b_10_2 = constant u64 0 (const) */
    /* execute.a64:2287 [D] s_b_10_3 = s_b_10_0==s_b_10_2 */
    auto s_b_10_3 = emitter.cmp_eq(s_b_10_0, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2287 [D] s_b_10_4: If s_b_10_3: Jump b_4 else b_5 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_4;
        dynamic_block_queue.push(block_b_4);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_5;
        dynamic_block_queue.push(block_b_5);
        false_target = block;
      }
      emitter.branch(s_b_10_3, true_target, false_target);
    }
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2709 [F] s_b_11_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_11_1: sym_56216_1_temporary_value = s_b_11_0 (const), dominates: s_b_13_0  */
    CV_sym_56216_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_56216_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_11_2: Jump b_13 (const) */
    goto fixed_block_b_13;
  }
  /* b_3,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2709 [F] s_b_12_0=sym_6922_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [D] s_b_12_1 = ReadRegBank 1:s_b_12_0 (u32) */
    auto s_b_12_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_12_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_12_2: sym_56216_1_temporary_value = s_b_12_1, dominates: s_b_13_0  */
    emitter.store_local(DV_sym_56216_1_temporary_value, s_b_12_1);
    /* execute.a64:2709 [F] s_b_12_3: Jump b_13 (const) */
    goto fixed_block_b_13;
  }
  /* b_11, b_12,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2709 [D] s_b_13_0 = sym_56216_1_temporary_value uint32_t */
    auto s_b_13_0 = emitter.load_local(DV_sym_56216_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2294 [D] s_b_13_1: sym_6967_0_rn = s_b_13_0, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_6967_0_rn, s_b_13_0);
    /* execute.a64:2296 [F] s_b_13_2 = constant u32 0 (const) */
    /* execute.a64:2296 [D] s_b_13_3 = s_b_13_0==s_b_13_2 */
    auto s_b_13_3 = emitter.cmp_eq(s_b_13_0, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2296 [D] s_b_13_4: If s_b_13_3: Jump b_6 else b_7 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_6;
        dynamic_block_queue.push(block_b_6);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_7;
        dynamic_block_queue.push(block_b_7);
        false_target = block;
      }
      emitter.branch(s_b_13_3, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_14 not fully fixed
  // BLOCK b_15 not fully fixed
  // BLOCK b_16 not fully fixed
  // BLOCK b_17 not fully fixed
  fixed_done:
  if (dynamic_block_queue.size() > 0) 
  {
    std::set<captive::arch::dbt::el::Block *> emitted_blocks;
    while (dynamic_block_queue.size() > 0) 
    {
      captive::arch::dbt::el::Block *block_index = dynamic_block_queue.front();
      dynamic_block_queue.pop();
      if (emitted_blocks.count(block_index)) continue;
      emitted_blocks.insert(block_index);
      if (block_index == block_b_2) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_2);
        /* ???:4294967295 [F] s_b_2_0: Return */
        emitter.jump(__exit_block);
      }
      else if (block_index == block_b_4) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_4);
        /* execute.a64:2288 [F] s_b_4_0=sym_6922_3_parameter_inst.rd (const) */
        /* execute.a64:2745 [F] s_b_4_1 = (u32)s_b_4_0 (const) */
        /* execute.a64:2745 [F] s_b_4_2 = constant u32 1f (const) */
        /* execute.a64:2745 [F] s_b_4_3 = s_b_4_1==s_b_4_2 (const) */
        uint8_t s_b_4_3 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
        /* execute.a64:2745 [F] s_b_4_4: If s_b_4_3: Jump b_2 else b_14 (const) */
        if (s_b_4_3) 
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
        else 
        {
          auto block = block_b_14;
          dynamic_block_queue.push(block_b_14);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_5) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_5);
        /* execute.a64:2290 [D] s_b_5_0 = sym_6931_0_rn uint64_t */
        auto s_b_5_0 = emitter.load_local(DV_sym_6931_0_rn, emitter.context().types().u64());
        /* execute.a64:2290 [F] s_b_5_1 = constant u64 1 (const) */
        /* execute.a64:2290 [D] s_b_5_2 = s_b_5_0>>s_b_5_1 */
        auto s_b_5_2 = emitter.shr(s_b_5_0, emitter.const_u64((uint64_t)1ULL));
        /* execute.a64:2290 [F] s_b_5_3 = constant u64 8000000000000000 (const) */
        /* execute.a64:2290 [F] s_b_5_4 = ~s_b_5_3 (const) */
        uint64_t s_b_5_4 = ~(uint64_t)9223372036854775808ULL;
        /* execute.a64:2290 [D] s_b_5_5 = s_b_5_0&s_b_5_4 */
        auto s_b_5_5 = emitter.bitwise_and(s_b_5_0, emitter.const_u64(s_b_5_4));
        /* execute.a64:2290 [D] s_b_5_6 = s_b_5_2^s_b_5_5 */
        auto s_b_5_6 = emitter.bitwise_xor(s_b_5_2, s_b_5_5);
        /* execute.a64:2290 [D] s_b_5_7: sym_6931_0_rn = s_b_5_6, dominates:  */
        emitter.store_local(DV_sym_6931_0_rn, s_b_5_6);
        /* execute.a64:2291 [F] s_b_5_8=sym_6922_3_parameter_inst.rd (const) */
        /* execute.a64:2291 [D] s_b_5_9 = __builtin_clz64 */
        auto s_b_5_9 = emitter.clz(s_b_5_6);
        /* execute.a64:2291 [D] s_b_5_10 = (u64)s_b_5_9 */
        auto s_b_5_10 = (captive::arch::dbt::el::Value *)s_b_5_9;
        /* execute.a64:2291 [F] s_b_5_11 = constant u64 1 (const) */
        /* execute.a64:2291 [D] s_b_5_12 = s_b_5_10-s_b_5_11 */
        auto s_b_5_12 = emitter.sub(s_b_5_10, emitter.const_u64((uint64_t)1ULL));
        /* execute.a64:2291 [D] s_b_5_13: sym_56267_3_parameter_value = s_b_5_12, dominates: s_b_15_1  */
        emitter.store_local(DV_sym_56267_3_parameter_value, s_b_5_12);
        /* execute.a64:2745 [F] s_b_5_14 = (u32)s_b_5_8 (const) */
        /* execute.a64:2745 [F] s_b_5_15 = constant u32 1f (const) */
        /* execute.a64:2745 [F] s_b_5_16 = s_b_5_14==s_b_5_15 (const) */
        uint8_t s_b_5_16 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
        /* execute.a64:2745 [F] s_b_5_17: If s_b_5_16: Jump b_2 else b_15 (const) */
        if (s_b_5_16) 
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
        else 
        {
          auto block = block_b_15;
          dynamic_block_queue.push(block_b_15);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_6) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_6);
        /* execute.a64:2297 [F] s_b_6_0=sym_6922_3_parameter_inst.rd (const) */
        /* execute.a64:2737 [F] s_b_6_1 = (u32)s_b_6_0 (const) */
        /* execute.a64:2737 [F] s_b_6_2 = constant u32 1f (const) */
        /* execute.a64:2737 [F] s_b_6_3 = s_b_6_1==s_b_6_2 (const) */
        uint8_t s_b_6_3 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
        /* execute.a64:2737 [F] s_b_6_4: If s_b_6_3: Jump b_2 else b_16 (const) */
        if (s_b_6_3) 
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
        else 
        {
          auto block = block_b_16;
          dynamic_block_queue.push(block_b_16);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_7) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_7);
        /* execute.a64:2299 [D] s_b_7_0 = sym_6967_0_rn uint32_t */
        auto s_b_7_0 = emitter.load_local(DV_sym_6967_0_rn, emitter.context().types().u32());
        /* execute.a64:2299 [F] s_b_7_1 = constant u32 1 (const) */
        /* execute.a64:2299 [D] s_b_7_2 = s_b_7_0>>s_b_7_1 */
        auto s_b_7_2 = emitter.shr(s_b_7_0, emitter.const_u32((uint32_t)1ULL));
        /* execute.a64:2299 [F] s_b_7_3 = constant u32 80000000 (const) */
        /* execute.a64:2299 [F] s_b_7_4 = ~s_b_7_3 (const) */
        uint32_t s_b_7_4 = ~(uint32_t)2147483648ULL;
        /* execute.a64:2299 [D] s_b_7_5 = s_b_7_0&s_b_7_4 */
        auto s_b_7_5 = emitter.bitwise_and(s_b_7_0, emitter.const_u32(s_b_7_4));
        /* execute.a64:2299 [D] s_b_7_6 = s_b_7_2^s_b_7_5 */
        auto s_b_7_6 = emitter.bitwise_xor(s_b_7_2, s_b_7_5);
        /* execute.a64:2299 [D] s_b_7_7: sym_6967_0_rn = s_b_7_6, dominates:  */
        emitter.store_local(DV_sym_6967_0_rn, s_b_7_6);
        /* execute.a64:2300 [F] s_b_7_8=sym_6922_3_parameter_inst.rd (const) */
        /* execute.a64:2300 [D] s_b_7_9 = __builtin_clz32 */
        auto s_b_7_9 = emitter.clz(s_b_7_6);
        /* execute.a64:2300 [D] s_b_7_10 = (u32)s_b_7_9 */
        auto s_b_7_10 = (captive::arch::dbt::el::Value *)s_b_7_9;
        /* execute.a64:2300 [F] s_b_7_11 = constant u32 1 (const) */
        /* execute.a64:2300 [D] s_b_7_12 = s_b_7_10-s_b_7_11 */
        auto s_b_7_12 = emitter.sub(s_b_7_10, emitter.const_u32((uint32_t)1ULL));
        /* execute.a64:2300 [D] s_b_7_13: sym_56312_3_parameter_value = s_b_7_12, dominates: s_b_17_1  */
        emitter.store_local(DV_sym_56312_3_parameter_value, s_b_7_12);
        /* execute.a64:2737 [F] s_b_7_14 = (u32)s_b_7_8 (const) */
        /* execute.a64:2737 [F] s_b_7_15 = constant u32 1f (const) */
        /* execute.a64:2737 [F] s_b_7_16 = s_b_7_14==s_b_7_15 (const) */
        uint8_t s_b_7_16 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
        /* execute.a64:2737 [F] s_b_7_17: If s_b_7_16: Jump b_2 else b_17 (const) */
        if (s_b_7_16) 
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
        else 
        {
          auto block = block_b_17;
          dynamic_block_queue.push(block_b_17);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_14) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_14);
        /* execute.a64:2747 [F] s_b_14_0=sym_6922_3_parameter_inst.rd (const) */
        /* execute.a64:2747 [F] s_b_14_1 = constant u64 3f (const) */
        /* execute.a64:2747 [F] s_b_14_2: WriteRegBank 0:s_b_14_0 = s_b_14_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),emitter.const_u64((uint64_t)63ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),emitter.const_u64((uint64_t)63ULL));
        /* execute.a64:0 [F] s_b_14_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_15) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_15);
        /* execute.a64:2747 [F] s_b_15_0=sym_6922_3_parameter_inst.rd (const) */
        /* execute.a64:2747 [D] s_b_15_1 = sym_56267_3_parameter_value uint64_t */
        auto s_b_15_1 = emitter.load_local(DV_sym_56267_3_parameter_value, emitter.context().types().u64());
        /* execute.a64:2747 [D] s_b_15_2: WriteRegBank 0:s_b_15_0 = s_b_15_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_15_1,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_15_1);
        /* execute.a64:0 [F] s_b_15_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_16) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_16);
        /* execute.a64:2739 [F] s_b_16_0=sym_6922_3_parameter_inst.rd (const) */
        /* execute.a64:2739 [F] s_b_16_1 = constant u64 1f (const) */
        /* execute.a64:2739 [F] s_b_16_2: WriteRegBank 0:s_b_16_0 = s_b_16_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),emitter.const_u64((uint64_t)31ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),emitter.const_u64((uint64_t)31ULL));
        /* execute.a64:0 [F] s_b_16_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_17) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_17);
        /* execute.a64:2739 [F] s_b_17_0=sym_6922_3_parameter_inst.rd (const) */
        /* execute.a64:2739 [D] s_b_17_1 = sym_56312_3_parameter_value uint32_t */
        auto s_b_17_1 = emitter.load_local(DV_sym_56312_3_parameter_value, emitter.context().types().u32());
        /* execute.a64:2739 [D] s_b_17_2 = (u64)s_b_17_1 */
        auto s_b_17_2 = emitter.zx(s_b_17_1, emitter.context().types().u64());
        /* execute.a64:2739 [D] s_b_17_3: WriteRegBank 0:s_b_17_0 = s_b_17_2 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_17_2,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_17_2);
        /* execute.a64:0 [F] s_b_17_4: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
    }
  }
  else 
  {
    emitter.jump(__exit_block);
  }
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_cmtst(const arm64_decode_a64_SIMD_THREE_SAME&insn, captive::arch::dbt::el::Emitter& emitter)
{
  std::queue<captive::arch::dbt::el::Block *> dynamic_block_queue;
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto block_b_2 = emitter.context().create_block();
  auto block_b_4 = emitter.context().create_block();
  auto block_b_5 = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:1717 [F] s_b_0_0=sym_8512_3_parameter_inst.SCALAR (const) */
    /* execute.simd:1717 [F] s_b_0_1: If s_b_0_0: Jump b_1 else b_3 (const) */
    if (insn.SCALAR) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.simd:1718 [F] s_b_1_0=sym_8512_3_parameter_inst.rn (const) */
    /* execute.simd:6355 [D] s_b_1_1 = ReadRegBank 7:s_b_1_0 (u64) */
    auto s_b_1_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_1_1,emitter.const_u8(8));
    }
    /* execute.simd:1719 [F] s_b_1_2=sym_8512_3_parameter_inst.rm (const) */
    /* execute.simd:6355 [D] s_b_1_3 = ReadRegBank 7:s_b_1_2 (u64) */
    auto s_b_1_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_1_3,emitter.const_u8(8));
    }
    /* execute.simd:1721 [D] s_b_1_4 = s_b_1_1&s_b_1_3 */
    auto s_b_1_4 = emitter.bitwise_and(s_b_1_1, s_b_1_3);
    /* execute.simd:1721 [F] s_b_1_5 = constant u64 0 (const) */
    /* execute.simd:1721 [D] s_b_1_6 = s_b_1_4!=s_b_1_5 */
    auto s_b_1_6 = emitter.cmp_ne(s_b_1_4, emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:1721 [D] s_b_1_7: If s_b_1_6: Jump b_4 else b_5 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_4;
        dynamic_block_queue.push(block_b_4);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_5;
        dynamic_block_queue.push(block_b_5);
        false_target = block;
      }
      emitter.branch(s_b_1_6, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_2 not fully fixed
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:1727 [F] s_b_3_0=sym_8512_3_parameter_inst.arrangement (const) */
    /* execute.simd:1728 [F] s_b_3_1 = constant s32 0 (const) */
    /* execute.simd:1738 [F] s_b_3_2 = constant s32 1 (const) */
    /* execute.simd:1747 [F] s_b_3_3 = constant s32 2 (const) */
    /* execute.simd:1757 [F] s_b_3_4 = constant s32 3 (const) */
    /* execute.simd:1766 [F] s_b_3_5 = constant s32 4 (const) */
    /* execute.simd:1776 [F] s_b_3_6 = constant s32 5 (const) */
    /* execute.simd:1785 [F] s_b_3_7 = constant s32 6 (const) */
    /* execute.simd:1727 [F] s_b_3_8: Switch s_b_3_0: < <todo> > def b_13 (const) -> b_13, b_12, b_11, b_10, b_9, b_8, b_7, b_6,  */
    switch (insn.arrangement) 
    {
    case (int32_t)6ULL:
      goto fixed_block_b_12;
      break;
    case (int32_t)5ULL:
      goto fixed_block_b_11;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_10;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_9;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_8;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_7;
      break;
    case (int32_t)0ULL:
      goto fixed_block_b_6;
      break;
    default:
      goto fixed_block_b_13;
    }
  }
  // BLOCK b_4 not fully fixed
  // BLOCK b_5 not fully fixed
  /* b_3,  */
  fixed_block_b_6: 
  {
    /* execute.simd:1729 [F] s_b_6_0=sym_8512_3_parameter_inst.rn (const) */
    /* execute.simd:1729 [D] s_b_6_1 = ReadRegBank 15:s_b_6_0 (v8u8) */
    auto s_b_6_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_6_1,emitter.const_u8(8));
    }
    /* execute.simd:1730 [F] s_b_6_2=sym_8512_3_parameter_inst.rm (const) */
    /* execute.simd:1730 [D] s_b_6_3 = ReadRegBank 15:s_b_6_2 (v8u8) */
    auto s_b_6_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_6_3,emitter.const_u8(8));
    }
    /* execute.simd:1732 [D] s_b_6_4 = s_b_6_1&s_b_6_3 */
    auto s_b_6_4 = emitter.bitwise_and(s_b_6_1, s_b_6_3);
    /* ???:4294967295 [F] s_b_6_5 = constant v8u8 
    {
    }
    (const) */
    /* execute.simd:1732 [D] s_b_6_6 = s_b_6_4!=s_b_6_5 */
    auto s_b_6_6 = emitter.cmp_ne(s_b_6_4, emitter.constant_vector_splat(wutils::Vector<uint8_t, 8>(0)[0], emitter.context().types().v8u8()));
    /* execute.simd:1733 [F] s_b_6_7=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1733 [D] s_b_6_8: WriteRegBank 15:s_b_6_7 = s_b_6_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_6,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_6);
    /* execute.simd:1734 [F] s_b_6_9=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1734 [F] s_b_6_10 = constant u64 0 (const) */
    /* execute.simd:1734 [F] s_b_6_11: WriteRegBank 3:s_b_6_9 = s_b_6_10 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_6_12: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_7: 
  {
    /* execute.simd:1739 [F] s_b_7_0=sym_8512_3_parameter_inst.rn (const) */
    /* execute.simd:1739 [D] s_b_7_1 = ReadRegBank 16:s_b_7_0 (v16u8) */
    auto s_b_7_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_7_1,emitter.const_u8(16));
    }
    /* execute.simd:1740 [F] s_b_7_2=sym_8512_3_parameter_inst.rm (const) */
    /* execute.simd:1740 [D] s_b_7_3 = ReadRegBank 16:s_b_7_2 (v16u8) */
    auto s_b_7_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_7_3,emitter.const_u8(16));
    }
    /* execute.simd:1742 [D] s_b_7_4 = s_b_7_1&s_b_7_3 */
    auto s_b_7_4 = emitter.bitwise_and(s_b_7_1, s_b_7_3);
    /* ???:4294967295 [F] s_b_7_5 = constant v16u8 
    {
    }
    (const) */
    /* execute.simd:1742 [D] s_b_7_6 = s_b_7_4!=s_b_7_5 */
    auto s_b_7_6 = emitter.cmp_ne(s_b_7_4, emitter.constant_vector_splat(wutils::Vector<uint8_t, 16>(0)[0], emitter.context().types().v16u8()));
    /* execute.simd:1743 [F] s_b_7_7=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1743 [D] s_b_7_8: WriteRegBank 16:s_b_7_7 = s_b_7_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_6,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_6);
    /* execute.simd:0 [F] s_b_7_9: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_8: 
  {
    /* execute.simd:1748 [F] s_b_8_0=sym_8512_3_parameter_inst.rn (const) */
    /* execute.simd:1748 [D] s_b_8_1 = ReadRegBank 17:s_b_8_0 (v4u16) */
    auto s_b_8_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_8_1,emitter.const_u8(8));
    }
    /* execute.simd:1749 [F] s_b_8_2=sym_8512_3_parameter_inst.rm (const) */
    /* execute.simd:1749 [D] s_b_8_3 = ReadRegBank 17:s_b_8_2 (v4u16) */
    auto s_b_8_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_8_3,emitter.const_u8(8));
    }
    /* execute.simd:1751 [D] s_b_8_4 = s_b_8_1&s_b_8_3 */
    auto s_b_8_4 = emitter.bitwise_and(s_b_8_1, s_b_8_3);
    /* ???:4294967295 [F] s_b_8_5 = constant v4u16 
    {
    }
    (const) */
    /* execute.simd:1751 [D] s_b_8_6 = s_b_8_4!=s_b_8_5 */
    auto s_b_8_6 = emitter.cmp_ne(s_b_8_4, emitter.constant_vector_splat(wutils::Vector<uint16_t, 4>(0)[0], emitter.context().types().v4u16()));
    /* execute.simd:1752 [F] s_b_8_7=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1752 [D] s_b_8_8: WriteRegBank 17:s_b_8_7 = s_b_8_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_8_6,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_8_6);
    /* execute.simd:1753 [F] s_b_8_9=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1753 [F] s_b_8_10 = constant u64 0 (const) */
    /* execute.simd:1753 [F] s_b_8_11: WriteRegBank 3:s_b_8_9 = s_b_8_10 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_8_12: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_9: 
  {
    /* execute.simd:1758 [F] s_b_9_0=sym_8512_3_parameter_inst.rn (const) */
    /* execute.simd:1758 [D] s_b_9_1 = ReadRegBank 18:s_b_9_0 (v8u16) */
    auto s_b_9_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_9_1,emitter.const_u8(16));
    }
    /* execute.simd:1759 [F] s_b_9_2=sym_8512_3_parameter_inst.rm (const) */
    /* execute.simd:1759 [D] s_b_9_3 = ReadRegBank 18:s_b_9_2 (v8u16) */
    auto s_b_9_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_9_3,emitter.const_u8(16));
    }
    /* execute.simd:1761 [D] s_b_9_4 = s_b_9_1&s_b_9_3 */
    auto s_b_9_4 = emitter.bitwise_and(s_b_9_1, s_b_9_3);
    /* ???:4294967295 [F] s_b_9_5 = constant v8u16 
    {
    }
    (const) */
    /* execute.simd:1761 [D] s_b_9_6 = s_b_9_4!=s_b_9_5 */
    auto s_b_9_6 = emitter.cmp_ne(s_b_9_4, emitter.constant_vector_splat(wutils::Vector<uint16_t, 8>(0)[0], emitter.context().types().v8u16()));
    /* execute.simd:1763 [F] s_b_9_7=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1763 [D] s_b_9_8: WriteRegBank 18:s_b_9_7 = s_b_9_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_9_6,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_9_6);
    /* execute.simd:0 [F] s_b_9_9: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_10: 
  {
    /* execute.simd:1767 [F] s_b_10_0=sym_8512_3_parameter_inst.rn (const) */
    /* execute.simd:1767 [D] s_b_10_1 = ReadRegBank 19:s_b_10_0 (v2u32) */
    auto s_b_10_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_10_1,emitter.const_u8(8));
    }
    /* execute.simd:1768 [F] s_b_10_2=sym_8512_3_parameter_inst.rm (const) */
    /* execute.simd:1768 [D] s_b_10_3 = ReadRegBank 19:s_b_10_2 (v2u32) */
    auto s_b_10_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_10_3,emitter.const_u8(8));
    }
    /* execute.simd:1770 [D] s_b_10_4 = s_b_10_1&s_b_10_3 */
    auto s_b_10_4 = emitter.bitwise_and(s_b_10_1, s_b_10_3);
    /* ???:4294967295 [F] s_b_10_5 = constant v2u32 
    {
    }
    (const) */
    /* execute.simd:1770 [D] s_b_10_6 = s_b_10_4!=s_b_10_5 */
    auto s_b_10_6 = emitter.cmp_ne(s_b_10_4, emitter.constant_vector_splat(wutils::Vector<uint32_t, 2>(0)[0], emitter.context().types().v2u32()));
    /* execute.simd:1771 [F] s_b_10_7=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1771 [D] s_b_10_8: WriteRegBank 19:s_b_10_7 = s_b_10_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_10_6,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_10_6);
    /* execute.simd:1772 [F] s_b_10_9=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1772 [F] s_b_10_10 = constant u64 0 (const) */
    /* execute.simd:1772 [F] s_b_10_11: WriteRegBank 3:s_b_10_9 = s_b_10_10 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_10_12: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_11: 
  {
    /* execute.simd:1777 [F] s_b_11_0=sym_8512_3_parameter_inst.rn (const) */
    /* execute.simd:1777 [D] s_b_11_1 = ReadRegBank 20:s_b_11_0 (v4u32) */
    auto s_b_11_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_11_1,emitter.const_u8(16));
    }
    /* execute.simd:1778 [F] s_b_11_2=sym_8512_3_parameter_inst.rm (const) */
    /* execute.simd:1778 [D] s_b_11_3 = ReadRegBank 20:s_b_11_2 (v4u32) */
    auto s_b_11_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_11_3,emitter.const_u8(16));
    }
    /* execute.simd:1780 [D] s_b_11_4 = s_b_11_1&s_b_11_3 */
    auto s_b_11_4 = emitter.bitwise_and(s_b_11_1, s_b_11_3);
    /* ???:4294967295 [F] s_b_11_5 = constant v4u32 
    {
    }
    (const) */
    /* execute.simd:1780 [D] s_b_11_6 = s_b_11_4!=s_b_11_5 */
    auto s_b_11_6 = emitter.cmp_ne(s_b_11_4, emitter.constant_vector_splat(wutils::Vector<uint32_t, 4>(0)[0], emitter.context().types().v4u32()));
    /* execute.simd:1782 [F] s_b_11_7=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1782 [D] s_b_11_8: WriteRegBank 20:s_b_11_7 = s_b_11_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_11_6,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_11_6);
    /* execute.simd:0 [F] s_b_11_9: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_12: 
  {
    /* execute.simd:1786 [F] s_b_12_0=sym_8512_3_parameter_inst.rn (const) */
    /* execute.simd:1786 [D] s_b_12_1 = ReadRegBank 21:s_b_12_0 (v2u64) */
    auto s_b_12_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_12_1,emitter.const_u8(16));
    }
    /* execute.simd:1787 [F] s_b_12_2=sym_8512_3_parameter_inst.rm (const) */
    /* execute.simd:1787 [D] s_b_12_3 = ReadRegBank 21:s_b_12_2 (v2u64) */
    auto s_b_12_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_12_3,emitter.const_u8(16));
    }
    /* execute.simd:1789 [D] s_b_12_4 = s_b_12_1&s_b_12_3 */
    auto s_b_12_4 = emitter.bitwise_and(s_b_12_1, s_b_12_3);
    /* ???:4294967295 [F] s_b_12_5 = constant v2u64 
    {
    }
    (const) */
    /* execute.simd:1789 [D] s_b_12_6 = s_b_12_4!=s_b_12_5 */
    auto s_b_12_6 = emitter.cmp_ne(s_b_12_4, emitter.constant_vector_splat(wutils::Vector<uint64_t, 2>(0)[0], emitter.context().types().v2u64()));
    /* execute.simd:1791 [F] s_b_12_7=sym_8512_3_parameter_inst.rd (const) */
    /* execute.simd:1791 [D] s_b_12_8: WriteRegBank 21:s_b_12_7 = s_b_12_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_12_6,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_12_6);
    /* execute.simd:0 [F] s_b_12_9: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_13: 
  {
    /* execute.simd:1795 [D] s_b_13_0 = trap */
    emitter.raise(emitter.const_u8(0));
    /* execute.simd:0 [F] s_b_13_1: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  fixed_done:
  if (dynamic_block_queue.size() > 0) 
  {
    std::set<captive::arch::dbt::el::Block *> emitted_blocks;
    while (dynamic_block_queue.size() > 0) 
    {
      captive::arch::dbt::el::Block *block_index = dynamic_block_queue.front();
      dynamic_block_queue.pop();
      if (emitted_blocks.count(block_index)) continue;
      emitted_blocks.insert(block_index);
      if (block_index == block_b_2) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_2);
        /* ???:4294967295 [F] s_b_2_0: Return */
        emitter.jump(__exit_block);
      }
      else if (block_index == block_b_4) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_4);
        /* execute.simd:1722 [F] s_b_4_0=sym_8512_3_parameter_inst.rd (const) */
        /* execute.simd:1722 [F] s_b_4_1 = constant u64 ffffffffffffffff (const) */
        /* execute.simd:6326 [F] s_b_4_2: WriteRegBank 2:s_b_4_0 = s_b_4_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64((uint64_t)18446744073709551615ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64((uint64_t)18446744073709551615ULL));
        /* execute.simd:6327 [F] s_b_4_3 = constant u64 0 (const) */
        /* execute.simd:6327 [F] s_b_4_4: WriteRegBank 3:s_b_4_0 = s_b_4_3 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_4_5: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_5) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_5);
        /* execute.simd:1724 [F] s_b_5_0=sym_8512_3_parameter_inst.rd (const) */
        /* execute.simd:1724 [F] s_b_5_1 = constant u64 0 (const) */
        /* execute.simd:6326 [F] s_b_5_2: WriteRegBank 2:s_b_5_0 = s_b_5_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:6327 [F] s_b_5_3 = constant u64 0 (const) */
        /* execute.simd:6327 [F] s_b_5_4: WriteRegBank 3:s_b_5_0 = s_b_5_3 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_5_5: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
    }
  }
  else 
  {
    emitter.jump(__exit_block);
  }
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_drps(const arm64_decode_a64_UB_REG&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:3097 [D] s_b_0_0 = trap */
    emitter.raise(emitter.const_u8(0));
    /* ???:4294967295 [F] s_b_0_1: Return */
    goto fixed_done;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_ext(const arm64_decode_a64_SIMD_EXTRACT&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_10309_0_rn = emitter.alloc_local(emitter.context().types().v16u8(), false);
  auto DV_sym_10313_0_rm = emitter.alloc_local(emitter.context().types().v16u8(), false);
  wutils::Vector<uint8_t, 16> CV_sym_10317_0_rd;
  auto DV_sym_10317_0_rd = emitter.alloc_local(emitter.context().types().v16u8(), false);
  uint8_t CV_sym_10327_0_size;
  uint8_t CV_sym_10331_0_o;
  uint8_t CV_sym_10338_0_i;
  uint8_t CV_sym_10365_0_j;
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:6258 [F] s_b_0_0=sym_10305_3_parameter_inst.rn (const) */
    /* execute.simd:6258 [D] s_b_0_1 = ReadRegBank 16:s_b_0_0 (v16u8) */
    auto s_b_0_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_0_1,emitter.const_u8(16));
    }
    /* execute.simd:6258 [D] s_b_0_2: sym_10309_0_rn = s_b_0_1, dominates: s_b_2_0  */
    emitter.store_local(DV_sym_10309_0_rn, s_b_0_1);
    /* execute.simd:6259 [F] s_b_0_3=sym_10305_3_parameter_inst.rm (const) */
    /* execute.simd:6259 [D] s_b_0_4 = ReadRegBank 16:s_b_0_3 (v16u8) */
    auto s_b_0_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_0_4,emitter.const_u8(16));
    }
    /* execute.simd:6259 [D] s_b_0_5: sym_10313_0_rm = s_b_0_4, dominates: s_b_5_0  */
    emitter.store_local(DV_sym_10313_0_rm, s_b_0_4);
    /* ???:4294967295 [F] s_b_0_6 = constant v16u8 
    {
    }
    (const) */
    /* execute.simd:6260 [F] s_b_0_7: sym_10317_0_rd = s_b_0_6 (const), dominates: s_b_2_7 s_b_5_7 s_b_6_1  */
    CV_sym_10317_0_rd = wutils::Vector<uint8_t, 16>(0);
    emitter.store_local(DV_sym_10317_0_rd, emitter.constant_vector_splat(wutils::Vector<uint8_t, 16>(0)[0], emitter.context().types().v16u8()));
    /* execute.simd:6262 [F] s_b_0_8=sym_10305_3_parameter_inst.Q (const) */
    /* execute.simd:6262 [F] s_b_0_9 = (u32)s_b_0_8 (const) */
    /* execute.simd:6262 [F] s_b_0_10 = constant u32 0 (const) */
    /* execute.simd:6262 [F] s_b_0_11 = s_b_0_9==s_b_0_10 (const) */
    uint8_t s_b_0_11 = ((uint8_t)(((uint32_t)insn.Q) == (uint32_t)0ULL));
    /* execute.simd:6262 [F] s_b_0_12 = constant s32 8 (const) */
    /* execute.simd:6262 [F] s_b_0_13 = constant s32 10 (const) */
    /* execute.simd:6262 [F] s_b_0_14: Select s_b_0_11 ? s_b_0_12 : s_b_0_13 (const) */
    int32_t s_b_0_14 = ((int32_t)(s_b_0_11 ? ((int32_t)8ULL) : ((int32_t)16ULL)));
    /* execute.simd:6262 [F] s_b_0_15 = (u8)s_b_0_14 (const) */
    /* execute.simd:6262 [F] s_b_0_16: sym_10327_0_size = s_b_0_15 (const), dominates: s_b_1_1  */
    CV_sym_10327_0_size = ((uint8_t)s_b_0_14);
    /* execute.simd:6265 [F] s_b_0_17 = constant u8 0 (const) */
    /* execute.simd:6265 [F] s_b_0_18: sym_10331_0_o = s_b_0_17 (const), dominates: s_b_2_3 s_b_5_3  */
    CV_sym_10331_0_o = (uint8_t)0ULL;
    /* execute.simd:6266 [F] s_b_0_19=sym_10305_3_parameter_inst.imm4 (const) */
    /* execute.simd:6266 [F] s_b_0_20: sym_10338_0_i = s_b_0_19 (const), dominates: s_b_1_0 s_b_2_1  */
    CV_sym_10338_0_i = insn.imm4;
    /* execute.simd:6266 [F] s_b_0_21: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0, b_2,  */
  fixed_block_b_1: 
  {
    /* execute.simd:6266 [F] s_b_1_0 = sym_10338_0_i (const) uint8_t */
    uint8_t s_b_1_0 = CV_sym_10338_0_i;
    /* execute.simd:6266 [F] s_b_1_1 = sym_10327_0_size (const) uint8_t */
    uint8_t s_b_1_1 = CV_sym_10327_0_size;
    /* execute.simd:6266 [F] s_b_1_2 = s_b_1_0<s_b_1_1 (const) */
    uint8_t s_b_1_2 = ((uint8_t)(s_b_1_0 < s_b_1_1));
    /* execute.simd:6266 [F] s_b_1_3: If s_b_1_2: Jump b_2 else b_3 (const) */
    if (s_b_1_2) 
    {
      goto fixed_block_b_2;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_1,  */
  fixed_block_b_2: 
  {
    /* execute.simd:6267 [D] s_b_2_0 = sym_10309_0_rn wutils::Vector<uint8_t, 16> */
    auto s_b_2_0 = emitter.load_local(DV_sym_10309_0_rn, emitter.context().types().v16u8());
    /* execute.simd:6267 [F] s_b_2_1 = sym_10338_0_i (const) uint8_t */
    uint8_t s_b_2_1 = CV_sym_10338_0_i;
    /* execute.simd:6267 [D] s_b_2_0[s_b_2_1] */
    auto s_b_2_2 = emitter.vector_extract(s_b_2_0, emitter.const_u8(s_b_2_1));
    /* execute.simd:6267 [F] s_b_2_3 = sym_10331_0_o (const) uint8_t */
    uint8_t s_b_2_3 = CV_sym_10331_0_o;
    /* execute.simd:6267 [F] s_b_2_4 = constant u8 1 (const) */
    /* execute.simd:6267 [F] s_b_2_5 = s_b_2_3+s_b_2_4 (const) */
    uint8_t s_b_2_5 = ((uint8_t)(s_b_2_3 + (uint8_t)1ULL));
    /* execute.simd:6267 [F] s_b_2_6: sym_10331_0_o = s_b_2_5 (const), dominates: s_b_2_3 s_b_5_3  */
    CV_sym_10331_0_o = s_b_2_5;
    /* execute.simd:6267 [D] s_b_2_7 = sym_10317_0_rd wutils::Vector<uint8_t, 16> */
    auto s_b_2_7 = emitter.load_local(DV_sym_10317_0_rd, emitter.context().types().v16u8());
    /* execute.simd:6267 [F] s_b_2_8 = (s32)s_b_2_3 (const) */
    /* execute.simd:6267 [D] s_b_2_9 = s_b_2_7[s_b_2_8] <= s_b_2_2 */
    auto s_b_2_9 = emitter.vector_insert(s_b_2_7, emitter.const_s32(((int32_t)s_b_2_3)), s_b_2_2);
    /* execute.simd:6267 [D] s_b_2_10: sym_10317_0_rd = s_b_2_9, dominates: s_b_2_7 s_b_5_7 s_b_6_1  */
    emitter.store_local(DV_sym_10317_0_rd, s_b_2_9);
    /* execute.simd:6266 [F] s_b_2_11 = constant u8 1 (const) */
    /* execute.simd:6266 [F] s_b_2_12 = s_b_2_1+s_b_2_11 (const) */
    uint8_t s_b_2_12 = ((uint8_t)(s_b_2_1 + (uint8_t)1ULL));
    /* execute.simd:6266 [F] s_b_2_13: sym_10338_0_i = s_b_2_12 (const), dominates: s_b_1_0 s_b_2_1  */
    CV_sym_10338_0_i = s_b_2_12;
    /* execute.simd:6266 [F] s_b_2_14: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_1,  */
  fixed_block_b_3: 
  {
    /* execute.simd:6271 [F] s_b_3_0 = constant u8 0 (const) */
    /* execute.simd:6271 [F] s_b_3_1: sym_10365_0_j = s_b_3_0 (const), dominates: s_b_4_0 s_b_5_1  */
    CV_sym_10365_0_j = (uint8_t)0ULL;
    /* execute.simd:6271 [F] s_b_3_2: Jump b_4 (const) */
    goto fixed_block_b_4;
  }
  /* b_3, b_5,  */
  fixed_block_b_4: 
  {
    /* execute.simd:6271 [F] s_b_4_0 = sym_10365_0_j (const) uint8_t */
    uint8_t s_b_4_0 = CV_sym_10365_0_j;
    /* execute.simd:6271 [F] s_b_4_1=sym_10305_3_parameter_inst.imm4 (const) */
    /* execute.simd:6271 [F] s_b_4_2 = s_b_4_0<s_b_4_1 (const) */
    uint8_t s_b_4_2 = ((uint8_t)(s_b_4_0 < insn.imm4));
    /* execute.simd:6271 [F] s_b_4_3: If s_b_4_2: Jump b_5 else b_6 (const) */
    if (s_b_4_2) 
    {
      goto fixed_block_b_5;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_4,  */
  fixed_block_b_5: 
  {
    /* execute.simd:6272 [D] s_b_5_0 = sym_10313_0_rm wutils::Vector<uint8_t, 16> */
    auto s_b_5_0 = emitter.load_local(DV_sym_10313_0_rm, emitter.context().types().v16u8());
    /* execute.simd:6272 [F] s_b_5_1 = sym_10365_0_j (const) uint8_t */
    uint8_t s_b_5_1 = CV_sym_10365_0_j;
    /* execute.simd:6272 [D] s_b_5_0[s_b_5_1] */
    auto s_b_5_2 = emitter.vector_extract(s_b_5_0, emitter.const_u8(s_b_5_1));
    /* execute.simd:6272 [F] s_b_5_3 = sym_10331_0_o (const) uint8_t */
    uint8_t s_b_5_3 = CV_sym_10331_0_o;
    /* execute.simd:6272 [F] s_b_5_4 = constant u8 1 (const) */
    /* execute.simd:6272 [F] s_b_5_5 = s_b_5_3+s_b_5_4 (const) */
    uint8_t s_b_5_5 = ((uint8_t)(s_b_5_3 + (uint8_t)1ULL));
    /* execute.simd:6272 [F] s_b_5_6: sym_10331_0_o = s_b_5_5 (const), dominates: s_b_5_3  */
    CV_sym_10331_0_o = s_b_5_5;
    /* execute.simd:6272 [D] s_b_5_7 = sym_10317_0_rd wutils::Vector<uint8_t, 16> */
    auto s_b_5_7 = emitter.load_local(DV_sym_10317_0_rd, emitter.context().types().v16u8());
    /* execute.simd:6272 [F] s_b_5_8 = (s32)s_b_5_3 (const) */
    /* execute.simd:6272 [D] s_b_5_9 = s_b_5_7[s_b_5_8] <= s_b_5_2 */
    auto s_b_5_9 = emitter.vector_insert(s_b_5_7, emitter.const_s32(((int32_t)s_b_5_3)), s_b_5_2);
    /* execute.simd:6272 [D] s_b_5_10: sym_10317_0_rd = s_b_5_9, dominates: s_b_5_7 s_b_6_1  */
    emitter.store_local(DV_sym_10317_0_rd, s_b_5_9);
    /* execute.simd:6271 [F] s_b_5_11 = constant u8 1 (const) */
    /* execute.simd:6271 [F] s_b_5_12 = s_b_5_1+s_b_5_11 (const) */
    uint8_t s_b_5_12 = ((uint8_t)(s_b_5_1 + (uint8_t)1ULL));
    /* execute.simd:6271 [F] s_b_5_13: sym_10365_0_j = s_b_5_12 (const), dominates: s_b_4_0 s_b_5_1  */
    CV_sym_10365_0_j = s_b_5_12;
    /* execute.simd:6271 [F] s_b_5_14: Jump b_4 (const) */
    goto fixed_block_b_4;
  }
  /* b_4,  */
  fixed_block_b_6: 
  {
    /* execute.simd:6275 [F] s_b_6_0=sym_10305_3_parameter_inst.rd (const) */
    /* execute.simd:6275 [D] s_b_6_1 = sym_10317_0_rd wutils::Vector<uint8_t, 16> */
    auto s_b_6_1 = emitter.load_local(DV_sym_10317_0_rd, emitter.context().types().v16u8());
    /* execute.simd:6275 [D] s_b_6_2: WriteRegBank 16:s_b_6_0 = s_b_6_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_1,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_1);
    /* ???:4294967295 [F] s_b_6_3: Return */
    goto fixed_done;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_fcsel(const arm64_decode_a64_FP_CSEL&insn, captive::arch::dbt::el::Emitter& emitter)
{
  std::queue<captive::arch::dbt::el::Block *> dynamic_block_queue;
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto block_b_1 = emitter.context().create_block();
  auto block_b_2 = emitter.context().create_block();
  auto block_b_3 = emitter.context().create_block();
  auto block_b_4 = emitter.context().create_block();
  auto block_b_5 = emitter.context().create_block();
  auto block_b_6 = emitter.context().create_block();
  auto block_b_7 = emitter.context().create_block();
  auto DV_sym_62471_0_return_symbol = emitter.alloc_local(emitter.context().types().u8(), false);
  uint8_t CV_sym_62428_0_state;
  auto DV_sym_62428_0_state = emitter.alloc_local(emitter.context().types().u8(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:5272 [F] s_b_0_0=sym_10892_3_parameter_inst.cond (const) */
    /* execute.a64:2854 [F] s_b_0_1 = constant u8 0 (const) */
    /* execute.a64:2854 [F] s_b_0_2: sym_62428_0_state = s_b_0_1 (const), dominates: s_b_9_0 s_b_10_0  */
    CV_sym_62428_0_state = (uint8_t)0ULL;
    emitter.store_local(DV_sym_62428_0_state, emitter.const_u8((uint8_t)0ULL));
    /* execute.a64:2856 [F] s_b_0_3 = (u32)s_b_0_0 (const) */
    /* execute.a64:2856 [F] s_b_0_4 = constant u32 1 (const) */
    /* execute.a64:2856 [F] s_b_0_5 = s_b_0_3>>s_b_0_4 (const) */
    uint32_t s_b_0_5 = ((uint32_t)(((uint32_t)insn.cond) >> (uint32_t)1ULL));
    /* execute.a64:2857 [F] s_b_0_6 = constant s32 0 (const) */
    /* execute.a64:2861 [F] s_b_0_7 = constant s32 1 (const) */
    /* execute.a64:2865 [F] s_b_0_8 = constant s32 2 (const) */
    /* execute.a64:2869 [F] s_b_0_9 = constant s32 3 (const) */
    /* execute.a64:2873 [F] s_b_0_10 = constant s32 4 (const) */
    /* execute.a64:2877 [F] s_b_0_11 = constant s32 5 (const) */
    /* execute.a64:2881 [F] s_b_0_12 = constant s32 6 (const) */
    /* execute.a64:2885 [F] s_b_0_13 = constant s32 7 (const) */
    /* execute.a64:2856 [F] s_b_0_14: Switch s_b_0_5: < <todo> > def b_8 (const) -> b_15, b_14, b_13, b_8, b_11, b_17, b_16, b_12, b_18,  */
    switch (s_b_0_5) 
    {
    case (int32_t)0ULL:
      goto fixed_block_b_11;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_12;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_13;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_14;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_15;
      break;
    case (int32_t)5ULL:
      goto fixed_block_b_16;
      break;
    case (int32_t)6ULL:
      goto fixed_block_b_17;
      break;
    case (int32_t)7ULL:
      goto fixed_block_b_18;
      break;
    default:
      goto fixed_block_b_8;
    }
  }
  // BLOCK b_1 not fully fixed
  // BLOCK b_2 not fully fixed
  // BLOCK b_3 not fully fixed
  // BLOCK b_4 not fully fixed
  // BLOCK b_5 not fully fixed
  // BLOCK b_6 not fully fixed
  // BLOCK b_7 not fully fixed
  /* b_0, b_11, b_12, b_13, b_14, b_15, b_16, b_17, b_18,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2891 [F] s_b_8_0=sym_10892_3_parameter_inst.cond (const) */
    /* execute.a64:2891 [F] s_b_8_1 = (u32)s_b_8_0 (const) */
    /* execute.a64:2891 [F] s_b_8_2 = constant u32 1 (const) */
    /* execute.a64:2891 [F] s_b_8_3 = s_b_8_1&s_b_8_2 (const) */
    uint32_t s_b_8_3 = ((uint32_t)(((uint32_t)insn.cond) & (uint32_t)1ULL));
    /* execute.a64:2891 [F] s_b_8_4 = constant u32 1 (const) */
    /* execute.a64:2891 [F] s_b_8_5 = s_b_8_3==s_b_8_4 (const) */
    uint8_t s_b_8_5 = ((uint8_t)(s_b_8_3 == (uint32_t)1ULL));
    /* execute.a64:2891 [F] s_b_8_6 = (u32)s_b_8_0 (const) */
    /* execute.a64:2891 [F] s_b_8_7 = constant u32 f (const) */
    /* execute.a64:2891 [F] s_b_8_8 = s_b_8_6!=s_b_8_7 (const) */
    uint8_t s_b_8_8 = ((uint8_t)(((uint32_t)insn.cond) != (uint32_t)15ULL));
    /* ???:4294967295 [F] s_b_8_9 = constant u8 0 (const) */
    /* ???:4294967295 [F] s_b_8_10 = s_b_8_5!=s_b_8_9 (const) */
    uint8_t s_b_8_10 = ((uint8_t)(s_b_8_5 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_8_11 = s_b_8_8!=s_b_8_9 (const) */
    uint8_t s_b_8_11 = ((uint8_t)(s_b_8_8 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_8_12 = s_b_8_10&s_b_8_11 (const) */
    uint8_t s_b_8_12 = ((uint8_t)(s_b_8_10 & s_b_8_11));
    /* execute.a64:2891 [F] s_b_8_13: If s_b_8_12: Jump b_9 else b_10 (const) */
    if (s_b_8_12) 
    {
      goto fixed_block_b_9;
    }
    else 
    {
      goto fixed_block_b_10;
    }
  }
  /* b_8,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2892 [D] s_b_9_0 = sym_62428_0_state uint8_t */
    auto s_b_9_0 = emitter.load_local(DV_sym_62428_0_state, emitter.context().types().u8());
    /* execute.a64:2892 [D] s_b_9_1 = !s_b_9_0 */
    auto s_b_9_1 = emitter.cmp_eq(s_b_9_0, emitter.const_u8(0));
    /* ???:4294967295 [D] s_b_9_2: sym_62471_0_return_symbol = s_b_9_1, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_62471_0_return_symbol, s_b_9_1);
    /* ???:4294967295 [F] s_b_9_3: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_8,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2894 [D] s_b_10_0 = sym_62428_0_state uint8_t */
    auto s_b_10_0 = emitter.load_local(DV_sym_62428_0_state, emitter.context().types().u8());
    /* ???:4294967295 [D] s_b_10_1: sym_62471_0_return_symbol = s_b_10_0, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_62471_0_return_symbol, s_b_10_0);
    /* ???:4294967295 [F] s_b_10_2: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_0,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2858 [D] s_b_11_0 = ReadReg 2 (u8) */
    auto s_b_11_0 = emitter.load_register(emitter.const_u32(1297), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1297), s_b_11_0, emitter.const_u8(1));
    }
    /* execute.a64:2858 [D] s_b_11_1: sym_62428_0_state = s_b_11_0, dominates: s_b_9_0 s_b_10_0  */
    emitter.store_local(DV_sym_62428_0_state, s_b_11_0);
    /* execute.a64:0 [F] s_b_11_2: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_0,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2862 [D] s_b_12_0 = ReadReg 3 (u8) */
    auto s_b_12_0 = emitter.load_register(emitter.const_u32(1298), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1298), s_b_12_0, emitter.const_u8(1));
    }
    /* execute.a64:2862 [D] s_b_12_1: sym_62428_0_state = s_b_12_0, dominates: s_b_9_0 s_b_10_0  */
    emitter.store_local(DV_sym_62428_0_state, s_b_12_0);
    /* execute.a64:0 [F] s_b_12_2: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_0,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2866 [D] s_b_13_0 = ReadReg 1 (u8) */
    auto s_b_13_0 = emitter.load_register(emitter.const_u32(1296), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1296), s_b_13_0, emitter.const_u8(1));
    }
    /* execute.a64:2866 [D] s_b_13_1: sym_62428_0_state = s_b_13_0, dominates: s_b_9_0 s_b_10_0  */
    emitter.store_local(DV_sym_62428_0_state, s_b_13_0);
    /* execute.a64:0 [F] s_b_13_2: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_0,  */
  fixed_block_b_14: 
  {
    /* execute.a64:2870 [D] s_b_14_0 = ReadReg 4 (u8) */
    auto s_b_14_0 = emitter.load_register(emitter.const_u32(1299), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1299), s_b_14_0, emitter.const_u8(1));
    }
    /* execute.a64:2870 [D] s_b_14_1: sym_62428_0_state = s_b_14_0, dominates: s_b_9_0 s_b_10_0  */
    emitter.store_local(DV_sym_62428_0_state, s_b_14_0);
    /* execute.a64:0 [F] s_b_14_2: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_0,  */
  fixed_block_b_15: 
  {
    /* execute.a64:2874 [D] s_b_15_0 = ReadReg 3 (u8) */
    auto s_b_15_0 = emitter.load_register(emitter.const_u32(1298), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1298), s_b_15_0, emitter.const_u8(1));
    }
    /* execute.a64:2874 [D] s_b_15_1 = ReadReg 2 (u8) */
    auto s_b_15_1 = emitter.load_register(emitter.const_u32(1297), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1297), s_b_15_1, emitter.const_u8(1));
    }
    /* execute.a64:2874 [D] s_b_15_2 = !s_b_15_1 */
    auto s_b_15_2 = emitter.cmp_eq(s_b_15_1, emitter.const_u8(0));
    /* execute.a64:2874 [D] s_b_15_3 = s_b_15_0&s_b_15_2 */
    auto s_b_15_3 = emitter.bitwise_and(s_b_15_0, s_b_15_2);
    /* execute.a64:2874 [D] s_b_15_4: sym_62428_0_state = s_b_15_3, dominates: s_b_9_0 s_b_10_0  */
    emitter.store_local(DV_sym_62428_0_state, s_b_15_3);
    /* execute.a64:0 [F] s_b_15_5: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_0,  */
  fixed_block_b_16: 
  {
    /* execute.a64:2878 [D] s_b_16_0 = ReadReg 1 (u8) */
    auto s_b_16_0 = emitter.load_register(emitter.const_u32(1296), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1296), s_b_16_0, emitter.const_u8(1));
    }
    /* execute.a64:2878 [D] s_b_16_1 = ReadReg 4 (u8) */
    auto s_b_16_1 = emitter.load_register(emitter.const_u32(1299), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1299), s_b_16_1, emitter.const_u8(1));
    }
    /* execute.a64:2878 [D] s_b_16_2 = s_b_16_0==s_b_16_1 */
    auto s_b_16_2 = emitter.cmp_eq(s_b_16_0, s_b_16_1);
    /* execute.a64:2878 [D] s_b_16_3: sym_62428_0_state = s_b_16_2, dominates: s_b_9_0 s_b_10_0  */
    emitter.store_local(DV_sym_62428_0_state, s_b_16_2);
    /* execute.a64:0 [F] s_b_16_4: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_0,  */
  fixed_block_b_17: 
  {
    /* execute.a64:2882 [D] s_b_17_0 = ReadReg 1 (u8) */
    auto s_b_17_0 = emitter.load_register(emitter.const_u32(1296), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1296), s_b_17_0, emitter.const_u8(1));
    }
    /* execute.a64:2882 [D] s_b_17_1 = ReadReg 4 (u8) */
    auto s_b_17_1 = emitter.load_register(emitter.const_u32(1299), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1299), s_b_17_1, emitter.const_u8(1));
    }
    /* execute.a64:2882 [D] s_b_17_2 = s_b_17_0==s_b_17_1 */
    auto s_b_17_2 = emitter.cmp_eq(s_b_17_0, s_b_17_1);
    /* execute.a64:2882 [D] s_b_17_3 = ReadReg 2 (u8) */
    auto s_b_17_3 = emitter.load_register(emitter.const_u32(1297), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1297), s_b_17_3, emitter.const_u8(1));
    }
    /* execute.a64:2882 [D] s_b_17_4 = !s_b_17_3 */
    auto s_b_17_4 = emitter.cmp_eq(s_b_17_3, emitter.const_u8(0));
    /* execute.a64:2882 [D] s_b_17_5 = s_b_17_2&s_b_17_4 */
    auto s_b_17_5 = emitter.bitwise_and(s_b_17_2, s_b_17_4);
    /* execute.a64:2882 [D] s_b_17_6: sym_62428_0_state = s_b_17_5, dominates: s_b_9_0 s_b_10_0  */
    emitter.store_local(DV_sym_62428_0_state, s_b_17_5);
    /* execute.a64:0 [F] s_b_17_7: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_0,  */
  fixed_block_b_18: 
  {
    /* execute.a64:2886 [F] s_b_18_0 = constant u8 1 (const) */
    /* execute.a64:2886 [F] s_b_18_1: sym_62428_0_state = s_b_18_0 (const), dominates: s_b_9_0 s_b_10_0  */
    CV_sym_62428_0_state = (uint8_t)1ULL;
    emitter.store_local(DV_sym_62428_0_state, emitter.const_u8((uint8_t)1ULL));
    /* execute.a64:0 [F] s_b_18_2: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_9, b_10,  */
  fixed_block_b_19: 
  {
    /* ???:4294967295 [D] s_b_19_0 = sym_62471_0_return_symbol uint8_t */
    auto s_b_19_0 = emitter.load_local(DV_sym_62471_0_return_symbol, emitter.context().types().u8());
    /* execute.simd:5274 [D] s_b_19_1 = (u32)s_b_19_0 */
    auto s_b_19_1 = emitter.zx(s_b_19_0, emitter.context().types().u32());
    /* execute.simd:5274 [F] s_b_19_2 = constant u32 0 (const) */
    /* execute.simd:5274 [D] s_b_19_3 = s_b_19_1==s_b_19_2 */
    auto s_b_19_3 = emitter.cmp_eq(s_b_19_1, emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:5274 [D] s_b_19_4: If s_b_19_3: Jump b_1 else b_3 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_1;
        dynamic_block_queue.push(block_b_1);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_3;
        dynamic_block_queue.push(block_b_3);
        false_target = block;
      }
      emitter.branch(s_b_19_3, true_target, false_target);
    }
    goto fixed_done;
  }
  fixed_done:
  if (dynamic_block_queue.size() > 0) 
  {
    std::set<captive::arch::dbt::el::Block *> emitted_blocks;
    while (dynamic_block_queue.size() > 0) 
    {
      captive::arch::dbt::el::Block *block_index = dynamic_block_queue.front();
      dynamic_block_queue.pop();
      if (emitted_blocks.count(block_index)) continue;
      emitted_blocks.insert(block_index);
      if (block_index == block_b_1) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_1);
        /* execute.simd:5275 [F] s_b_1_0=sym_10892_3_parameter_inst.type (const) */
        /* execute.simd:5275 [F] s_b_1_1 = (u32)s_b_1_0 (const) */
        /* execute.simd:5275 [F] s_b_1_2 = constant u32 0 (const) */
        /* execute.simd:5275 [F] s_b_1_3 = s_b_1_1==s_b_1_2 (const) */
        uint8_t s_b_1_3 = ((uint8_t)(((uint32_t)insn.type) == (uint32_t)0ULL));
        /* execute.simd:5275 [F] s_b_1_4: If s_b_1_3: Jump b_4 else b_5 (const) */
        if (s_b_1_3) 
        {
          auto block = block_b_4;
          dynamic_block_queue.push(block_b_4);
          emitter.jump(block);
        }
        else 
        {
          auto block = block_b_5;
          dynamic_block_queue.push(block_b_5);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_2) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_2);
        /* ???:4294967295 [F] s_b_2_0: Return */
        emitter.jump(__exit_block);
      }
      else if (block_index == block_b_3) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_3);
        /* execute.simd:5281 [F] s_b_3_0=sym_10892_3_parameter_inst.type (const) */
        /* execute.simd:5281 [F] s_b_3_1 = (u32)s_b_3_0 (const) */
        /* execute.simd:5281 [F] s_b_3_2 = constant u32 0 (const) */
        /* execute.simd:5281 [F] s_b_3_3 = s_b_3_1==s_b_3_2 (const) */
        uint8_t s_b_3_3 = ((uint8_t)(((uint32_t)insn.type) == (uint32_t)0ULL));
        /* execute.simd:5281 [F] s_b_3_4: If s_b_3_3: Jump b_6 else b_7 (const) */
        if (s_b_3_3) 
        {
          auto block = block_b_6;
          dynamic_block_queue.push(block_b_6);
          emitter.jump(block);
        }
        else 
        {
          auto block = block_b_7;
          dynamic_block_queue.push(block_b_7);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_4) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_4);
        /* execute.simd:5276 [F] s_b_4_0=sym_10892_3_parameter_inst.rd (const) */
        /* execute.simd:5276 [F] s_b_4_1=sym_10892_3_parameter_inst.rm (const) */
        /* execute.simd:6280 [D] s_b_4_2 = ReadRegBank 9:s_b_4_1 (f32) */
        auto s_b_4_2 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().f32());
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_4_2,emitter.const_u8(4));
        }
        /* execute.simd:6290 [D] s_b_4_3: WriteRegBank 9:s_b_4_0 = s_b_4_2 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_2,emitter.const_u8(4));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_2);
        /* execute.simd:6291 [F] s_b_4_4 = constant u32 0 (const) */
        /* execute.simd:6291 [F] s_b_4_5: WriteRegBank 10:s_b_4_0 = s_b_4_4 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL),emitter.const_u8(4));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL));
        /* execute.simd:6292 [F] s_b_4_6 = constant u64 0 (const) */
        /* execute.simd:6292 [F] s_b_4_7: WriteRegBank 3:s_b_4_0 = s_b_4_6 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_4_8: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_5) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_5);
        /* execute.simd:5278 [F] s_b_5_0=sym_10892_3_parameter_inst.rd (const) */
        /* execute.simd:5278 [F] s_b_5_1=sym_10892_3_parameter_inst.rm (const) */
        /* execute.simd:6285 [D] s_b_5_2 = ReadRegBank 11:s_b_5_1 (f64) */
        auto s_b_5_2 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().f64());
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_5_2,emitter.const_u8(8));
        }
        /* execute.simd:6298 [D] s_b_5_3: WriteRegBank 11:s_b_5_0 = s_b_5_2 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_2,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_2);
        /* execute.simd:6299 [F] s_b_5_4 = constant u64 0 (const) */
        /* execute.simd:6299 [F] s_b_5_5: WriteRegBank 3:s_b_5_0 = s_b_5_4 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_5_6: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_6) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_6);
        /* execute.simd:5282 [F] s_b_6_0=sym_10892_3_parameter_inst.rd (const) */
        /* execute.simd:5282 [F] s_b_6_1=sym_10892_3_parameter_inst.rn (const) */
        /* execute.simd:6280 [D] s_b_6_2 = ReadRegBank 9:s_b_6_1 (f32) */
        auto s_b_6_2 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().f32());
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_6_2,emitter.const_u8(4));
        }
        /* execute.simd:6290 [D] s_b_6_3: WriteRegBank 9:s_b_6_0 = s_b_6_2 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_2,emitter.const_u8(4));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_2);
        /* execute.simd:6291 [F] s_b_6_4 = constant u32 0 (const) */
        /* execute.simd:6291 [F] s_b_6_5: WriteRegBank 10:s_b_6_0 = s_b_6_4 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL),emitter.const_u8(4));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL));
        /* execute.simd:6292 [F] s_b_6_6 = constant u64 0 (const) */
        /* execute.simd:6292 [F] s_b_6_7: WriteRegBank 3:s_b_6_0 = s_b_6_6 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_6_8: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_7) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_7);
        /* execute.simd:5284 [F] s_b_7_0=sym_10892_3_parameter_inst.rd (const) */
        /* execute.simd:5284 [F] s_b_7_1=sym_10892_3_parameter_inst.rn (const) */
        /* execute.simd:6285 [D] s_b_7_2 = ReadRegBank 11:s_b_7_1 (f64) */
        auto s_b_7_2 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().f64());
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_7_2,emitter.const_u8(8));
        }
        /* execute.simd:6298 [D] s_b_7_3: WriteRegBank 11:s_b_7_0 = s_b_7_2 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_2,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_2);
        /* execute.simd:6299 [F] s_b_7_4 = constant u64 0 (const) */
        /* execute.simd:6299 [F] s_b_7_5: WriteRegBank 3:s_b_7_0 = s_b_7_4 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_7_6: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
    }
  }
  else 
  {
    emitter.jump(__exit_block);
  }
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_fm(const arm64_decode_a64_FP_DP_3&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_11866_0_m = emitter.alloc_local(emitter.context().types().f64(), false);
  auto DV_sym_11862_0_n = emitter.alloc_local(emitter.context().types().f64(), false);
  auto DV_sym_11858_0_a = emitter.alloc_local(emitter.context().types().f64(), false);
  auto DV_sym_11823_0_m = emitter.alloc_local(emitter.context().types().f32(), false);
  auto DV_sym_11819_0_n = emitter.alloc_local(emitter.context().types().f32(), false);
  auto DV_sym_11815_0_a = emitter.alloc_local(emitter.context().types().f32(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:4253 [F] s_b_0_0=sym_11802_3_parameter_inst.type (const) */
    /* execute.simd:4253 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.simd:4253 [F] s_b_0_2 = constant u32 0 (const) */
    /* execute.simd:4253 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.type) == (uint32_t)0ULL));
    /* execute.simd:4253 [F] s_b_0_4: If s_b_0_3: Jump b_1 else b_3 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.simd:4255 [F] s_b_1_0=sym_11802_3_parameter_inst.ra (const) */
    /* execute.simd:6280 [D] s_b_1_1 = ReadRegBank 9:s_b_1_0 (f32) */
    auto s_b_1_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.ra))), emitter.context().types().f32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.ra))),s_b_1_1,emitter.const_u8(4));
    }
    /* execute.simd:4255 [D] s_b_1_2: sym_11815_0_a = s_b_1_1, dominates: s_b_4_2 s_b_5_3  */
    emitter.store_local(DV_sym_11815_0_a, s_b_1_1);
    /* execute.simd:4256 [F] s_b_1_3=sym_11802_3_parameter_inst.rn (const) */
    /* execute.simd:6280 [D] s_b_1_4 = ReadRegBank 9:s_b_1_3 (f32) */
    auto s_b_1_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().f32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_1_4,emitter.const_u8(4));
    }
    /* execute.simd:4256 [D] s_b_1_5: sym_11819_0_n = s_b_1_4, dominates: s_b_4_0 s_b_5_0  */
    emitter.store_local(DV_sym_11819_0_n, s_b_1_4);
    /* execute.simd:4257 [F] s_b_1_6=sym_11802_3_parameter_inst.rm (const) */
    /* execute.simd:6280 [D] s_b_1_7 = ReadRegBank 9:s_b_1_6 (f32) */
    auto s_b_1_7 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().f32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_1_7,emitter.const_u8(4));
    }
    /* execute.simd:4257 [D] s_b_1_8: sym_11823_0_m = s_b_1_7, dominates: s_b_4_1 s_b_5_2  */
    emitter.store_local(DV_sym_11823_0_m, s_b_1_7);
    /* execute.simd:4259 [F] s_b_1_9=sym_11802_3_parameter_inst.o0 (const) */
    /* execute.simd:4259 [F] s_b_1_10 = (u32)s_b_1_9 (const) */
    /* execute.simd:4259 [F] s_b_1_11 = constant u32 0 (const) */
    /* execute.simd:4259 [F] s_b_1_12 = s_b_1_10==s_b_1_11 (const) */
    uint8_t s_b_1_12 = ((uint8_t)(((uint32_t)insn.o0) == (uint32_t)0ULL));
    /* execute.simd:4259 [F] s_b_1_13: If s_b_1_12: Jump b_4 else b_5 (const) */
    if (s_b_1_12) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_4, b_5, b_6, b_7,  */
  fixed_block_b_2: 
  {
    /* ???:4294967295 [F] s_b_2_0: Return */
    goto fixed_done;
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:4268 [F] s_b_3_0=sym_11802_3_parameter_inst.ra (const) */
    /* execute.simd:6285 [D] s_b_3_1 = ReadRegBank 11:s_b_3_0 (f64) */
    auto s_b_3_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.ra))), emitter.context().types().f64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.ra))),s_b_3_1,emitter.const_u8(8));
    }
    /* execute.simd:4268 [D] s_b_3_2: sym_11858_0_a = s_b_3_1, dominates: s_b_6_2 s_b_7_3  */
    emitter.store_local(DV_sym_11858_0_a, s_b_3_1);
    /* execute.simd:4269 [F] s_b_3_3=sym_11802_3_parameter_inst.rn (const) */
    /* execute.simd:6285 [D] s_b_3_4 = ReadRegBank 11:s_b_3_3 (f64) */
    auto s_b_3_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().f64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_3_4,emitter.const_u8(8));
    }
    /* execute.simd:4269 [D] s_b_3_5: sym_11862_0_n = s_b_3_4, dominates: s_b_6_0 s_b_7_0  */
    emitter.store_local(DV_sym_11862_0_n, s_b_3_4);
    /* execute.simd:4270 [F] s_b_3_6=sym_11802_3_parameter_inst.rm (const) */
    /* execute.simd:6285 [D] s_b_3_7 = ReadRegBank 11:s_b_3_6 (f64) */
    auto s_b_3_7 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().f64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_3_7,emitter.const_u8(8));
    }
    /* execute.simd:4270 [D] s_b_3_8: sym_11866_0_m = s_b_3_7, dominates: s_b_6_1 s_b_7_2  */
    emitter.store_local(DV_sym_11866_0_m, s_b_3_7);
    /* execute.simd:4272 [F] s_b_3_9=sym_11802_3_parameter_inst.o0 (const) */
    /* execute.simd:4272 [F] s_b_3_10 = (u32)s_b_3_9 (const) */
    /* execute.simd:4272 [F] s_b_3_11 = constant u32 0 (const) */
    /* execute.simd:4272 [F] s_b_3_12 = s_b_3_10==s_b_3_11 (const) */
    uint8_t s_b_3_12 = ((uint8_t)(((uint32_t)insn.o0) == (uint32_t)0ULL));
    /* execute.simd:4272 [F] s_b_3_13: If s_b_3_12: Jump b_6 else b_7 (const) */
    if (s_b_3_12) 
    {
      goto fixed_block_b_6;
    }
    else 
    {
      goto fixed_block_b_7;
    }
  }
  /* b_1,  */
  fixed_block_b_4: 
  {
    /* execute.simd:4260 [D] s_b_4_0 = sym_11819_0_n float */
    auto s_b_4_0 = emitter.load_local(DV_sym_11819_0_n, emitter.context().types().f32());
    /* execute.simd:4260 [D] s_b_4_1 = sym_11823_0_m float */
    auto s_b_4_1 = emitter.load_local(DV_sym_11823_0_m, emitter.context().types().f32());
    /* execute.simd:4260 [D] s_b_4_2 = sym_11815_0_a float */
    auto s_b_4_2 = emitter.load_local(DV_sym_11815_0_a, emitter.context().types().f32());
    /* execute.simd:4260 [D] s_b_4_3 = __builtin_fma32 */
    auto s_b_4_3 = emitter.call(__captive___builtin_fma32, s_b_4_0, s_b_4_1, s_b_4_2);
    /* execute.simd:4261 [F] s_b_4_4=sym_11802_3_parameter_inst.rd (const) */
    /* execute.simd:6290 [D] s_b_4_5: WriteRegBank 9:s_b_4_4 = s_b_4_3 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_3,emitter.const_u8(4));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_3);
    /* execute.simd:6291 [F] s_b_4_6 = constant u32 0 (const) */
    /* execute.simd:6291 [F] s_b_4_7: WriteRegBank 10:s_b_4_4 = s_b_4_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL),emitter.const_u8(4));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:6292 [F] s_b_4_8 = constant u64 0 (const) */
    /* execute.simd:6292 [F] s_b_4_9: WriteRegBank 3:s_b_4_4 = s_b_4_8 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_4_10: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1,  */
  fixed_block_b_5: 
  {
    /* execute.simd:4263 [D] s_b_5_0 = sym_11819_0_n float */
    auto s_b_5_0 = emitter.load_local(DV_sym_11819_0_n, emitter.context().types().f32());
    /* execute.simd:4263 [D] s_b_5_1 = -s_b_5_0 */
    auto s_b_5_1 = emitter.neg(s_b_5_0);
    /* execute.simd:4263 [D] s_b_5_2 = sym_11823_0_m float */
    auto s_b_5_2 = emitter.load_local(DV_sym_11823_0_m, emitter.context().types().f32());
    /* execute.simd:4263 [D] s_b_5_3 = sym_11815_0_a float */
    auto s_b_5_3 = emitter.load_local(DV_sym_11815_0_a, emitter.context().types().f32());
    /* execute.simd:4263 [D] s_b_5_4 = __builtin_fma32 */
    auto s_b_5_4 = emitter.call(__captive___builtin_fma32, s_b_5_1, s_b_5_2, s_b_5_3);
    /* execute.simd:4264 [F] s_b_5_5=sym_11802_3_parameter_inst.rd (const) */
    /* execute.simd:6290 [D] s_b_5_6: WriteRegBank 9:s_b_5_5 = s_b_5_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_4,emitter.const_u8(4));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_4);
    /* execute.simd:6291 [F] s_b_5_7 = constant u32 0 (const) */
    /* execute.simd:6291 [F] s_b_5_8: WriteRegBank 10:s_b_5_5 = s_b_5_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL),emitter.const_u8(4));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:6292 [F] s_b_5_9 = constant u64 0 (const) */
    /* execute.simd:6292 [F] s_b_5_10: WriteRegBank 3:s_b_5_5 = s_b_5_9 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_5_11: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_3,  */
  fixed_block_b_6: 
  {
    /* execute.simd:4273 [D] s_b_6_0 = sym_11862_0_n double */
    auto s_b_6_0 = emitter.load_local(DV_sym_11862_0_n, emitter.context().types().f64());
    /* execute.simd:4273 [D] s_b_6_1 = sym_11866_0_m double */
    auto s_b_6_1 = emitter.load_local(DV_sym_11866_0_m, emitter.context().types().f64());
    /* execute.simd:4273 [D] s_b_6_2 = sym_11858_0_a double */
    auto s_b_6_2 = emitter.load_local(DV_sym_11858_0_a, emitter.context().types().f64());
    /* execute.simd:4273 [D] s_b_6_3 = __builtin_fma64 */
    auto s_b_6_3 = emitter.call(__captive___builtin_fma64, s_b_6_0, s_b_6_1, s_b_6_2);
    /* execute.simd:4274 [F] s_b_6_4=sym_11802_3_parameter_inst.rd (const) */
    /* execute.simd:6298 [D] s_b_6_5: WriteRegBank 11:s_b_6_4 = s_b_6_3 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_3,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_3);
    /* execute.simd:6299 [F] s_b_6_6 = constant u64 0 (const) */
    /* execute.simd:6299 [F] s_b_6_7: WriteRegBank 3:s_b_6_4 = s_b_6_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_6_8: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_3,  */
  fixed_block_b_7: 
  {
    /* execute.simd:4276 [D] s_b_7_0 = sym_11862_0_n double */
    auto s_b_7_0 = emitter.load_local(DV_sym_11862_0_n, emitter.context().types().f64());
    /* execute.simd:4276 [D] s_b_7_1 = -s_b_7_0 */
    auto s_b_7_1 = emitter.neg(s_b_7_0);
    /* execute.simd:4276 [D] s_b_7_2 = sym_11866_0_m double */
    auto s_b_7_2 = emitter.load_local(DV_sym_11866_0_m, emitter.context().types().f64());
    /* execute.simd:4276 [D] s_b_7_3 = sym_11858_0_a double */
    auto s_b_7_3 = emitter.load_local(DV_sym_11858_0_a, emitter.context().types().f64());
    /* execute.simd:4276 [D] s_b_7_4 = __builtin_fma64 */
    auto s_b_7_4 = emitter.call(__captive___builtin_fma64, s_b_7_1, s_b_7_2, s_b_7_3);
    /* execute.simd:4277 [F] s_b_7_5=sym_11802_3_parameter_inst.rd (const) */
    /* execute.simd:6298 [D] s_b_7_6: WriteRegBank 11:s_b_7_5 = s_b_7_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_4);
    /* execute.simd:6299 [F] s_b_7_7 = constant u64 0 (const) */
    /* execute.simd:6299 [F] s_b_7_8: WriteRegBank 3:s_b_7_5 = s_b_7_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_7_9: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_fmovi(const arm64_decode_a64_FP_IMM&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:5291 [F] s_b_0_0=sym_12282_3_parameter_inst.type (const) */
    /* execute.simd:5291 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.simd:5291 [F] s_b_0_2 = constant u32 0 (const) */
    /* execute.simd:5291 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.type) == (uint32_t)0ULL));
    /* execute.simd:5291 [F] s_b_0_4: If s_b_0_3: Jump b_1 else b_3 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.simd:5292 [F] s_b_1_0=sym_12282_3_parameter_inst.rd (const) */
    /* execute.simd:5292 [F] s_b_1_1=sym_12282_3_parameter_inst.imm8 (const) */
    /* execute.simd:6367 [F] s_b_1_2 = (u32)s_b_1_1 (const) */
    /* execute.simd:6369 [F] s_b_1_3 = constant u32 80 (const) */
    /* execute.simd:6369 [F] s_b_1_4 = s_b_1_2&s_b_1_3 (const) */
    uint32_t s_b_1_4 = ((uint32_t)(((uint32_t)insn.imm8) & (uint32_t)128ULL));
    /* execute.simd:6369 [F] s_b_1_5 = constant u32 7 (const) */
    /* execute.simd:6369 [F] s_b_1_6 = s_b_1_4>>s_b_1_5 (const) */
    uint32_t s_b_1_6 = ((uint32_t)(s_b_1_4 >> (uint32_t)7ULL));
    /* execute.simd:6370 [F] s_b_1_7 = constant u32 40 (const) */
    /* execute.simd:6370 [F] s_b_1_8 = s_b_1_2&s_b_1_7 (const) */
    uint32_t s_b_1_8 = ((uint32_t)(((uint32_t)insn.imm8) & (uint32_t)64ULL));
    /* execute.simd:6370 [F] s_b_1_9 = !s_b_1_8 (const) */
    uint32_t s_b_1_9 = !s_b_1_8;
    /* execute.simd:6370 [F] s_b_1_10 = constant u32 7 (const) */
    /* execute.simd:6370 [F] s_b_1_11 = s_b_1_9<<s_b_1_10 (const) */
    uint32_t s_b_1_11 = ((uint32_t)(s_b_1_9 << (uint32_t)7ULL));
    /* execute.simd:6371 [F] s_b_1_12 = constant u32 40 (const) */
    /* execute.simd:6371 [F] s_b_1_13 = s_b_1_2&s_b_1_12 (const) */
    uint32_t s_b_1_13 = ((uint32_t)(((uint32_t)insn.imm8) & (uint32_t)64ULL));
    /* execute.simd:6371 [F] s_b_1_14 = constant u32 0 (const) */
    /* execute.simd:6371 [F] s_b_1_15 = s_b_1_13==s_b_1_14 (const) */
    uint8_t s_b_1_15 = ((uint8_t)(s_b_1_13 == (uint32_t)0ULL));
    /* execute.simd:6371 [F] s_b_1_16 = constant u32 0 (const) */
    /* execute.simd:6371 [F] s_b_1_17 = constant u32 7c (const) */
    /* execute.simd:6371 [F] s_b_1_18: Select s_b_1_15 ? s_b_1_16 : s_b_1_17 (const) */
    uint32_t s_b_1_18 = ((uint32_t)(s_b_1_15 ? ((uint32_t)0ULL) : ((uint32_t)124ULL)));
    /* ???:4294967295 [F] s_b_1_19 = s_b_1_11|s_b_1_18 (const) */
    uint32_t s_b_1_19 = ((uint32_t)(s_b_1_11 | s_b_1_18));
    /* execute.simd:6372 [F] s_b_1_20 = constant u32 30 (const) */
    /* execute.simd:6372 [F] s_b_1_21 = s_b_1_2&s_b_1_20 (const) */
    uint32_t s_b_1_21 = ((uint32_t)(((uint32_t)insn.imm8) & (uint32_t)48ULL));
    /* execute.simd:6372 [F] s_b_1_22 = constant u32 4 (const) */
    /* execute.simd:6372 [F] s_b_1_23 = s_b_1_21>>s_b_1_22 (const) */
    uint32_t s_b_1_23 = ((uint32_t)(s_b_1_21 >> (uint32_t)4ULL));
    /* ???:4294967295 [F] s_b_1_24 = s_b_1_19|s_b_1_23 (const) */
    uint32_t s_b_1_24 = ((uint32_t)(s_b_1_19 | s_b_1_23));
    /* execute.simd:6374 [F] s_b_1_25 = constant u32 f (const) */
    /* execute.simd:6374 [F] s_b_1_26 = s_b_1_2&s_b_1_25 (const) */
    uint32_t s_b_1_26 = ((uint32_t)(((uint32_t)insn.imm8) & (uint32_t)15ULL));
    /* execute.simd:6374 [F] s_b_1_27 = constant u32 13 (const) */
    /* execute.simd:6374 [F] s_b_1_28 = s_b_1_26<<s_b_1_27 (const) */
    uint32_t s_b_1_28 = ((uint32_t)(s_b_1_26 << (uint32_t)19ULL));
    /* execute.simd:6375 [F] s_b_1_29 = constant u32 1f (const) */
    /* execute.simd:6375 [F] s_b_1_30 = s_b_1_6<<s_b_1_29 (const) */
    uint32_t s_b_1_30 = ((uint32_t)(s_b_1_6 << (uint32_t)31ULL));
    /* execute.simd:6375 [F] s_b_1_31 = constant u32 17 (const) */
    /* execute.simd:6375 [F] s_b_1_32 = s_b_1_24<<s_b_1_31 (const) */
    uint32_t s_b_1_32 = ((uint32_t)(s_b_1_24 << (uint32_t)23ULL));
    /* execute.simd:6375 [F] s_b_1_33 = s_b_1_30|s_b_1_32 (const) */
    uint32_t s_b_1_33 = ((uint32_t)(s_b_1_30 | s_b_1_32));
    /* execute.simd:6375 [F] s_b_1_34 = s_b_1_33|s_b_1_28 (const) */
    uint32_t s_b_1_34 = ((uint32_t)(s_b_1_33 | s_b_1_28));
    /* execute.simd:6319 [F] s_b_1_35 = (u64)s_b_1_34 (const) */
    /* execute.simd:6319 [F] s_b_1_36: WriteRegBank 2:s_b_1_0 = s_b_1_35 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64(((uint64_t)s_b_1_34)),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64(((uint64_t)s_b_1_34)));
    /* execute.simd:6320 [F] s_b_1_37 = constant u64 0 (const) */
    /* execute.simd:6320 [F] s_b_1_38: WriteRegBank 3:s_b_1_0 = s_b_1_37 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_1_39: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1, b_3,  */
  fixed_block_b_2: 
  {
    /* ???:4294967295 [F] s_b_2_0: Return */
    goto fixed_done;
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:5294 [F] s_b_3_0=sym_12282_3_parameter_inst.rd (const) */
    /* execute.simd:5294 [F] s_b_3_1=sym_12282_3_parameter_inst.imm8 (const) */
    /* execute.simd:6380 [F] s_b_3_2 = (u64)s_b_3_1 (const) */
    /* execute.simd:6382 [F] s_b_3_3 = constant u64 80 (const) */
    /* execute.simd:6382 [F] s_b_3_4 = s_b_3_2&s_b_3_3 (const) */
    uint64_t s_b_3_4 = ((uint64_t)(((uint64_t)insn.imm8) & (uint64_t)128ULL));
    /* execute.simd:6382 [F] s_b_3_5 = constant u64 7 (const) */
    /* execute.simd:6382 [F] s_b_3_6 = s_b_3_4>>s_b_3_5 (const) */
    uint64_t s_b_3_6 = ((uint64_t)(s_b_3_4 >> (uint64_t)7ULL));
    /* execute.simd:6383 [F] s_b_3_7 = constant u64 40 (const) */
    /* execute.simd:6383 [F] s_b_3_8 = s_b_3_2&s_b_3_7 (const) */
    uint64_t s_b_3_8 = ((uint64_t)(((uint64_t)insn.imm8) & (uint64_t)64ULL));
    /* execute.simd:6383 [F] s_b_3_9 = !s_b_3_8 (const) */
    uint64_t s_b_3_9 = !s_b_3_8;
    /* execute.simd:6383 [F] s_b_3_10 = constant u64 a (const) */
    /* execute.simd:6383 [F] s_b_3_11 = s_b_3_9<<s_b_3_10 (const) */
    uint64_t s_b_3_11 = ((uint64_t)(s_b_3_9 << (uint64_t)10ULL));
    /* execute.simd:6384 [F] s_b_3_12 = constant u64 40 (const) */
    /* execute.simd:6384 [F] s_b_3_13 = s_b_3_2&s_b_3_12 (const) */
    uint64_t s_b_3_13 = ((uint64_t)(((uint64_t)insn.imm8) & (uint64_t)64ULL));
    /* execute.simd:6384 [F] s_b_3_14 = constant u64 0 (const) */
    /* execute.simd:6384 [F] s_b_3_15 = s_b_3_13==s_b_3_14 (const) */
    uint8_t s_b_3_15 = ((uint8_t)(s_b_3_13 == (uint64_t)0ULL));
    /* execute.simd:6384 [F] s_b_3_16 = constant u64 0 (const) */
    /* execute.simd:6384 [F] s_b_3_17 = constant u64 3fc (const) */
    /* execute.simd:6384 [F] s_b_3_18: Select s_b_3_15 ? s_b_3_16 : s_b_3_17 (const) */
    uint64_t s_b_3_18 = ((uint64_t)(s_b_3_15 ? ((uint64_t)0ULL) : ((uint64_t)1020ULL)));
    /* ???:4294967295 [F] s_b_3_19 = s_b_3_11|s_b_3_18 (const) */
    uint64_t s_b_3_19 = ((uint64_t)(s_b_3_11 | s_b_3_18));
    /* execute.simd:6385 [F] s_b_3_20 = constant u64 30 (const) */
    /* execute.simd:6385 [F] s_b_3_21 = s_b_3_2&s_b_3_20 (const) */
    uint64_t s_b_3_21 = ((uint64_t)(((uint64_t)insn.imm8) & (uint64_t)48ULL));
    /* execute.simd:6385 [F] s_b_3_22 = constant u64 4 (const) */
    /* execute.simd:6385 [F] s_b_3_23 = s_b_3_21>>s_b_3_22 (const) */
    uint64_t s_b_3_23 = ((uint64_t)(s_b_3_21 >> (uint64_t)4ULL));
    /* ???:4294967295 [F] s_b_3_24 = s_b_3_19|s_b_3_23 (const) */
    uint64_t s_b_3_24 = ((uint64_t)(s_b_3_19 | s_b_3_23));
    /* execute.simd:6387 [F] s_b_3_25 = constant u64 f (const) */
    /* execute.simd:6387 [F] s_b_3_26 = s_b_3_2&s_b_3_25 (const) */
    uint64_t s_b_3_26 = ((uint64_t)(((uint64_t)insn.imm8) & (uint64_t)15ULL));
    /* execute.simd:6387 [F] s_b_3_27 = constant u64 30 (const) */
    /* execute.simd:6387 [F] s_b_3_28 = s_b_3_26<<s_b_3_27 (const) */
    uint64_t s_b_3_28 = ((uint64_t)(s_b_3_26 << (uint64_t)48ULL));
    /* execute.simd:6388 [F] s_b_3_29 = constant u64 3f (const) */
    /* execute.simd:6388 [F] s_b_3_30 = s_b_3_6<<s_b_3_29 (const) */
    uint64_t s_b_3_30 = ((uint64_t)(s_b_3_6 << (uint64_t)63ULL));
    /* execute.simd:6388 [F] s_b_3_31 = constant u64 34 (const) */
    /* execute.simd:6388 [F] s_b_3_32 = s_b_3_24<<s_b_3_31 (const) */
    uint64_t s_b_3_32 = ((uint64_t)(s_b_3_24 << (uint64_t)52ULL));
    /* execute.simd:6388 [F] s_b_3_33 = s_b_3_30|s_b_3_32 (const) */
    uint64_t s_b_3_33 = ((uint64_t)(s_b_3_30 | s_b_3_32));
    /* execute.simd:6388 [F] s_b_3_34 = s_b_3_33|s_b_3_28 (const) */
    uint64_t s_b_3_34 = ((uint64_t)(s_b_3_33 | s_b_3_28));
    /* execute.simd:6326 [F] s_b_3_35: WriteRegBank 2:s_b_3_0 = s_b_3_34 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64(s_b_3_34),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64(s_b_3_34));
    /* execute.simd:6327 [F] s_b_3_36 = constant u64 0 (const) */
    /* execute.simd:6327 [F] s_b_3_37: WriteRegBank 3:s_b_3_0 = s_b_3_36 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_3_38: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_fsub(const arm64_decode_a64_FP_DP_2&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:4177 [F] s_b_0_0=sym_12722_3_parameter_inst.type (const) */
    /* execute.simd:4177 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.simd:4177 [F] s_b_0_2 = constant u32 0 (const) */
    /* execute.simd:4177 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.type) == (uint32_t)0ULL));
    /* execute.simd:4177 [F] s_b_0_4: If s_b_0_3: Jump b_1 else b_3 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.simd:4179 [F] s_b_1_0=sym_12722_3_parameter_inst.rn (const) */
    /* execute.simd:6280 [D] s_b_1_1 = ReadRegBank 9:s_b_1_0 (f32) */
    auto s_b_1_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().f32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_1_1,emitter.const_u8(4));
    }
    /* execute.simd:4180 [F] s_b_1_2=sym_12722_3_parameter_inst.rm (const) */
    /* execute.simd:6280 [D] s_b_1_3 = ReadRegBank 9:s_b_1_2 (f32) */
    auto s_b_1_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().f32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_1_3,emitter.const_u8(4));
    }
    /* execute.simd:4182 [D] s_b_1_4 = s_b_1_1-s_b_1_3 */
    auto s_b_1_4 = emitter.sub(s_b_1_1, s_b_1_3);
    /* execute.simd:4183 [F] s_b_1_5=sym_12722_3_parameter_inst.rd (const) */
    /* execute.simd:6290 [D] s_b_1_6: WriteRegBank 9:s_b_1_5 = s_b_1_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_1_4,emitter.const_u8(4));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_1_4);
    /* execute.simd:6291 [F] s_b_1_7 = constant u32 0 (const) */
    /* execute.simd:6291 [F] s_b_1_8: WriteRegBank 10:s_b_1_5 = s_b_1_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL),emitter.const_u8(4));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(260 + (16 * insn.rd))),emitter.const_u32((uint32_t)0ULL));
    /* execute.simd:6292 [F] s_b_1_9 = constant u64 0 (const) */
    /* execute.simd:6292 [F] s_b_1_10: WriteRegBank 3:s_b_1_5 = s_b_1_9 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_1_11: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1, b_3,  */
  fixed_block_b_2: 
  {
    /* ???:4294967295 [F] s_b_2_0: Return */
    goto fixed_done;
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:4186 [F] s_b_3_0=sym_12722_3_parameter_inst.rn (const) */
    /* execute.simd:6285 [D] s_b_3_1 = ReadRegBank 11:s_b_3_0 (f64) */
    auto s_b_3_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().f64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_3_1,emitter.const_u8(8));
    }
    /* execute.simd:4187 [F] s_b_3_2=sym_12722_3_parameter_inst.rm (const) */
    /* execute.simd:6285 [D] s_b_3_3 = ReadRegBank 11:s_b_3_2 (f64) */
    auto s_b_3_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().f64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_3_3,emitter.const_u8(8));
    }
    /* execute.simd:4189 [D] s_b_3_4 = s_b_3_1-s_b_3_3 */
    auto s_b_3_4 = emitter.sub(s_b_3_1, s_b_3_3);
    /* execute.simd:4190 [F] s_b_3_5=sym_12722_3_parameter_inst.rd (const) */
    /* execute.simd:6298 [D] s_b_3_6: WriteRegBank 11:s_b_3_5 = s_b_3_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_3_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_3_4);
    /* execute.simd:6299 [F] s_b_3_7 = constant u64 0 (const) */
    /* execute.simd:6299 [F] s_b_3_8: WriteRegBank 3:s_b_3_5 = s_b_3_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_3_9: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_ld1s(const arm64_decode_a64_SIMD_LS_SINGLE&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_67097_1__R_s_b_0_5 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_67135_1__R_s_b_13_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_13476_0_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_13451_0_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_13423_0_value = emitter.alloc_local(emitter.context().types().u16(), false);
  auto DV_sym_13404_0_value = emitter.alloc_local(emitter.context().types().u8(), false);
  auto DV_sym_13397_0_addr = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2793 [F] s_b_0_0=sym_13391_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_10 else b_8 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_8;
    }
  }
  /* b_2, b_3, b_5, b_6, b_7, b_9,  */
  fixed_block_b_1: 
  {
    /* ???:4294967295 [F] s_b_1_0: Return */
    goto fixed_done;
  }
  /* b_9,  */
  fixed_block_b_2: 
  {
    /* execute.simd:2799 [D] s_b_2_0 = sym_13397_0_addr uint64_t */
    auto s_b_2_0 = emitter.load_local(DV_sym_13397_0_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_2_1 = Load 1 s_b_2_0 => sym_13404_0_value */
    auto s_b_2_1 = emitter.load_memory(s_b_2_0, emitter.context().types().u8());
    emitter.store_local(DV_sym_13404_0_value, s_b_2_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_2_0, s_b_2_1, emitter.const_u8(1));
    }
    /* execute.simd:2801 [F] s_b_2_2=sym_13391_3_parameter_inst.rt (const) */
    /* execute.simd:2801 [D] s_b_2_3 = ReadRegBank 16:s_b_2_2 (v16u8) */
    auto s_b_2_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_2_3,emitter.const_u8(16));
    }
    /* execute.simd:2802 [D] s_b_2_4 = sym_13404_0_value uint8_t */
    auto s_b_2_4 = emitter.load_local(DV_sym_13404_0_value, emitter.context().types().u8());
    /* execute.simd:2802 [F] s_b_2_5=sym_13391_3_parameter_inst.eindex (const) */
    /* execute.simd:2802 [F] s_b_2_6 = (s32)s_b_2_5 (const) */
    /* execute.simd:2802 [D] s_b_2_7 = s_b_2_3[s_b_2_6] <= s_b_2_4 */
    auto s_b_2_7 = emitter.vector_insert(s_b_2_3, emitter.const_s32(((int32_t)insn.eindex)), s_b_2_4);
    /* execute.simd:2803 [F] s_b_2_8=sym_13391_3_parameter_inst.rt (const) */
    /* execute.simd:2803 [D] s_b_2_9: WriteRegBank 16:s_b_2_8 = s_b_2_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_2_7,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_2_7);
    /* execute.simd:0 [F] s_b_2_10: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_9,  */
  fixed_block_b_3: 
  {
    /* execute.simd:2808 [D] s_b_3_0 = sym_13397_0_addr uint64_t */
    auto s_b_3_0 = emitter.load_local(DV_sym_13397_0_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_3_1 = Load 2 s_b_3_0 => sym_13423_0_value */
    auto s_b_3_1 = emitter.load_memory(s_b_3_0, emitter.context().types().u16());
    emitter.store_local(DV_sym_13423_0_value, s_b_3_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_3_0, s_b_3_1, emitter.const_u8(2));
    }
    /* execute.simd:2810 [F] s_b_3_2=sym_13391_3_parameter_inst.rt (const) */
    /* execute.simd:2810 [D] s_b_3_3 = ReadRegBank 18:s_b_3_2 (v8u16) */
    auto s_b_3_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_3_3,emitter.const_u8(16));
    }
    /* execute.simd:2811 [D] s_b_3_4 = sym_13423_0_value uint16_t */
    auto s_b_3_4 = emitter.load_local(DV_sym_13423_0_value, emitter.context().types().u16());
    /* execute.simd:2811 [F] s_b_3_5=sym_13391_3_parameter_inst.eindex (const) */
    /* execute.simd:2811 [F] s_b_3_6 = (s32)s_b_3_5 (const) */
    /* execute.simd:2811 [D] s_b_3_7 = s_b_3_3[s_b_3_6] <= s_b_3_4 */
    auto s_b_3_7 = emitter.vector_insert(s_b_3_3, emitter.const_s32(((int32_t)insn.eindex)), s_b_3_4);
    /* execute.simd:2812 [F] s_b_3_8=sym_13391_3_parameter_inst.rt (const) */
    /* execute.simd:2812 [D] s_b_3_9: WriteRegBank 18:s_b_3_8 = s_b_3_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_3_7,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_3_7);
    /* execute.simd:0 [F] s_b_3_10: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_9,  */
  fixed_block_b_4: 
  {
    /* execute.simd:2816 [F] s_b_4_0=sym_13391_3_parameter_inst.size (const) */
    /* execute.simd:2816 [F] s_b_4_1 = (u32)s_b_4_0 (const) */
    /* execute.simd:2816 [F] s_b_4_2 = constant u32 0 (const) */
    /* execute.simd:2816 [F] s_b_4_3 = s_b_4_1==s_b_4_2 (const) */
    uint8_t s_b_4_3 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)0ULL));
    /* execute.simd:2816 [F] s_b_4_4: If s_b_4_3: Jump b_5 else b_6 (const) */
    if (s_b_4_3) 
    {
      goto fixed_block_b_5;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_4,  */
  fixed_block_b_5: 
  {
    /* execute.simd:2818 [D] s_b_5_0 = sym_13397_0_addr uint64_t */
    auto s_b_5_0 = emitter.load_local(DV_sym_13397_0_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_5_1 = Load 4 s_b_5_0 => sym_13451_0_value */
    auto s_b_5_1 = emitter.load_memory(s_b_5_0, emitter.context().types().u32());
    emitter.store_local(DV_sym_13451_0_value, s_b_5_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_5_0, s_b_5_1, emitter.const_u8(4));
    }
    /* execute.simd:2820 [F] s_b_5_2=sym_13391_3_parameter_inst.rt (const) */
    /* execute.simd:2820 [D] s_b_5_3 = ReadRegBank 20:s_b_5_2 (v4u32) */
    auto s_b_5_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_5_3,emitter.const_u8(16));
    }
    /* execute.simd:2821 [D] s_b_5_4 = sym_13451_0_value uint32_t */
    auto s_b_5_4 = emitter.load_local(DV_sym_13451_0_value, emitter.context().types().u32());
    /* execute.simd:2821 [F] s_b_5_5=sym_13391_3_parameter_inst.eindex (const) */
    /* execute.simd:2821 [F] s_b_5_6 = (s32)s_b_5_5 (const) */
    /* execute.simd:2821 [D] s_b_5_7 = s_b_5_3[s_b_5_6] <= s_b_5_4 */
    auto s_b_5_7 = emitter.vector_insert(s_b_5_3, emitter.const_s32(((int32_t)insn.eindex)), s_b_5_4);
    /* execute.simd:2822 [F] s_b_5_8=sym_13391_3_parameter_inst.rt (const) */
    /* execute.simd:2822 [D] s_b_5_9: WriteRegBank 20:s_b_5_8 = s_b_5_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_5_7,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_5_7);
    /* execute.simd:2817 [F] s_b_5_10: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_4,  */
  fixed_block_b_6: 
  {
    /* execute.simd:2823 [F] s_b_6_0=sym_13391_3_parameter_inst.size (const) */
    /* execute.simd:2823 [F] s_b_6_1 = (u32)s_b_6_0 (const) */
    /* execute.simd:2823 [F] s_b_6_2 = constant u32 1 (const) */
    /* execute.simd:2823 [F] s_b_6_3 = s_b_6_1==s_b_6_2 (const) */
    uint8_t s_b_6_3 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)1ULL));
    /* execute.simd:2823 [F] s_b_6_4: If s_b_6_3: Jump b_7 else b_1 (const) */
    if (s_b_6_3) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_1;
    }
  }
  /* b_6,  */
  fixed_block_b_7: 
  {
    /* execute.simd:2825 [D] s_b_7_0 = sym_13397_0_addr uint64_t */
    auto s_b_7_0 = emitter.load_local(DV_sym_13397_0_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_7_1 = Load 8 s_b_7_0 => sym_13476_0_value */
    auto s_b_7_1 = emitter.load_memory(s_b_7_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_13476_0_value, s_b_7_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_7_0, s_b_7_1, emitter.const_u8(8));
    }
    /* execute.simd:2827 [F] s_b_7_2=sym_13391_3_parameter_inst.rt (const) */
    /* execute.simd:2827 [D] s_b_7_3 = ReadRegBank 21:s_b_7_2 (v2u64) */
    auto s_b_7_3 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_7_3,emitter.const_u8(16));
    }
    /* execute.simd:2828 [D] s_b_7_4 = sym_13476_0_value uint64_t */
    auto s_b_7_4 = emitter.load_local(DV_sym_13476_0_value, emitter.context().types().u64());
    /* execute.simd:2828 [F] s_b_7_5=sym_13391_3_parameter_inst.eindex (const) */
    /* execute.simd:2828 [F] s_b_7_6 = (s32)s_b_7_5 (const) */
    /* execute.simd:2828 [D] s_b_7_7 = s_b_7_3[s_b_7_6] <= s_b_7_4 */
    auto s_b_7_7 = emitter.vector_insert(s_b_7_3, emitter.const_s32(((int32_t)insn.eindex)), s_b_7_4);
    /* execute.simd:2829 [F] s_b_7_8=sym_13391_3_parameter_inst.rt (const) */
    /* execute.simd:2829 [D] s_b_7_9: WriteRegBank 21:s_b_7_8 = s_b_7_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_7_7,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_7_7);
    /* execute.simd:2824 [F] s_b_7_10: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2796 [F] s_b_8_0=sym_13391_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_8_1 = ReadRegBank 0:s_b_8_0 (u64) */
    auto s_b_8_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_8_1,emitter.const_u8(8));
    }
    /* execute.a64:2796 [D] s_b_8_2: sym_67097_1__R_s_b_0_5 = s_b_8_1, dominates: s_b_9_0  */
    emitter.store_local(DV_sym_67097_1__R_s_b_0_5, s_b_8_1);
    /* execute.a64:2796 [F] s_b_8_3: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_8, b_14,  */
  fixed_block_b_9: 
  {
    /* execute.simd:2794 [D] s_b_9_0 = sym_67097_1__R_s_b_0_5 uint64_t */
    auto s_b_9_0 = emitter.load_local(DV_sym_67097_1__R_s_b_0_5, emitter.context().types().u64());
    /* execute.simd:2794 [D] s_b_9_1: sym_13397_0_addr = s_b_9_0, dominates: s_b_5_0 s_b_7_0 s_b_3_0 s_b_2_0  */
    emitter.store_local(DV_sym_13397_0_addr, s_b_9_0);
    /* execute.simd:2796 [F] s_b_9_2=sym_13391_3_parameter_inst.opcode (const) */
    /* execute.simd:2797 [F] s_b_9_3 = constant s32 0 (const) */
    /* execute.simd:2806 [F] s_b_9_4 = constant s32 2 (const) */
    /* execute.simd:2815 [F] s_b_9_5 = constant s32 4 (const) */
    /* execute.simd:2796 [F] s_b_9_6: Switch s_b_9_2: < <todo> > def b_1 (const) -> b_4, b_3, b_2, b_1,  */
    switch (insn.opcode) 
    {
    case (int32_t)4ULL:
      goto fixed_block_b_4;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_3;
      break;
    case (int32_t)0ULL:
      goto fixed_block_b_2;
      break;
    default:
      goto fixed_block_b_1;
    }
  }
  /* b_0,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2764 [F] s_b_10_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_10_1 = __builtin_get_feature */
    uint32_t s_b_10_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_10_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_10_3 = s_b_10_1==s_b_10_2 (const) */
    uint8_t s_b_10_3 = ((uint8_t)(s_b_10_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_10_4: If s_b_10_3: Jump b_11 else b_15 (const) */
    if (s_b_10_3) 
    {
      goto fixed_block_b_11;
    }
    else 
    {
      goto fixed_block_b_15;
    }
  }
  /* b_10,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2765 [D] s_b_11_0 = ReadReg 21 (u64) */
    auto s_b_11_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_11_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_11_1: sym_67135_1__R_s_b_13_0 = s_b_11_0, dominates: s_b_14_0  */
    emitter.store_local(DV_sym_67135_1__R_s_b_13_0, s_b_11_0);
    /* execute.a64:2765 [F] s_b_11_2: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_15,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2768 [D] s_b_12_0 = ReadReg 21 (u64) */
    auto s_b_12_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_12_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_12_1: sym_67135_1__R_s_b_13_0 = s_b_12_0, dominates: s_b_14_0  */
    emitter.store_local(DV_sym_67135_1__R_s_b_13_0, s_b_12_0);
    /* execute.a64:2768 [F] s_b_12_2: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_15,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2770 [D] s_b_13_0 = ReadReg 22 (u64) */
    auto s_b_13_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_13_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_13_1: sym_67135_1__R_s_b_13_0 = s_b_13_0, dominates: s_b_14_0  */
    emitter.store_local(DV_sym_67135_1__R_s_b_13_0, s_b_13_0);
    /* execute.a64:2770 [F] s_b_13_2: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_11, b_12, b_13,  */
  fixed_block_b_14: 
  {
    /* execute.a64:2794 [D] s_b_14_0 = sym_67135_1__R_s_b_13_0 uint64_t */
    auto s_b_14_0 = emitter.load_local(DV_sym_67135_1__R_s_b_13_0, emitter.context().types().u64());
    /* execute.a64:2794 [D] s_b_14_1: sym_67097_1__R_s_b_0_5 = s_b_14_0, dominates: s_b_9_0  */
    emitter.store_local(DV_sym_67097_1__R_s_b_0_5, s_b_14_0);
    /* execute.a64:2794 [F] s_b_14_2: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_10,  */
  fixed_block_b_15: 
  {
    /* execute.a64:3075 [F] s_b_15_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_15_1 = __builtin_get_feature */
    uint32_t s_b_15_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_15_2 = (u8)s_b_15_1 (const) */
    /* execute.a64:2767 [F] s_b_15_3 = (u32)s_b_15_2 (const) */
    /* execute.a64:2767 [F] s_b_15_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_15_5 = s_b_15_3==s_b_15_4 (const) */
    uint8_t s_b_15_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_15_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_15_6: If s_b_15_5: Jump b_12 else b_13 (const) */
    if (s_b_15_5) 
    {
      goto fixed_block_b_12;
    }
    else 
    {
      goto fixed_block_b_13;
    }
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_ldarb(const arm64_decode_a64_LS_EX&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_72756_1__R_s_b_4_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_72819_3_parameter_address = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_72824_0_data8 = emitter.alloc_local(emitter.context().types().u8(), false);
  auto DV_sym_73423_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_72718_1__R_s_b_0_5 = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2793 [F] s_b_0_0=sym_14110_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_3 else b_1 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_3;
    }
    else 
    {
      goto fixed_block_b_1;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2796 [F] s_b_1_0=sym_14110_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_1_1 = ReadRegBank 0:s_b_1_0 (u64) */
    auto s_b_1_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_1_1,emitter.const_u8(8));
    }
    /* execute.a64:2796 [D] s_b_1_2: sym_72718_1__R_s_b_0_5 = s_b_1_1, dominates: s_b_2_0  */
    emitter.store_local(DV_sym_72718_1__R_s_b_0_5, s_b_1_1);
    /* execute.a64:2796 [F] s_b_1_3: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1, b_7,  */
  fixed_block_b_2: 
  {
    /* execute.a64:714 [D] s_b_2_0 = sym_72718_1__R_s_b_0_5 uint64_t */
    auto s_b_2_0 = emitter.load_local(DV_sym_72718_1__R_s_b_0_5, emitter.context().types().u64());
    /* execute.a64:715 [D] s_b_2_1: sym_72819_3_parameter_address = s_b_2_0, dominates: s_b_8_1  */
    emitter.store_local(DV_sym_72819_3_parameter_address, s_b_2_0);
    /* ???:4294967295 [D] s_b_2_2 = Load 1 s_b_2_0 => sym_72824_0_data8 */
    auto s_b_2_2 = emitter.load_memory(s_b_2_0, emitter.context().types().u8());
    emitter.store_local(DV_sym_72824_0_data8, s_b_2_2);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_2_0, s_b_2_2, emitter.const_u8(1));
    }
    /* execute.a64:1726 [D] s_b_2_3 = sym_72824_0_data8 uint8_t */
    auto s_b_2_3 = emitter.load_local(DV_sym_72824_0_data8, emitter.context().types().u8());
    /* execute.a64:1726 [D] s_b_2_4 = (u64)s_b_2_3 */
    auto s_b_2_4 = emitter.zx(s_b_2_3, emitter.context().types().u64());
    /* execute.a64:2756 [F] s_b_2_5=sym_14110_3_parameter_inst.rt (const) */
    /* execute.a64:2756 [D] s_b_2_6 = (u32)s_b_2_4 */
    auto s_b_2_6 = emitter.truncate(s_b_2_4, emitter.context().types().u32());
    /* execute.a64:2756 [D] s_b_2_7 = (u64)s_b_2_6 */
    auto s_b_2_7 = emitter.zx(s_b_2_6, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_2_8: sym_73423_3_parameter_value = s_b_2_7, dominates: s_b_10_1  */
    emitter.store_local(DV_sym_73423_3_parameter_value, s_b_2_7);
    /* execute.a64:2745 [F] s_b_2_9 = (u32)s_b_2_5 (const) */
    /* execute.a64:2745 [F] s_b_2_10 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_2_11 = s_b_2_9==s_b_2_10 (const) */
    uint8_t s_b_2_11 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_2_12: If s_b_2_11: Jump b_8 else b_10 (const) */
    if (s_b_2_11) 
    {
      goto fixed_block_b_8;
    }
    else 
    {
      goto fixed_block_b_10;
    }
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.a64:2764 [F] s_b_3_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_3_1 = __builtin_get_feature */
    uint32_t s_b_3_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_3_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_3_3 = s_b_3_1==s_b_3_2 (const) */
    uint8_t s_b_3_3 = ((uint8_t)(s_b_3_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_3_4: If s_b_3_3: Jump b_4 else b_9 (const) */
    if (s_b_3_3) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_9;
    }
  }
  /* b_3,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2765 [D] s_b_4_0 = ReadReg 21 (u64) */
    auto s_b_4_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_4_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_4_1: sym_72756_1__R_s_b_4_0 = s_b_4_0, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_72756_1__R_s_b_4_0, s_b_4_0);
    /* execute.a64:2765 [F] s_b_4_2: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_9,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2768 [D] s_b_5_0 = ReadReg 21 (u64) */
    auto s_b_5_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_5_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_5_1: sym_72756_1__R_s_b_4_0 = s_b_5_0, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_72756_1__R_s_b_4_0, s_b_5_0);
    /* execute.a64:2768 [F] s_b_5_2: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_9,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2770 [D] s_b_6_0 = ReadReg 22 (u64) */
    auto s_b_6_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_6_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_6_1: sym_72756_1__R_s_b_4_0 = s_b_6_0, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_72756_1__R_s_b_4_0, s_b_6_0);
    /* execute.a64:2770 [F] s_b_6_2: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_4, b_5, b_6,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2794 [D] s_b_7_0 = sym_72756_1__R_s_b_4_0 uint64_t */
    auto s_b_7_0 = emitter.load_local(DV_sym_72756_1__R_s_b_4_0, emitter.context().types().u64());
    /* execute.a64:2794 [D] s_b_7_1: sym_72718_1__R_s_b_0_5 = s_b_7_0, dominates: s_b_2_0  */
    emitter.store_local(DV_sym_72718_1__R_s_b_0_5, s_b_7_0);
    /* execute.a64:2794 [F] s_b_7_2: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_2, b_10,  */
  fixed_block_b_8: 
  {
    /* execute.a64:1786 [F] s_b_8_0 = constant u32 0 (const) */
    /* execute.a64:1786 [D] s_b_8_1 = sym_72819_3_parameter_address uint64_t */
    auto s_b_8_1 = emitter.load_local(DV_sym_72819_3_parameter_address, emitter.context().types().u64());
    /* execute.a64:1786 [D] s_b_8_2 = mem_monitor_acquire */
    emitter.call(__captive_mem_monitor_acquire, emitter.const_u32((uint32_t)0ULL), s_b_8_1);
    /* ???:4294967295 [F] s_b_8_3: Return */
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_9: 
  {
    /* execute.a64:3075 [F] s_b_9_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_9_1 = __builtin_get_feature */
    uint32_t s_b_9_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_9_2 = (u8)s_b_9_1 (const) */
    /* execute.a64:2767 [F] s_b_9_3 = (u32)s_b_9_2 (const) */
    /* execute.a64:2767 [F] s_b_9_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_9_5 = s_b_9_3==s_b_9_4 (const) */
    uint8_t s_b_9_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_9_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_9_6: If s_b_9_5: Jump b_5 else b_6 (const) */
    if (s_b_9_5) 
    {
      goto fixed_block_b_5;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_2,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2747 [F] s_b_10_0=sym_14110_3_parameter_inst.rt (const) */
    /* execute.a64:2747 [D] s_b_10_1 = sym_73423_3_parameter_value uint64_t */
    auto s_b_10_1 = emitter.load_local(DV_sym_73423_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_10_2: WriteRegBank 0:s_b_10_0 = s_b_10_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_10_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_10_1);
    /* execute.a64:0 [F] s_b_10_3: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_ldp_simd(const arm64_decode_a64_LS_REG_PAIR_OFF&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_89479_1__R_s_b_0_5 = emitter.alloc_local(emitter.context().types().u64(), false);
  uint8_t CV_sym_89565_3_parameter_size;
  auto DV_sym_89517_1__R_s_b_4_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_89576_3_parameter_addr = emitter.alloc_local(emitter.context().types().u64(), false);
  uint8_t CV_sym_89571_0_offset;
  auto DV_sym_89633_3_parameter_addr = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_89635_0_value = emitter.alloc_local(emitter.context().types().u8(), false);
  auto DV_sym_89670_0_vh = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_89664_0_vl = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_89657_0_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_89650_0_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_89643_0_value = emitter.alloc_local(emitter.context().types().u16(), false);
  auto DV_sym_89785_0_value = emitter.alloc_local(emitter.context().types().u8(), false);
  auto DV_sym_89783_3_parameter_addr = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_89793_0_value = emitter.alloc_local(emitter.context().types().u16(), false);
  auto DV_sym_89820_0_vh = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_89814_0_vl = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_89807_0_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_89800_0_value = emitter.alloc_local(emitter.context().types().u32(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2793 [F] s_b_0_0=sym_14448_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_3 else b_1 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_3;
    }
    else 
    {
      goto fixed_block_b_1;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2796 [F] s_b_1_0=sym_14448_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_1_1 = ReadRegBank 0:s_b_1_0 (u64) */
    auto s_b_1_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_1_1,emitter.const_u8(8));
    }
    /* execute.a64:2796 [D] s_b_1_2: sym_89479_1__R_s_b_0_5 = s_b_1_1, dominates: s_b_2_0  */
    emitter.store_local(DV_sym_89479_1__R_s_b_0_5, s_b_1_1);
    /* execute.a64:2796 [F] s_b_1_3: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1, b_7,  */
  fixed_block_b_2: 
  {
    /* execute.simd:805 [D] s_b_2_0 = sym_89479_1__R_s_b_0_5 uint64_t */
    auto s_b_2_0 = emitter.load_local(DV_sym_89479_1__R_s_b_0_5, emitter.context().types().u64());
    /* execute.simd:806 [F] s_b_2_1=sym_14448_3_parameter_inst.imms64 (const) */
    /* ???:4294967295 [F] s_b_2_2 = (u64)s_b_2_1 (const) */
    /* ???:4294967295 [D] s_b_2_3 = s_b_2_0+s_b_2_2 */
    auto s_b_2_3 = emitter.add(s_b_2_0, emitter.const_u64(((uint64_t)insn.imms64)));
    /* execute.simd:808 [F] s_b_2_4=sym_14448_3_parameter_inst.opc (const) */
    /* execute.simd:808 [F] s_b_2_5 = (u32)s_b_2_4 (const) */
    /* execute.simd:808 [F] s_b_2_6 = constant u32 2 (const) */
    /* execute.simd:808 [F] s_b_2_7 = s_b_2_5+s_b_2_6 (const) */
    uint32_t s_b_2_7 = ((uint32_t)(((uint32_t)insn.opc) + (uint32_t)2ULL));
    /* execute.simd:808 [F] s_b_2_8 = (u8)s_b_2_7 (const) */
    /* execute.simd:808 [F] s_b_2_9: sym_89565_3_parameter_size = s_b_2_8 (const), dominates: s_b_15_0  */
    CV_sym_89565_3_parameter_size = ((uint8_t)s_b_2_7);
    /* execute.simd:808 [D] s_b_2_10: sym_89576_3_parameter_addr = s_b_2_3, dominates: s_b_15_1  */
    emitter.store_local(DV_sym_89576_3_parameter_addr, s_b_2_3);
    /* execute.simd:773 [F] s_b_2_11 = constant u32 1 (const) */
    /* execute.simd:773 [F] s_b_2_12 = (u32)s_b_2_8 (const) */
    /* execute.simd:773 [F] s_b_2_13 = s_b_2_11<<s_b_2_12 (const) */
    uint32_t s_b_2_13 = ((uint32_t)((uint32_t)1ULL << ((uint32_t)((uint8_t)s_b_2_7))));
    /* execute.simd:773 [F] s_b_2_14 = (u8)s_b_2_13 (const) */
    /* execute.simd:773 [F] s_b_2_15: sym_89571_0_offset = s_b_2_14 (const), dominates: s_b_15_2  */
    CV_sym_89571_0_offset = ((uint8_t)s_b_2_13);
    /* execute.simd:774 [D] s_b_2_16: sym_89633_3_parameter_addr = s_b_2_3, dominates: s_b_14_0 s_b_13_0 s_b_12_0 s_b_11_0 s_b_10_0  */
    emitter.store_local(DV_sym_89633_3_parameter_addr, s_b_2_3);
    /* execute.simd:3763 [F] s_b_2_17 = constant s32 0 (const) */
    /* execute.simd:3770 [F] s_b_2_18 = constant s32 1 (const) */
    /* execute.simd:3777 [F] s_b_2_19 = constant s32 2 (const) */
    /* execute.simd:3784 [F] s_b_2_20 = constant s32 3 (const) */
    /* execute.simd:3791 [F] s_b_2_21 = constant s32 4 (const) */
    /* execute.simd:3762 [F] s_b_2_22: Switch s_b_2_8: < <todo> > def b_15 (const) -> b_14, b_13, b_12, b_11, b_10, b_15,  */
    switch (((uint8_t)s_b_2_7)) 
    {
    case (int32_t)2ULL:
      goto fixed_block_b_10;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_12;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_13;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_14;
      break;
    case (int32_t)0ULL:
      goto fixed_block_b_11;
      break;
    default:
      goto fixed_block_b_15;
    }
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.a64:2764 [F] s_b_3_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_3_1 = __builtin_get_feature */
    uint32_t s_b_3_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_3_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_3_3 = s_b_3_1==s_b_3_2 (const) */
    uint8_t s_b_3_3 = ((uint8_t)(s_b_3_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_3_4: If s_b_3_3: Jump b_4 else b_9 (const) */
    if (s_b_3_3) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_9;
    }
  }
  /* b_3,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2765 [D] s_b_4_0 = ReadReg 21 (u64) */
    auto s_b_4_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_4_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_4_1: sym_89517_1__R_s_b_4_0 = s_b_4_0, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_89517_1__R_s_b_4_0, s_b_4_0);
    /* execute.a64:2765 [F] s_b_4_2: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_9,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2768 [D] s_b_5_0 = ReadReg 21 (u64) */
    auto s_b_5_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_5_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_5_1: sym_89517_1__R_s_b_4_0 = s_b_5_0, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_89517_1__R_s_b_4_0, s_b_5_0);
    /* execute.a64:2768 [F] s_b_5_2: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_9,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2770 [D] s_b_6_0 = ReadReg 22 (u64) */
    auto s_b_6_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_6_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_6_1: sym_89517_1__R_s_b_4_0 = s_b_6_0, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_89517_1__R_s_b_4_0, s_b_6_0);
    /* execute.a64:2770 [F] s_b_6_2: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_4, b_5, b_6,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2794 [D] s_b_7_0 = sym_89517_1__R_s_b_4_0 uint64_t */
    auto s_b_7_0 = emitter.load_local(DV_sym_89517_1__R_s_b_4_0, emitter.context().types().u64());
    /* execute.a64:2794 [D] s_b_7_1: sym_89479_1__R_s_b_0_5 = s_b_7_0, dominates: s_b_2_0  */
    emitter.store_local(DV_sym_89479_1__R_s_b_0_5, s_b_7_0);
    /* execute.a64:2794 [F] s_b_7_2: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_15, b_16, b_17, b_18, b_19, b_20,  */
  fixed_block_b_8: 
  {
    /* ???:4294967295 [F] s_b_8_0: Return */
    goto fixed_done;
  }
  /* b_3,  */
  fixed_block_b_9: 
  {
    /* execute.a64:3075 [F] s_b_9_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_9_1 = __builtin_get_feature */
    uint32_t s_b_9_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_9_2 = (u8)s_b_9_1 (const) */
    /* execute.a64:2767 [F] s_b_9_3 = (u32)s_b_9_2 (const) */
    /* execute.a64:2767 [F] s_b_9_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_9_5 = s_b_9_3==s_b_9_4 (const) */
    uint8_t s_b_9_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_9_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_9_6: If s_b_9_5: Jump b_5 else b_6 (const) */
    if (s_b_9_5) 
    {
      goto fixed_block_b_5;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_2,  */
  fixed_block_b_10: 
  {
    /* execute.simd:3780 [D] s_b_10_0 = sym_89633_3_parameter_addr uint64_t */
    auto s_b_10_0 = emitter.load_local(DV_sym_89633_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_10_1 = Load 4 s_b_10_0 => sym_89650_0_value */
    auto s_b_10_1 = emitter.load_memory(s_b_10_0, emitter.context().types().u32());
    emitter.store_local(DV_sym_89650_0_value, s_b_10_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_10_0, s_b_10_1, emitter.const_u8(4));
    }
    /* execute.simd:3781 [F] s_b_10_2=sym_14448_3_parameter_inst.rt (const) */
    /* execute.simd:3781 [D] s_b_10_3 = sym_89650_0_value uint32_t */
    auto s_b_10_3 = emitter.load_local(DV_sym_89650_0_value, emitter.context().types().u32());
    /* execute.simd:6319 [D] s_b_10_4 = (u64)s_b_10_3 */
    auto s_b_10_4 = emitter.zx(s_b_10_3, emitter.context().types().u64());
    /* execute.simd:6319 [D] s_b_10_5: WriteRegBank 2:s_b_10_2 = s_b_10_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_10_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_10_4);
    /* execute.simd:6320 [F] s_b_10_6 = constant u64 0 (const) */
    /* execute.simd:6320 [F] s_b_10_7: WriteRegBank 3:s_b_10_2 = s_b_10_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_10_8: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_2,  */
  fixed_block_b_11: 
  {
    /* execute.simd:3766 [D] s_b_11_0 = sym_89633_3_parameter_addr uint64_t */
    auto s_b_11_0 = emitter.load_local(DV_sym_89633_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_11_1 = Load 1 s_b_11_0 => sym_89635_0_value */
    auto s_b_11_1 = emitter.load_memory(s_b_11_0, emitter.context().types().u8());
    emitter.store_local(DV_sym_89635_0_value, s_b_11_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_11_0, s_b_11_1, emitter.const_u8(1));
    }
    /* execute.simd:3767 [F] s_b_11_2=sym_14448_3_parameter_inst.rt (const) */
    /* execute.simd:3767 [D] s_b_11_3 = sym_89635_0_value uint8_t */
    auto s_b_11_3 = emitter.load_local(DV_sym_89635_0_value, emitter.context().types().u8());
    /* execute.simd:6305 [D] s_b_11_4 = (u64)s_b_11_3 */
    auto s_b_11_4 = emitter.zx(s_b_11_3, emitter.context().types().u64());
    /* execute.simd:6305 [D] s_b_11_5: WriteRegBank 2:s_b_11_2 = s_b_11_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_11_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_11_4);
    /* execute.simd:6306 [F] s_b_11_6 = constant u64 0 (const) */
    /* execute.simd:6306 [F] s_b_11_7: WriteRegBank 3:s_b_11_2 = s_b_11_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_11_8: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_2,  */
  fixed_block_b_12: 
  {
    /* execute.simd:3773 [D] s_b_12_0 = sym_89633_3_parameter_addr uint64_t */
    auto s_b_12_0 = emitter.load_local(DV_sym_89633_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_12_1 = Load 2 s_b_12_0 => sym_89643_0_value */
    auto s_b_12_1 = emitter.load_memory(s_b_12_0, emitter.context().types().u16());
    emitter.store_local(DV_sym_89643_0_value, s_b_12_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_12_0, s_b_12_1, emitter.const_u8(2));
    }
    /* execute.simd:3774 [F] s_b_12_2=sym_14448_3_parameter_inst.rt (const) */
    /* execute.simd:3774 [D] s_b_12_3 = sym_89643_0_value uint16_t */
    auto s_b_12_3 = emitter.load_local(DV_sym_89643_0_value, emitter.context().types().u16());
    /* execute.simd:6312 [D] s_b_12_4 = (u64)s_b_12_3 */
    auto s_b_12_4 = emitter.zx(s_b_12_3, emitter.context().types().u64());
    /* execute.simd:6312 [D] s_b_12_5: WriteRegBank 2:s_b_12_2 = s_b_12_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_12_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_12_4);
    /* execute.simd:6313 [F] s_b_12_6 = constant u64 0 (const) */
    /* execute.simd:6313 [F] s_b_12_7: WriteRegBank 3:s_b_12_2 = s_b_12_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_12_8: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_2,  */
  fixed_block_b_13: 
  {
    /* execute.simd:3787 [D] s_b_13_0 = sym_89633_3_parameter_addr uint64_t */
    auto s_b_13_0 = emitter.load_local(DV_sym_89633_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_13_1 = Load 8 s_b_13_0 => sym_89657_0_value */
    auto s_b_13_1 = emitter.load_memory(s_b_13_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_89657_0_value, s_b_13_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_13_0, s_b_13_1, emitter.const_u8(8));
    }
    /* execute.simd:3788 [F] s_b_13_2=sym_14448_3_parameter_inst.rt (const) */
    /* execute.simd:3788 [D] s_b_13_3 = sym_89657_0_value uint64_t */
    auto s_b_13_3 = emitter.load_local(DV_sym_89657_0_value, emitter.context().types().u64());
    /* execute.simd:6326 [D] s_b_13_4: WriteRegBank 2:s_b_13_2 = s_b_13_3 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_13_3,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_13_3);
    /* execute.simd:6327 [F] s_b_13_5 = constant u64 0 (const) */
    /* execute.simd:6327 [F] s_b_13_6: WriteRegBank 3:s_b_13_2 = s_b_13_5 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_13_7: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_2,  */
  fixed_block_b_14: 
  {
    /* execute.simd:3795 [D] s_b_14_0 = sym_89633_3_parameter_addr uint64_t */
    auto s_b_14_0 = emitter.load_local(DV_sym_89633_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_14_1 = Load 8 s_b_14_0 => sym_89664_0_vl */
    auto s_b_14_1 = emitter.load_memory(s_b_14_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_89664_0_vl, s_b_14_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_14_0, s_b_14_1, emitter.const_u8(8));
    }
    /* execute.simd:3796 [F] s_b_14_2 = constant u64 8 (const) */
    /* execute.simd:3796 [D] s_b_14_3 = s_b_14_0+s_b_14_2 */
    auto s_b_14_3 = emitter.add(s_b_14_0, emitter.const_u64((uint64_t)8ULL));
    /* ???:4294967295 [D] s_b_14_4 = Load 8 s_b_14_3 => sym_89670_0_vh */
    auto s_b_14_4 = emitter.load_memory(s_b_14_3, emitter.context().types().u64());
    emitter.store_local(DV_sym_89670_0_vh, s_b_14_4);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_14_3, s_b_14_4, emitter.const_u8(8));
    }
    /* execute.simd:3797 [F] s_b_14_5=sym_14448_3_parameter_inst.rt (const) */
    /* execute.simd:3797 [D] s_b_14_6 = sym_89664_0_vl uint64_t */
    auto s_b_14_6 = emitter.load_local(DV_sym_89664_0_vl, emitter.context().types().u64());
    /* execute.simd:3797 [D] s_b_14_7 = sym_89670_0_vh uint64_t */
    auto s_b_14_7 = emitter.load_local(DV_sym_89670_0_vh, emitter.context().types().u64());
    /* execute.simd:6333 [D] s_b_14_8: WriteRegBank 2:s_b_14_5 = s_b_14_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_14_6,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_14_6);
    /* execute.simd:6334 [D] s_b_14_9: WriteRegBank 3:s_b_14_5 = s_b_14_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),s_b_14_7,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),s_b_14_7);
    /* execute.simd:0 [F] s_b_14_10: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_2, b_10, b_11, b_12, b_13, b_14,  */
  fixed_block_b_15: 
  {
    /* execute.simd:775 [F] s_b_15_0 = sym_89565_3_parameter_size (const) uint8_t */
    uint8_t s_b_15_0 = CV_sym_89565_3_parameter_size;
    /* execute.simd:775 [D] s_b_15_1 = sym_89576_3_parameter_addr uint64_t */
    auto s_b_15_1 = emitter.load_local(DV_sym_89576_3_parameter_addr, emitter.context().types().u64());
    /* execute.simd:775 [F] s_b_15_2 = sym_89571_0_offset (const) uint8_t */
    uint8_t s_b_15_2 = CV_sym_89571_0_offset;
    /* execute.simd:775 [F] s_b_15_3 = (u64)s_b_15_2 (const) */
    /* execute.simd:775 [D] s_b_15_4 = s_b_15_1+s_b_15_3 */
    auto s_b_15_4 = emitter.add(s_b_15_1, emitter.const_u64(((uint64_t)s_b_15_2)));
    /* execute.simd:775 [D] s_b_15_5: sym_89783_3_parameter_addr = s_b_15_4, dominates: s_b_16_0 s_b_20_0 s_b_19_0 s_b_18_0 s_b_17_0  */
    emitter.store_local(DV_sym_89783_3_parameter_addr, s_b_15_4);
    /* execute.simd:3763 [F] s_b_15_6 = constant s32 0 (const) */
    /* execute.simd:3770 [F] s_b_15_7 = constant s32 1 (const) */
    /* execute.simd:3777 [F] s_b_15_8 = constant s32 2 (const) */
    /* execute.simd:3784 [F] s_b_15_9 = constant s32 3 (const) */
    /* execute.simd:3791 [F] s_b_15_10 = constant s32 4 (const) */
    /* execute.simd:3762 [F] s_b_15_11: Switch s_b_15_0: < <todo> > def b_8 (const) -> b_8, b_16, b_20, b_19, b_18, b_17,  */
    switch (s_b_15_0) 
    {
    case (int32_t)1ULL:
      goto fixed_block_b_18;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_20;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_16;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_19;
      break;
    case (int32_t)0ULL:
      goto fixed_block_b_17;
      break;
    default:
      goto fixed_block_b_8;
    }
  }
  /* b_15,  */
  fixed_block_b_16: 
  {
    /* execute.simd:3780 [D] s_b_16_0 = sym_89783_3_parameter_addr uint64_t */
    auto s_b_16_0 = emitter.load_local(DV_sym_89783_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_16_1 = Load 4 s_b_16_0 => sym_89800_0_value */
    auto s_b_16_1 = emitter.load_memory(s_b_16_0, emitter.context().types().u32());
    emitter.store_local(DV_sym_89800_0_value, s_b_16_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_16_0, s_b_16_1, emitter.const_u8(4));
    }
    /* execute.simd:3781 [F] s_b_16_2=sym_14448_3_parameter_inst.rt2 (const) */
    /* execute.simd:3781 [D] s_b_16_3 = sym_89800_0_value uint32_t */
    auto s_b_16_3 = emitter.load_local(DV_sym_89800_0_value, emitter.context().types().u32());
    /* execute.simd:6319 [D] s_b_16_4 = (u64)s_b_16_3 */
    auto s_b_16_4 = emitter.zx(s_b_16_3, emitter.context().types().u64());
    /* execute.simd:6319 [D] s_b_16_5: WriteRegBank 2:s_b_16_2 = s_b_16_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_16_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_16_4);
    /* execute.simd:6320 [F] s_b_16_6 = constant u64 0 (const) */
    /* execute.simd:6320 [F] s_b_16_7: WriteRegBank 3:s_b_16_2 = s_b_16_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_16_8: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_15,  */
  fixed_block_b_17: 
  {
    /* execute.simd:3766 [D] s_b_17_0 = sym_89783_3_parameter_addr uint64_t */
    auto s_b_17_0 = emitter.load_local(DV_sym_89783_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_17_1 = Load 1 s_b_17_0 => sym_89785_0_value */
    auto s_b_17_1 = emitter.load_memory(s_b_17_0, emitter.context().types().u8());
    emitter.store_local(DV_sym_89785_0_value, s_b_17_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_17_0, s_b_17_1, emitter.const_u8(1));
    }
    /* execute.simd:3767 [F] s_b_17_2=sym_14448_3_parameter_inst.rt2 (const) */
    /* execute.simd:3767 [D] s_b_17_3 = sym_89785_0_value uint8_t */
    auto s_b_17_3 = emitter.load_local(DV_sym_89785_0_value, emitter.context().types().u8());
    /* execute.simd:6305 [D] s_b_17_4 = (u64)s_b_17_3 */
    auto s_b_17_4 = emitter.zx(s_b_17_3, emitter.context().types().u64());
    /* execute.simd:6305 [D] s_b_17_5: WriteRegBank 2:s_b_17_2 = s_b_17_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_17_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_17_4);
    /* execute.simd:6306 [F] s_b_17_6 = constant u64 0 (const) */
    /* execute.simd:6306 [F] s_b_17_7: WriteRegBank 3:s_b_17_2 = s_b_17_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_17_8: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_15,  */
  fixed_block_b_18: 
  {
    /* execute.simd:3773 [D] s_b_18_0 = sym_89783_3_parameter_addr uint64_t */
    auto s_b_18_0 = emitter.load_local(DV_sym_89783_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_18_1 = Load 2 s_b_18_0 => sym_89793_0_value */
    auto s_b_18_1 = emitter.load_memory(s_b_18_0, emitter.context().types().u16());
    emitter.store_local(DV_sym_89793_0_value, s_b_18_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_18_0, s_b_18_1, emitter.const_u8(2));
    }
    /* execute.simd:3774 [F] s_b_18_2=sym_14448_3_parameter_inst.rt2 (const) */
    /* execute.simd:3774 [D] s_b_18_3 = sym_89793_0_value uint16_t */
    auto s_b_18_3 = emitter.load_local(DV_sym_89793_0_value, emitter.context().types().u16());
    /* execute.simd:6312 [D] s_b_18_4 = (u64)s_b_18_3 */
    auto s_b_18_4 = emitter.zx(s_b_18_3, emitter.context().types().u64());
    /* execute.simd:6312 [D] s_b_18_5: WriteRegBank 2:s_b_18_2 = s_b_18_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_18_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_18_4);
    /* execute.simd:6313 [F] s_b_18_6 = constant u64 0 (const) */
    /* execute.simd:6313 [F] s_b_18_7: WriteRegBank 3:s_b_18_2 = s_b_18_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_18_8: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_15,  */
  fixed_block_b_19: 
  {
    /* execute.simd:3787 [D] s_b_19_0 = sym_89783_3_parameter_addr uint64_t */
    auto s_b_19_0 = emitter.load_local(DV_sym_89783_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_19_1 = Load 8 s_b_19_0 => sym_89807_0_value */
    auto s_b_19_1 = emitter.load_memory(s_b_19_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_89807_0_value, s_b_19_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_19_0, s_b_19_1, emitter.const_u8(8));
    }
    /* execute.simd:3788 [F] s_b_19_2=sym_14448_3_parameter_inst.rt2 (const) */
    /* execute.simd:3788 [D] s_b_19_3 = sym_89807_0_value uint64_t */
    auto s_b_19_3 = emitter.load_local(DV_sym_89807_0_value, emitter.context().types().u64());
    /* execute.simd:6326 [D] s_b_19_4: WriteRegBank 2:s_b_19_2 = s_b_19_3 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_19_3,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_19_3);
    /* execute.simd:6327 [F] s_b_19_5 = constant u64 0 (const) */
    /* execute.simd:6327 [F] s_b_19_6: WriteRegBank 3:s_b_19_2 = s_b_19_5 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_19_7: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_15,  */
  fixed_block_b_20: 
  {
    /* execute.simd:3795 [D] s_b_20_0 = sym_89783_3_parameter_addr uint64_t */
    auto s_b_20_0 = emitter.load_local(DV_sym_89783_3_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_20_1 = Load 8 s_b_20_0 => sym_89814_0_vl */
    auto s_b_20_1 = emitter.load_memory(s_b_20_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_89814_0_vl, s_b_20_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_20_0, s_b_20_1, emitter.const_u8(8));
    }
    /* execute.simd:3796 [F] s_b_20_2 = constant u64 8 (const) */
    /* execute.simd:3796 [D] s_b_20_3 = s_b_20_0+s_b_20_2 */
    auto s_b_20_3 = emitter.add(s_b_20_0, emitter.const_u64((uint64_t)8ULL));
    /* ???:4294967295 [D] s_b_20_4 = Load 8 s_b_20_3 => sym_89820_0_vh */
    auto s_b_20_4 = emitter.load_memory(s_b_20_3, emitter.context().types().u64());
    emitter.store_local(DV_sym_89820_0_vh, s_b_20_4);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_20_3, s_b_20_4, emitter.const_u8(8));
    }
    /* execute.simd:3797 [F] s_b_20_5=sym_14448_3_parameter_inst.rt2 (const) */
    /* execute.simd:3797 [D] s_b_20_6 = sym_89814_0_vl uint64_t */
    auto s_b_20_6 = emitter.load_local(DV_sym_89814_0_vl, emitter.context().types().u64());
    /* execute.simd:3797 [D] s_b_20_7 = sym_89820_0_vh uint64_t */
    auto s_b_20_7 = emitter.load_local(DV_sym_89820_0_vh, emitter.context().types().u64());
    /* execute.simd:6333 [D] s_b_20_8: WriteRegBank 2:s_b_20_5 = s_b_20_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_20_6,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_20_6);
    /* execute.simd:6334 [D] s_b_20_9: WriteRegBank 3:s_b_20_5 = s_b_20_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),s_b_20_7,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),s_b_20_7);
    /* execute.simd:0 [F] s_b_20_10: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_ldr_reg(const arm64_decode_a64_LS_REG_REG_OFF&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_98659_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint8_t CV_sym_15015_0_shift;
  uint64_t CV_sym_15042_0_rm;
  auto DV_sym_15042_0_rm = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_15140_0_address = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_15152_0_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_15156_0_v32 = emitter.alloc_local(emitter.context().types().u32(), false);
  uint8_t CV_sym_97971_0_replaced_parameter_shift;
  auto DV_sym_98593_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_97947_1__R_s_b_2_5 = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_98242_1_temporary_value;
  auto DV_sym_98242_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint8_t CV_sym_98303_0_replaced_parameter_shift;
  uint8_t CV_sym_97750_0_replaced_parameter_shift;
  uint8_t CV_sym_98137_0_replaced_parameter_shift;
  uint64_t CV_sym_98408_1_temporary_value;
  auto DV_sym_98408_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_98088_1_temporary_value;
  auto DV_sym_98088_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_98637_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_98491_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_97867_1_temporary_value;
  auto DV_sym_97867_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_98535_1__R_s_b_43_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:1245 [F] s_b_0_0=sym_15004_3_parameter_inst.S (const) */
    /* execute.a64:1245 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:1245 [F] s_b_0_2 = constant u32 0 (const) */
    /* execute.a64:1245 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.S) == (uint32_t)0ULL));
    /* execute.a64:1245 [F] s_b_0_4 = constant u8 0 (const) */
    /* execute.a64:1245 [F] s_b_0_5=sym_15004_3_parameter_inst.size (const) */
    /* execute.a64:1245 [F] s_b_0_6 = (u8)s_b_0_5 (const) */
    /* execute.a64:1245 [F] s_b_0_7: Select s_b_0_3 ? s_b_0_4 : s_b_0_6 (const) */
    uint8_t s_b_0_7 = ((uint8_t)(s_b_0_3 ? ((uint8_t)0ULL) : (((uint8_t)insn.size))));
    /* execute.a64:1245 [F] s_b_0_8: sym_15015_0_shift = s_b_0_7 (const), dominates: s_b_1_1 s_b_4_1 s_b_6_1 s_b_8_1  */
    CV_sym_15015_0_shift = s_b_0_7;
    /* execute.a64:1248 [F] s_b_0_9=sym_15004_3_parameter_inst.option0 (const) */
    /* execute.a64:1248 [F] s_b_0_10 = (u32)s_b_0_9 (const) */
    /* execute.a64:1248 [F] s_b_0_11 = constant u32 0 (const) */
    /* execute.a64:1248 [F] s_b_0_12 = s_b_0_10==s_b_0_11 (const) */
    uint8_t s_b_0_12 = ((uint8_t)(((uint32_t)insn.option0) == (uint32_t)0ULL));
    /* execute.a64:1248 [F] s_b_0_13=sym_15004_3_parameter_inst.option21 (const) */
    /* execute.a64:1248 [F] s_b_0_14 = (u32)s_b_0_13 (const) */
    /* execute.a64:1248 [F] s_b_0_15 = constant u32 1 (const) */
    /* execute.a64:1248 [F] s_b_0_16 = s_b_0_14==s_b_0_15 (const) */
    uint8_t s_b_0_16 = ((uint8_t)(((uint32_t)insn.option21) == (uint32_t)1ULL));
    /* ???:4294967295 [F] s_b_0_17 = constant u8 0 (const) */
    /* ???:4294967295 [F] s_b_0_18 = s_b_0_12!=s_b_0_17 (const) */
    uint8_t s_b_0_18 = ((uint8_t)(s_b_0_12 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_0_19 = s_b_0_16!=s_b_0_17 (const) */
    uint8_t s_b_0_19 = ((uint8_t)(s_b_0_16 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_0_20 = s_b_0_18&s_b_0_19 (const) */
    uint8_t s_b_0_20 = ((uint8_t)(s_b_0_18 & s_b_0_19));
    /* execute.a64:1248 [F] s_b_0_21: If s_b_0_20: Jump b_1 else b_3 (const) */
    if (s_b_0_20) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:1249 [F] s_b_1_0=sym_15004_3_parameter_inst.rm (const) */
    /* execute.a64:1249 [F] s_b_1_1 = sym_15015_0_shift (const) uint8_t */
    uint8_t s_b_1_1 = CV_sym_15015_0_shift;
    /* ???:4294967295 [F] s_b_1_2: sym_97750_0_replaced_parameter_shift = s_b_1_1 (const), dominates: s_b_18_4  */
    CV_sym_97750_0_replaced_parameter_shift = s_b_1_1;
    /* execute.a64:2709 [F] s_b_1_3 = (u32)s_b_1_0 (const) */
    /* execute.a64:2709 [F] s_b_1_4 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_1_5 = s_b_1_3==s_b_1_4 (const) */
    uint8_t s_b_1_5 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_1_6: If s_b_1_5: Jump b_16 else b_17 (const) */
    if (s_b_1_5) 
    {
      goto fixed_block_b_16;
    }
    else 
    {
      goto fixed_block_b_17;
    }
  }
  /* b_9, b_18, b_23, b_26, b_29,  */
  fixed_block_b_2: 
  {
    /* execute.a64:2793 [F] s_b_2_0=sym_15004_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_2_1 = (u32)s_b_2_0 (const) */
    /* execute.a64:2793 [F] s_b_2_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_2_3 = s_b_2_1==s_b_2_2 (const) */
    uint8_t s_b_2_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_2_4: If s_b_2_3: Jump b_32 else b_19 (const) */
    if (s_b_2_3) 
    {
      goto fixed_block_b_32;
    }
    else 
    {
      goto fixed_block_b_19;
    }
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.a64:1250 [F] s_b_3_0=sym_15004_3_parameter_inst.option0 (const) */
    /* execute.a64:1250 [F] s_b_3_1 = (u32)s_b_3_0 (const) */
    /* execute.a64:1250 [F] s_b_3_2 = constant u32 0 (const) */
    /* execute.a64:1250 [F] s_b_3_3 = s_b_3_1==s_b_3_2 (const) */
    uint8_t s_b_3_3 = ((uint8_t)(((uint32_t)insn.option0) == (uint32_t)0ULL));
    /* execute.a64:1250 [F] s_b_3_4=sym_15004_3_parameter_inst.option21 (const) */
    /* execute.a64:1250 [F] s_b_3_5 = (u32)s_b_3_4 (const) */
    /* execute.a64:1250 [F] s_b_3_6 = constant u32 3 (const) */
    /* execute.a64:1250 [F] s_b_3_7 = s_b_3_5==s_b_3_6 (const) */
    uint8_t s_b_3_7 = ((uint8_t)(((uint32_t)insn.option21) == (uint32_t)3ULL));
    /* ???:4294967295 [F] s_b_3_8 = constant u8 0 (const) */
    /* ???:4294967295 [F] s_b_3_9 = s_b_3_3!=s_b_3_8 (const) */
    uint8_t s_b_3_9 = ((uint8_t)(s_b_3_3 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_3_10 = s_b_3_7!=s_b_3_8 (const) */
    uint8_t s_b_3_10 = ((uint8_t)(s_b_3_7 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_3_11 = s_b_3_9&s_b_3_10 (const) */
    uint8_t s_b_3_11 = ((uint8_t)(s_b_3_9 & s_b_3_10));
    /* execute.a64:1250 [F] s_b_3_12: If s_b_3_11: Jump b_4 else b_5 (const) */
    if (s_b_3_11) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_3,  */
  fixed_block_b_4: 
  {
    /* execute.a64:1251 [F] s_b_4_0=sym_15004_3_parameter_inst.rm (const) */
    /* execute.a64:1251 [F] s_b_4_1 = sym_15015_0_shift (const) uint8_t */
    uint8_t s_b_4_1 = CV_sym_15015_0_shift;
    /* ???:4294967295 [F] s_b_4_2: sym_97971_0_replaced_parameter_shift = s_b_4_1 (const), dominates: s_b_23_5  */
    CV_sym_97971_0_replaced_parameter_shift = s_b_4_1;
    /* execute.a64:2709 [F] s_b_4_3 = (u32)s_b_4_0 (const) */
    /* execute.a64:2709 [F] s_b_4_4 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_4_5 = s_b_4_3==s_b_4_4 (const) */
    uint8_t s_b_4_5 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_4_6: If s_b_4_5: Jump b_21 else b_22 (const) */
    if (s_b_4_5) 
    {
      goto fixed_block_b_21;
    }
    else 
    {
      goto fixed_block_b_22;
    }
  }
  /* b_3,  */
  fixed_block_b_5: 
  {
    /* execute.a64:1252 [F] s_b_5_0=sym_15004_3_parameter_inst.option0 (const) */
    /* execute.a64:1252 [F] s_b_5_1 = (u32)s_b_5_0 (const) */
    /* execute.a64:1252 [F] s_b_5_2 = constant u32 1 (const) */
    /* execute.a64:1252 [F] s_b_5_3 = s_b_5_1==s_b_5_2 (const) */
    uint8_t s_b_5_3 = ((uint8_t)(((uint32_t)insn.option0) == (uint32_t)1ULL));
    /* execute.a64:1252 [F] s_b_5_4=sym_15004_3_parameter_inst.option21 (const) */
    /* execute.a64:1252 [F] s_b_5_5 = (u32)s_b_5_4 (const) */
    /* execute.a64:1252 [F] s_b_5_6 = constant u32 1 (const) */
    /* execute.a64:1252 [F] s_b_5_7 = s_b_5_5==s_b_5_6 (const) */
    uint8_t s_b_5_7 = ((uint8_t)(((uint32_t)insn.option21) == (uint32_t)1ULL));
    /* ???:4294967295 [F] s_b_5_8 = constant u8 0 (const) */
    /* ???:4294967295 [F] s_b_5_9 = s_b_5_3!=s_b_5_8 (const) */
    uint8_t s_b_5_9 = ((uint8_t)(s_b_5_3 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_5_10 = s_b_5_7!=s_b_5_8 (const) */
    uint8_t s_b_5_10 = ((uint8_t)(s_b_5_7 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_5_11 = s_b_5_9&s_b_5_10 (const) */
    uint8_t s_b_5_11 = ((uint8_t)(s_b_5_9 & s_b_5_10));
    /* execute.a64:1252 [F] s_b_5_12: If s_b_5_11: Jump b_6 else b_7 (const) */
    if (s_b_5_11) 
    {
      goto fixed_block_b_6;
    }
    else 
    {
      goto fixed_block_b_7;
    }
  }
  /* b_5,  */
  fixed_block_b_6: 
  {
    /* execute.a64:1253 [F] s_b_6_0=sym_15004_3_parameter_inst.rm (const) */
    /* execute.a64:1253 [F] s_b_6_1 = sym_15015_0_shift (const) uint8_t */
    uint8_t s_b_6_1 = CV_sym_15015_0_shift;
    /* ???:4294967295 [F] s_b_6_2: sym_98137_0_replaced_parameter_shift = s_b_6_1 (const), dominates: s_b_26_1  */
    CV_sym_98137_0_replaced_parameter_shift = s_b_6_1;
    /* execute.a64:2714 [F] s_b_6_3 = (u32)s_b_6_0 (const) */
    /* execute.a64:2714 [F] s_b_6_4 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_6_5 = s_b_6_3==s_b_6_4 (const) */
    uint8_t s_b_6_5 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_6_6: If s_b_6_5: Jump b_24 else b_25 (const) */
    if (s_b_6_5) 
    {
      goto fixed_block_b_24;
    }
    else 
    {
      goto fixed_block_b_25;
    }
  }
  /* b_5,  */
  fixed_block_b_7: 
  {
    /* execute.a64:1254 [F] s_b_7_0=sym_15004_3_parameter_inst.option0 (const) */
    /* execute.a64:1254 [F] s_b_7_1 = (u32)s_b_7_0 (const) */
    /* execute.a64:1254 [F] s_b_7_2 = constant u32 1 (const) */
    /* execute.a64:1254 [F] s_b_7_3 = s_b_7_1==s_b_7_2 (const) */
    uint8_t s_b_7_3 = ((uint8_t)(((uint32_t)insn.option0) == (uint32_t)1ULL));
    /* execute.a64:1254 [F] s_b_7_4=sym_15004_3_parameter_inst.option21 (const) */
    /* execute.a64:1254 [F] s_b_7_5 = (u32)s_b_7_4 (const) */
    /* execute.a64:1254 [F] s_b_7_6 = constant u32 3 (const) */
    /* execute.a64:1254 [F] s_b_7_7 = s_b_7_5==s_b_7_6 (const) */
    uint8_t s_b_7_7 = ((uint8_t)(((uint32_t)insn.option21) == (uint32_t)3ULL));
    /* ???:4294967295 [F] s_b_7_8 = constant u8 0 (const) */
    /* ???:4294967295 [F] s_b_7_9 = s_b_7_3!=s_b_7_8 (const) */
    uint8_t s_b_7_9 = ((uint8_t)(s_b_7_3 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_7_10 = s_b_7_7!=s_b_7_8 (const) */
    uint8_t s_b_7_10 = ((uint8_t)(s_b_7_7 != (uint8_t)0ULL));
    /* ???:4294967295 [F] s_b_7_11 = s_b_7_9&s_b_7_10 (const) */
    uint8_t s_b_7_11 = ((uint8_t)(s_b_7_9 & s_b_7_10));
    /* execute.a64:1254 [F] s_b_7_12: If s_b_7_11: Jump b_8 else b_9 (const) */
    if (s_b_7_11) 
    {
      goto fixed_block_b_8;
    }
    else 
    {
      goto fixed_block_b_9;
    }
  }
  /* b_7,  */
  fixed_block_b_8: 
  {
    /* execute.a64:1255 [F] s_b_8_0=sym_15004_3_parameter_inst.rm (const) */
    /* execute.a64:1255 [F] s_b_8_1 = sym_15015_0_shift (const) uint8_t */
    uint8_t s_b_8_1 = CV_sym_15015_0_shift;
    /* ???:4294967295 [F] s_b_8_2: sym_98303_0_replaced_parameter_shift = s_b_8_1 (const), dominates: s_b_29_1  */
    CV_sym_98303_0_replaced_parameter_shift = s_b_8_1;
    /* execute.a64:2714 [F] s_b_8_3 = (u32)s_b_8_0 (const) */
    /* execute.a64:2714 [F] s_b_8_4 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_8_5 = s_b_8_3==s_b_8_4 (const) */
    uint8_t s_b_8_5 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_8_6: If s_b_8_5: Jump b_27 else b_28 (const) */
    if (s_b_8_5) 
    {
      goto fixed_block_b_27;
    }
    else 
    {
      goto fixed_block_b_28;
    }
  }
  /* b_7,  */
  fixed_block_b_9: 
  {
    /* execute.a64:1257 [F] s_b_9_0 = constant u64 0 (const) */
    /* execute.a64:1257 [F] s_b_9_1: sym_15042_0_rm = s_b_9_0 (const), dominates: s_b_20_1  */
    CV_sym_15042_0_rm = (uint64_t)0ULL;
    emitter.store_local(DV_sym_15042_0_rm, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:1258 [D] s_b_9_2 = trap */
    emitter.raise(emitter.const_u8(0));
    /* execute.a64:1257 [F] s_b_9_3: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_20,  */
  fixed_block_b_10: 
  {
    /* execute.a64:1265 [D] s_b_10_0 = sym_15140_0_address uint64_t */
    auto s_b_10_0 = emitter.load_local(DV_sym_15140_0_address, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_10_1 = Load 8 s_b_10_0 => sym_15152_0_value */
    auto s_b_10_1 = emitter.load_memory(s_b_10_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_15152_0_value, s_b_10_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_10_0, s_b_10_1, emitter.const_u8(8));
    }
    /* execute.a64:1265 [F] s_b_10_2: Jump b_11 (const) */
    goto fixed_block_b_11;
  }
  /* b_10, b_12,  */
  fixed_block_b_11: 
  {
    /* execute.a64:1273 [F] s_b_11_0=sym_15004_3_parameter_inst.X (const) */
    /* execute.a64:1273 [F] s_b_11_1 = (u32)s_b_11_0 (const) */
    /* execute.a64:1273 [F] s_b_11_2 = constant u32 1 (const) */
    /* execute.a64:1273 [F] s_b_11_3 = s_b_11_1==s_b_11_2 (const) */
    uint8_t s_b_11_3 = ((uint8_t)(((uint32_t)insn.X) == (uint32_t)1ULL));
    /* execute.a64:1273 [F] s_b_11_4: If s_b_11_3: Jump b_13 else b_15 (const) */
    if (s_b_11_3) 
    {
      goto fixed_block_b_13;
    }
    else 
    {
      goto fixed_block_b_15;
    }
  }
  /* b_20,  */
  fixed_block_b_12: 
  {
    /* execute.a64:1268 [D] s_b_12_0 = sym_15140_0_address uint64_t */
    auto s_b_12_0 = emitter.load_local(DV_sym_15140_0_address, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_12_1 = Load 4 s_b_12_0 => sym_15156_0_v32 */
    auto s_b_12_1 = emitter.load_memory(s_b_12_0, emitter.context().types().u32());
    emitter.store_local(DV_sym_15156_0_v32, s_b_12_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_12_0, s_b_12_1, emitter.const_u8(4));
    }
    /* execute.a64:1270 [D] s_b_12_2 = sym_15156_0_v32 uint32_t */
    auto s_b_12_2 = emitter.load_local(DV_sym_15156_0_v32, emitter.context().types().u32());
    /* execute.a64:1270 [D] s_b_12_3 = (u64)s_b_12_2 */
    auto s_b_12_3 = emitter.zx(s_b_12_2, emitter.context().types().u64());
    /* execute.a64:1270 [D] s_b_12_4: sym_15152_0_value = s_b_12_3, dominates: s_b_13_0 s_b_15_4  */
    emitter.store_local(DV_sym_15152_0_value, s_b_12_3);
    /* execute.a64:1267 [F] s_b_12_5: Jump b_11 (const) */
    goto fixed_block_b_11;
  }
  /* b_11,  */
  fixed_block_b_13: 
  {
    /* execute.a64:1274 [D] s_b_13_0 = sym_15152_0_value uint64_t */
    auto s_b_13_0 = emitter.load_local(DV_sym_15152_0_value, emitter.context().types().u64());
    /* execute.a64:1274 [D] s_b_13_1 = (s32)s_b_13_0 */
    auto s_b_13_1 = emitter.truncate(s_b_13_0, emitter.context().types().s32());
    /* execute.a64:1274 [D] s_b_13_2 = (s64)s_b_13_1 */
    auto s_b_13_2 = emitter.sx(s_b_13_1, emitter.context().types().s64());
    /* execute.a64:1274 [D] s_b_13_3 = (u64)s_b_13_2 */
    auto s_b_13_3 = emitter.reinterpret(s_b_13_2, emitter.context().types().u64());
    /* execute.a64:2754 [F] s_b_13_4=sym_15004_3_parameter_inst.rt (const) */
    /* execute.a64:2754 [D] s_b_13_5: sym_98593_3_parameter_value = s_b_13_3, dominates: s_b_37_1  */
    emitter.store_local(DV_sym_98593_3_parameter_value, s_b_13_3);
    /* execute.a64:2745 [F] s_b_13_6 = (u32)s_b_13_4 (const) */
    /* execute.a64:2745 [F] s_b_13_7 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_13_8 = s_b_13_6==s_b_13_7 (const) */
    uint8_t s_b_13_8 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_13_9: If s_b_13_8: Jump b_14 else b_37 (const) */
    if (s_b_13_8) 
    {
      goto fixed_block_b_14;
    }
    else 
    {
      goto fixed_block_b_37;
    }
  }
  /* b_13, b_30, b_31, b_37, b_38, b_39,  */
  fixed_block_b_14: 
  {
    /* ???:4294967295 [F] s_b_14_0: Return */
    goto fixed_done;
  }
  /* b_11,  */
  fixed_block_b_15: 
  {
    /* execute.a64:1276 [F] s_b_15_0=sym_15004_3_parameter_inst.size (const) */
    /* execute.a64:1276 [F] s_b_15_1 = (u32)s_b_15_0 (const) */
    /* execute.a64:1276 [F] s_b_15_2 = constant u32 3 (const) */
    /* execute.a64:1276 [F] s_b_15_3 = s_b_15_1==s_b_15_2 (const) */
    uint8_t s_b_15_3 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)3ULL));
    /* execute.a64:1276 [D] s_b_15_4 = sym_15152_0_value uint64_t */
    auto s_b_15_4 = emitter.load_local(DV_sym_15152_0_value, emitter.context().types().u64());
    /* execute.a64:1276 [D] s_b_15_5: sym_98491_3_parameter_value = s_b_15_4, dominates: s_b_30_1 s_b_31_1  */
    emitter.store_local(DV_sym_98491_3_parameter_value, s_b_15_4);
    /* execute.a64:2753 [F] s_b_15_6: If s_b_15_3: Jump b_30 else b_31 (const) */
    if (s_b_15_3) 
    {
      goto fixed_block_b_30;
    }
    else 
    {
      goto fixed_block_b_31;
    }
  }
  /* b_1,  */
  fixed_block_b_16: 
  {
    /* execute.a64:2709 [F] s_b_16_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_16_1: sym_97867_1_temporary_value = s_b_16_0 (const), dominates: s_b_18_0  */
    CV_sym_97867_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_97867_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_16_2: Jump b_18 (const) */
    goto fixed_block_b_18;
  }
  /* b_1,  */
  fixed_block_b_17: 
  {
    /* execute.a64:2709 [F] s_b_17_0=sym_15004_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [D] s_b_17_1 = ReadRegBank 1:s_b_17_0 (u32) */
    auto s_b_17_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_17_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_17_2: sym_97867_1_temporary_value = s_b_17_1, dominates: s_b_18_0  */
    emitter.store_local(DV_sym_97867_1_temporary_value, s_b_17_1);
    /* execute.a64:2709 [F] s_b_17_3: Jump b_18 (const) */
    goto fixed_block_b_18;
  }
  /* b_16, b_17,  */
  fixed_block_b_18: 
  {
    /* execute.a64:2709 [D] s_b_18_0 = sym_97867_1_temporary_value uint32_t */
    auto s_b_18_0 = emitter.load_local(DV_sym_97867_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_18_1 = (u64)s_b_18_0 */
    auto s_b_18_1 = emitter.zx(s_b_18_0, emitter.context().types().u64());
    /* execute.a64:2679 [D] s_b_18_2 = (u32)s_b_18_1 */
    auto s_b_18_2 = emitter.truncate(s_b_18_1, emitter.context().types().u32());
    /* execute.a64:2679 [D] s_b_18_3 = (u64)s_b_18_2 */
    auto s_b_18_3 = emitter.zx(s_b_18_2, emitter.context().types().u64());
    /* execute.a64:2679 [F] s_b_18_4 = sym_97750_0_replaced_parameter_shift (const) uint8_t */
    uint8_t s_b_18_4 = CV_sym_97750_0_replaced_parameter_shift;
    /* execute.a64:2679 [F] s_b_18_5 = (u64)s_b_18_4 (const) */
    /* execute.a64:2679 [D] s_b_18_6 = s_b_18_3<<s_b_18_5 */
    auto s_b_18_6 = emitter.shl(s_b_18_3, emitter.const_u64(((uint64_t)s_b_18_4)));
    /* execute.a64:1249 [D] s_b_18_7: sym_15042_0_rm = s_b_18_6, dominates: s_b_20_1  */
    emitter.store_local(DV_sym_15042_0_rm, s_b_18_6);
    /* execute.a64:1249 [F] s_b_18_8: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_2,  */
  fixed_block_b_19: 
  {
    /* execute.a64:2796 [F] s_b_19_0=sym_15004_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_19_1 = ReadRegBank 0:s_b_19_0 (u64) */
    auto s_b_19_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_19_1,emitter.const_u8(8));
    }
    /* execute.a64:2796 [D] s_b_19_2: sym_97947_1__R_s_b_2_5 = s_b_19_1, dominates: s_b_20_0  */
    emitter.store_local(DV_sym_97947_1__R_s_b_2_5, s_b_19_1);
    /* execute.a64:2796 [F] s_b_19_3: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_19, b_36,  */
  fixed_block_b_20: 
  {
    /* execute.a64:1261 [D] s_b_20_0 = sym_97947_1__R_s_b_2_5 uint64_t */
    auto s_b_20_0 = emitter.load_local(DV_sym_97947_1__R_s_b_2_5, emitter.context().types().u64());
    /* execute.a64:1261 [D] s_b_20_1 = sym_15042_0_rm uint64_t */
    auto s_b_20_1 = emitter.load_local(DV_sym_15042_0_rm, emitter.context().types().u64());
    /* execute.a64:1261 [D] s_b_20_2 = s_b_20_0+s_b_20_1 */
    auto s_b_20_2 = emitter.add(s_b_20_0, s_b_20_1);
    /* execute.a64:1261 [D] s_b_20_3: sym_15140_0_address = s_b_20_2, dominates: s_b_10_0 s_b_12_0  */
    emitter.store_local(DV_sym_15140_0_address, s_b_20_2);
    /* execute.a64:1264 [F] s_b_20_4=sym_15004_3_parameter_inst.size (const) */
    /* execute.a64:1264 [F] s_b_20_5 = (u32)s_b_20_4 (const) */
    /* execute.a64:1264 [F] s_b_20_6 = constant u32 3 (const) */
    /* execute.a64:1264 [F] s_b_20_7 = s_b_20_5==s_b_20_6 (const) */
    uint8_t s_b_20_7 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)3ULL));
    /* execute.a64:1264 [F] s_b_20_8: If s_b_20_7: Jump b_10 else b_12 (const) */
    if (s_b_20_7) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_12;
    }
  }
  /* b_4,  */
  fixed_block_b_21: 
  {
    /* execute.a64:2709 [F] s_b_21_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_21_1: sym_98088_1_temporary_value = s_b_21_0 (const), dominates: s_b_23_0  */
    CV_sym_98088_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_98088_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_21_2: Jump b_23 (const) */
    goto fixed_block_b_23;
  }
  /* b_4,  */
  fixed_block_b_22: 
  {
    /* execute.a64:2709 [F] s_b_22_0=sym_15004_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [D] s_b_22_1 = ReadRegBank 1:s_b_22_0 (u32) */
    auto s_b_22_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_22_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_22_2: sym_98088_1_temporary_value = s_b_22_1, dominates: s_b_23_0  */
    emitter.store_local(DV_sym_98088_1_temporary_value, s_b_22_1);
    /* execute.a64:2709 [F] s_b_22_3: Jump b_23 (const) */
    goto fixed_block_b_23;
  }
  /* b_21, b_22,  */
  fixed_block_b_23: 
  {
    /* execute.a64:2709 [D] s_b_23_0 = sym_98088_1_temporary_value uint32_t */
    auto s_b_23_0 = emitter.load_local(DV_sym_98088_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_23_1 = (u64)s_b_23_0 */
    auto s_b_23_1 = emitter.zx(s_b_23_0, emitter.context().types().u64());
    /* execute.a64:2695 [D] s_b_23_2 = (s32)s_b_23_1 */
    auto s_b_23_2 = emitter.truncate(s_b_23_1, emitter.context().types().s32());
    /* execute.a64:2695 [D] s_b_23_3 = (s64)s_b_23_2 */
    auto s_b_23_3 = emitter.sx(s_b_23_2, emitter.context().types().s64());
    /* execute.a64:2695 [D] s_b_23_4 = (u64)s_b_23_3 */
    auto s_b_23_4 = emitter.reinterpret(s_b_23_3, emitter.context().types().u64());
    /* execute.a64:2695 [F] s_b_23_5 = sym_97971_0_replaced_parameter_shift (const) uint8_t */
    uint8_t s_b_23_5 = CV_sym_97971_0_replaced_parameter_shift;
    /* execute.a64:2695 [F] s_b_23_6 = (u64)s_b_23_5 (const) */
    /* execute.a64:2695 [D] s_b_23_7 = s_b_23_4<<s_b_23_6 */
    auto s_b_23_7 = emitter.shl(s_b_23_4, emitter.const_u64(((uint64_t)s_b_23_5)));
    /* execute.a64:1251 [D] s_b_23_8: sym_15042_0_rm = s_b_23_7, dominates: s_b_20_1  */
    emitter.store_local(DV_sym_15042_0_rm, s_b_23_7);
    /* execute.a64:1251 [F] s_b_23_9: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_6,  */
  fixed_block_b_24: 
  {
    /* execute.a64:2714 [F] s_b_24_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_24_1: sym_98242_1_temporary_value = s_b_24_0 (const), dominates: s_b_26_0  */
    CV_sym_98242_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_98242_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_24_2: Jump b_26 (const) */
    goto fixed_block_b_26;
  }
  /* b_6,  */
  fixed_block_b_25: 
  {
    /* execute.a64:2714 [F] s_b_25_0=sym_15004_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_25_1 = ReadRegBank 0:s_b_25_0 (u64) */
    auto s_b_25_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_25_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_25_2: sym_98242_1_temporary_value = s_b_25_1, dominates: s_b_26_0  */
    emitter.store_local(DV_sym_98242_1_temporary_value, s_b_25_1);
    /* execute.a64:2714 [F] s_b_25_3: Jump b_26 (const) */
    goto fixed_block_b_26;
  }
  /* b_24, b_25,  */
  fixed_block_b_26: 
  {
    /* execute.a64:2714 [D] s_b_26_0 = sym_98242_1_temporary_value uint64_t */
    auto s_b_26_0 = emitter.load_local(DV_sym_98242_1_temporary_value, emitter.context().types().u64());
    /* execute.a64:2683 [F] s_b_26_1 = sym_98137_0_replaced_parameter_shift (const) uint8_t */
    uint8_t s_b_26_1 = CV_sym_98137_0_replaced_parameter_shift;
    /* execute.a64:2683 [F] s_b_26_2 = (u64)s_b_26_1 (const) */
    /* execute.a64:2683 [D] s_b_26_3 = s_b_26_0<<s_b_26_2 */
    auto s_b_26_3 = emitter.shl(s_b_26_0, emitter.const_u64(((uint64_t)s_b_26_1)));
    /* execute.a64:1253 [D] s_b_26_4: sym_15042_0_rm = s_b_26_3, dominates: s_b_20_1  */
    emitter.store_local(DV_sym_15042_0_rm, s_b_26_3);
    /* execute.a64:1253 [F] s_b_26_5: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_8,  */
  fixed_block_b_27: 
  {
    /* execute.a64:2714 [F] s_b_27_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_27_1: sym_98408_1_temporary_value = s_b_27_0 (const), dominates: s_b_29_0  */
    CV_sym_98408_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_98408_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_27_2: Jump b_29 (const) */
    goto fixed_block_b_29;
  }
  /* b_8,  */
  fixed_block_b_28: 
  {
    /* execute.a64:2714 [F] s_b_28_0=sym_15004_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_28_1 = ReadRegBank 0:s_b_28_0 (u64) */
    auto s_b_28_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_28_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_28_2: sym_98408_1_temporary_value = s_b_28_1, dominates: s_b_29_0  */
    emitter.store_local(DV_sym_98408_1_temporary_value, s_b_28_1);
    /* execute.a64:2714 [F] s_b_28_3: Jump b_29 (const) */
    goto fixed_block_b_29;
  }
  /* b_27, b_28,  */
  fixed_block_b_29: 
  {
    /* execute.a64:2714 [D] s_b_29_0 = sym_98408_1_temporary_value uint64_t */
    auto s_b_29_0 = emitter.load_local(DV_sym_98408_1_temporary_value, emitter.context().types().u64());
    /* execute.a64:2699 [F] s_b_29_1 = sym_98303_0_replaced_parameter_shift (const) uint8_t */
    uint8_t s_b_29_1 = CV_sym_98303_0_replaced_parameter_shift;
    /* execute.a64:2699 [F] s_b_29_2 = (u64)s_b_29_1 (const) */
    /* execute.a64:2699 [D] s_b_29_3 = s_b_29_0<<s_b_29_2 */
    auto s_b_29_3 = emitter.shl(s_b_29_0, emitter.const_u64(((uint64_t)s_b_29_1)));
    /* execute.a64:1255 [D] s_b_29_4: sym_15042_0_rm = s_b_29_3, dominates: s_b_20_1  */
    emitter.store_local(DV_sym_15042_0_rm, s_b_29_3);
    /* execute.a64:1255 [F] s_b_29_5: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_15,  */
  fixed_block_b_30: 
  {
    /* execute.a64:2754 [F] s_b_30_0=sym_15004_3_parameter_inst.rt (const) */
    /* execute.a64:2754 [D] s_b_30_1 = sym_98491_3_parameter_value uint64_t */
    auto s_b_30_1 = emitter.load_local(DV_sym_98491_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2754 [D] s_b_30_2: sym_98637_3_parameter_value = s_b_30_1, dominates: s_b_38_1  */
    emitter.store_local(DV_sym_98637_3_parameter_value, s_b_30_1);
    /* execute.a64:2745 [F] s_b_30_3 = (u32)s_b_30_0 (const) */
    /* execute.a64:2745 [F] s_b_30_4 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_30_5 = s_b_30_3==s_b_30_4 (const) */
    uint8_t s_b_30_5 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_30_6: If s_b_30_5: Jump b_14 else b_38 (const) */
    if (s_b_30_5) 
    {
      goto fixed_block_b_14;
    }
    else 
    {
      goto fixed_block_b_38;
    }
  }
  /* b_15,  */
  fixed_block_b_31: 
  {
    /* execute.a64:2756 [F] s_b_31_0=sym_15004_3_parameter_inst.rt (const) */
    /* execute.a64:2756 [D] s_b_31_1 = sym_98491_3_parameter_value uint64_t */
    auto s_b_31_1 = emitter.load_local(DV_sym_98491_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_31_2 = (u32)s_b_31_1 */
    auto s_b_31_2 = emitter.truncate(s_b_31_1, emitter.context().types().u32());
    /* execute.a64:2756 [D] s_b_31_3 = (u64)s_b_31_2 */
    auto s_b_31_3 = emitter.zx(s_b_31_2, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_31_4: sym_98659_3_parameter_value = s_b_31_3, dominates: s_b_39_1  */
    emitter.store_local(DV_sym_98659_3_parameter_value, s_b_31_3);
    /* execute.a64:2745 [F] s_b_31_5 = (u32)s_b_31_0 (const) */
    /* execute.a64:2745 [F] s_b_31_6 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_31_7 = s_b_31_5==s_b_31_6 (const) */
    uint8_t s_b_31_7 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_31_8: If s_b_31_7: Jump b_14 else b_39 (const) */
    if (s_b_31_7) 
    {
      goto fixed_block_b_14;
    }
    else 
    {
      goto fixed_block_b_39;
    }
  }
  /* b_2,  */
  fixed_block_b_32: 
  {
    /* execute.a64:2764 [F] s_b_32_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_32_1 = __builtin_get_feature */
    uint32_t s_b_32_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_32_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_32_3 = s_b_32_1==s_b_32_2 (const) */
    uint8_t s_b_32_3 = ((uint8_t)(s_b_32_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_32_4: If s_b_32_3: Jump b_33 else b_40 (const) */
    if (s_b_32_3) 
    {
      goto fixed_block_b_33;
    }
    else 
    {
      goto fixed_block_b_40;
    }
  }
  /* b_32,  */
  fixed_block_b_33: 
  {
    /* execute.a64:2765 [D] s_b_33_0 = ReadReg 21 (u64) */
    auto s_b_33_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_33_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_33_1: sym_98535_1__R_s_b_43_0 = s_b_33_0, dominates: s_b_36_0  */
    emitter.store_local(DV_sym_98535_1__R_s_b_43_0, s_b_33_0);
    /* execute.a64:2765 [F] s_b_33_2: Jump b_36 (const) */
    goto fixed_block_b_36;
  }
  /* b_40,  */
  fixed_block_b_34: 
  {
    /* execute.a64:2768 [D] s_b_34_0 = ReadReg 21 (u64) */
    auto s_b_34_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_34_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_34_1: sym_98535_1__R_s_b_43_0 = s_b_34_0, dominates: s_b_36_0  */
    emitter.store_local(DV_sym_98535_1__R_s_b_43_0, s_b_34_0);
    /* execute.a64:2768 [F] s_b_34_2: Jump b_36 (const) */
    goto fixed_block_b_36;
  }
  /* b_40,  */
  fixed_block_b_35: 
  {
    /* execute.a64:2770 [D] s_b_35_0 = ReadReg 22 (u64) */
    auto s_b_35_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_35_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_35_1: sym_98535_1__R_s_b_43_0 = s_b_35_0, dominates: s_b_36_0  */
    emitter.store_local(DV_sym_98535_1__R_s_b_43_0, s_b_35_0);
    /* execute.a64:2770 [F] s_b_35_2: Jump b_36 (const) */
    goto fixed_block_b_36;
  }
  /* b_33, b_34, b_35,  */
  fixed_block_b_36: 
  {
    /* execute.a64:2794 [D] s_b_36_0 = sym_98535_1__R_s_b_43_0 uint64_t */
    auto s_b_36_0 = emitter.load_local(DV_sym_98535_1__R_s_b_43_0, emitter.context().types().u64());
    /* execute.a64:2794 [D] s_b_36_1: sym_97947_1__R_s_b_2_5 = s_b_36_0, dominates: s_b_20_0  */
    emitter.store_local(DV_sym_97947_1__R_s_b_2_5, s_b_36_0);
    /* execute.a64:2794 [F] s_b_36_2: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_13,  */
  fixed_block_b_37: 
  {
    /* execute.a64:2747 [F] s_b_37_0=sym_15004_3_parameter_inst.rt (const) */
    /* execute.a64:2747 [D] s_b_37_1 = sym_98593_3_parameter_value uint64_t */
    auto s_b_37_1 = emitter.load_local(DV_sym_98593_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_37_2: WriteRegBank 0:s_b_37_0 = s_b_37_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_37_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_37_1);
    /* execute.a64:0 [F] s_b_37_3: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_30,  */
  fixed_block_b_38: 
  {
    /* execute.a64:2747 [F] s_b_38_0=sym_15004_3_parameter_inst.rt (const) */
    /* execute.a64:2747 [D] s_b_38_1 = sym_98637_3_parameter_value uint64_t */
    auto s_b_38_1 = emitter.load_local(DV_sym_98637_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_38_2: WriteRegBank 0:s_b_38_0 = s_b_38_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_38_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_38_1);
    /* execute.a64:0 [F] s_b_38_3: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_31,  */
  fixed_block_b_39: 
  {
    /* execute.a64:2747 [F] s_b_39_0=sym_15004_3_parameter_inst.rt (const) */
    /* execute.a64:2747 [D] s_b_39_1 = sym_98659_3_parameter_value uint64_t */
    auto s_b_39_1 = emitter.load_local(DV_sym_98659_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_39_2: WriteRegBank 0:s_b_39_0 = s_b_39_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_39_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_39_1);
    /* execute.a64:0 [F] s_b_39_3: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_32,  */
  fixed_block_b_40: 
  {
    /* execute.a64:3075 [F] s_b_40_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_40_1 = __builtin_get_feature */
    uint32_t s_b_40_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_40_2 = (u8)s_b_40_1 (const) */
    /* execute.a64:2767 [F] s_b_40_3 = (u32)s_b_40_2 (const) */
    /* execute.a64:2767 [F] s_b_40_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_40_5 = s_b_40_3==s_b_40_4 (const) */
    uint8_t s_b_40_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_40_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_40_6: If s_b_40_5: Jump b_34 else b_35 (const) */
    if (s_b_40_5) 
    {
      goto fixed_block_b_34;
    }
    else 
    {
      goto fixed_block_b_35;
    }
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_ldri(const arm64_decode_a64_LS_REG_UIMM&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_16076_0_addr = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_16088_0_value;
  auto DV_sym_16088_0_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_16101_0_v2 = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_110518_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_110562_1__R_s_b_10_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_110620_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_110642_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_110498_1__R_s_b_0_5 = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2793 [F] s_b_0_0=sym_16068_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_11 else b_6 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_11;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_7,  */
  fixed_block_b_1: 
  {
    /* execute.a64:1525 [D] s_b_1_0 = sym_16076_0_addr uint64_t */
    auto s_b_1_0 = emitter.load_local(DV_sym_16076_0_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_1_1 = Load 8 s_b_1_0 => sym_16088_0_value */
    auto s_b_1_1 = emitter.load_memory(s_b_1_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_16088_0_value, s_b_1_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_1_0, s_b_1_1, emitter.const_u8(8));
    }
    /* execute.a64:1525 [F] s_b_1_2: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1, b_4, b_5,  */
  fixed_block_b_2: 
  {
    /* execute.a64:1536 [F] s_b_2_0=sym_16068_3_parameter_inst.size (const) */
    /* execute.a64:1536 [F] s_b_2_1 = (u32)s_b_2_0 (const) */
    /* execute.a64:1536 [F] s_b_2_2 = constant u32 3 (const) */
    /* execute.a64:1536 [F] s_b_2_3 = s_b_2_1==s_b_2_2 (const) */
    uint8_t s_b_2_3 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)3ULL));
    /* execute.a64:1536 [D] s_b_2_4 = sym_16088_0_value uint64_t */
    auto s_b_2_4 = emitter.load_local(DV_sym_16088_0_value, emitter.context().types().u64());
    /* execute.a64:1536 [D] s_b_2_5: sym_110518_3_parameter_value = s_b_2_4, dominates: s_b_8_1 s_b_9_1  */
    emitter.store_local(DV_sym_110518_3_parameter_value, s_b_2_4);
    /* execute.a64:2753 [F] s_b_2_6: If s_b_2_3: Jump b_8 else b_9 (const) */
    if (s_b_2_3) 
    {
      goto fixed_block_b_8;
    }
    else 
    {
      goto fixed_block_b_9;
    }
  }
  /* b_7,  */
  fixed_block_b_3: 
  {
    /* execute.a64:1526 [F] s_b_3_0=sym_16068_3_parameter_inst.size (const) */
    /* execute.a64:1526 [F] s_b_3_1 = (u32)s_b_3_0 (const) */
    /* execute.a64:1526 [F] s_b_3_2 = constant u32 2 (const) */
    /* execute.a64:1526 [F] s_b_3_3 = s_b_3_1==s_b_3_2 (const) */
    uint8_t s_b_3_3 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)2ULL));
    /* execute.a64:1526 [F] s_b_3_4: If s_b_3_3: Jump b_4 else b_5 (const) */
    if (s_b_3_3) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_3,  */
  fixed_block_b_4: 
  {
    /* execute.a64:1528 [D] s_b_4_0 = sym_16076_0_addr uint64_t */
    auto s_b_4_0 = emitter.load_local(DV_sym_16076_0_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_4_1 = Load 4 s_b_4_0 => sym_16101_0_v2 */
    auto s_b_4_1 = emitter.load_memory(s_b_4_0, emitter.context().types().u32());
    emitter.store_local(DV_sym_16101_0_v2, s_b_4_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_4_0, s_b_4_1, emitter.const_u8(4));
    }
    /* execute.a64:1530 [D] s_b_4_2 = sym_16101_0_v2 uint32_t */
    auto s_b_4_2 = emitter.load_local(DV_sym_16101_0_v2, emitter.context().types().u32());
    /* execute.a64:1530 [D] s_b_4_3 = (u64)s_b_4_2 */
    auto s_b_4_3 = emitter.zx(s_b_4_2, emitter.context().types().u64());
    /* execute.a64:1530 [D] s_b_4_4: sym_16088_0_value = s_b_4_3, dominates: s_b_2_4  */
    emitter.store_local(DV_sym_16088_0_value, s_b_4_3);
    /* execute.a64:1527 [F] s_b_4_5: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_3,  */
  fixed_block_b_5: 
  {
    /* execute.a64:1532 [F] s_b_5_0 = constant u64 0 (const) */
    /* execute.a64:1532 [F] s_b_5_1: sym_16088_0_value = s_b_5_0 (const), dominates: s_b_2_4  */
    CV_sym_16088_0_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_16088_0_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:1533 [D] s_b_5_2 = trap */
    emitter.raise(emitter.const_u8(0));
    /* execute.a64:1532 [F] s_b_5_3: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_0,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2796 [F] s_b_6_0=sym_16068_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_6_1 = ReadRegBank 0:s_b_6_0 (u64) */
    auto s_b_6_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_6_1,emitter.const_u8(8));
    }
    /* execute.a64:2796 [D] s_b_6_2: sym_110498_1__R_s_b_0_5 = s_b_6_1, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_110498_1__R_s_b_0_5, s_b_6_1);
    /* execute.a64:2796 [F] s_b_6_3: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_6, b_15,  */
  fixed_block_b_7: 
  {
    /* execute.a64:1521 [D] s_b_7_0 = sym_110498_1__R_s_b_0_5 uint64_t */
    auto s_b_7_0 = emitter.load_local(DV_sym_110498_1__R_s_b_0_5, emitter.context().types().u64());
    /* execute.a64:1521 [F] s_b_7_1=sym_16068_3_parameter_inst.immu64 (const) */
    /* execute.a64:1521 [D] s_b_7_2 = s_b_7_0+s_b_7_1 */
    auto s_b_7_2 = emitter.add(s_b_7_0, emitter.const_u64(insn.immu64));
    /* execute.a64:1521 [D] s_b_7_3: sym_16076_0_addr = s_b_7_2, dominates: s_b_1_0 s_b_4_0  */
    emitter.store_local(DV_sym_16076_0_addr, s_b_7_2);
    /* execute.a64:1524 [F] s_b_7_4=sym_16068_3_parameter_inst.size (const) */
    /* execute.a64:1524 [F] s_b_7_5 = (u32)s_b_7_4 (const) */
    /* execute.a64:1524 [F] s_b_7_6 = constant u32 3 (const) */
    /* execute.a64:1524 [F] s_b_7_7 = s_b_7_5==s_b_7_6 (const) */
    uint8_t s_b_7_7 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)3ULL));
    /* execute.a64:1524 [F] s_b_7_8: If s_b_7_7: Jump b_1 else b_3 (const) */
    if (s_b_7_7) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_2,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2754 [F] s_b_8_0=sym_16068_3_parameter_inst.rt (const) */
    /* execute.a64:2754 [D] s_b_8_1 = sym_110518_3_parameter_value uint64_t */
    auto s_b_8_1 = emitter.load_local(DV_sym_110518_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2754 [D] s_b_8_2: sym_110620_3_parameter_value = s_b_8_1, dominates: s_b_16_1  */
    emitter.store_local(DV_sym_110620_3_parameter_value, s_b_8_1);
    /* execute.a64:2745 [F] s_b_8_3 = (u32)s_b_8_0 (const) */
    /* execute.a64:2745 [F] s_b_8_4 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_8_5 = s_b_8_3==s_b_8_4 (const) */
    uint8_t s_b_8_5 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_8_6: If s_b_8_5: Jump b_10 else b_16 (const) */
    if (s_b_8_5) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_16;
    }
  }
  /* b_2,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2756 [F] s_b_9_0=sym_16068_3_parameter_inst.rt (const) */
    /* execute.a64:2756 [D] s_b_9_1 = sym_110518_3_parameter_value uint64_t */
    auto s_b_9_1 = emitter.load_local(DV_sym_110518_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_9_2 = (u32)s_b_9_1 */
    auto s_b_9_2 = emitter.truncate(s_b_9_1, emitter.context().types().u32());
    /* execute.a64:2756 [D] s_b_9_3 = (u64)s_b_9_2 */
    auto s_b_9_3 = emitter.zx(s_b_9_2, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_9_4: sym_110642_3_parameter_value = s_b_9_3, dominates: s_b_17_1  */
    emitter.store_local(DV_sym_110642_3_parameter_value, s_b_9_3);
    /* execute.a64:2745 [F] s_b_9_5 = (u32)s_b_9_0 (const) */
    /* execute.a64:2745 [F] s_b_9_6 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_9_7 = s_b_9_5==s_b_9_6 (const) */
    uint8_t s_b_9_7 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_9_8: If s_b_9_7: Jump b_10 else b_17 (const) */
    if (s_b_9_7) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_17;
    }
  }
  /* b_8, b_9, b_16, b_17,  */
  fixed_block_b_10: 
  {
    /* ???:4294967295 [F] s_b_10_0: Return */
    goto fixed_done;
  }
  /* b_0,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2764 [F] s_b_11_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_11_1 = __builtin_get_feature */
    uint32_t s_b_11_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_11_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_11_3 = s_b_11_1==s_b_11_2 (const) */
    uint8_t s_b_11_3 = ((uint8_t)(s_b_11_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_11_4: If s_b_11_3: Jump b_12 else b_18 (const) */
    if (s_b_11_3) 
    {
      goto fixed_block_b_12;
    }
    else 
    {
      goto fixed_block_b_18;
    }
  }
  /* b_11,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2765 [D] s_b_12_0 = ReadReg 21 (u64) */
    auto s_b_12_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_12_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_12_1: sym_110562_1__R_s_b_10_0 = s_b_12_0, dominates: s_b_15_0  */
    emitter.store_local(DV_sym_110562_1__R_s_b_10_0, s_b_12_0);
    /* execute.a64:2765 [F] s_b_12_2: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_18,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2768 [D] s_b_13_0 = ReadReg 21 (u64) */
    auto s_b_13_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_13_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_13_1: sym_110562_1__R_s_b_10_0 = s_b_13_0, dominates: s_b_15_0  */
    emitter.store_local(DV_sym_110562_1__R_s_b_10_0, s_b_13_0);
    /* execute.a64:2768 [F] s_b_13_2: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_18,  */
  fixed_block_b_14: 
  {
    /* execute.a64:2770 [D] s_b_14_0 = ReadReg 22 (u64) */
    auto s_b_14_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_14_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_14_1: sym_110562_1__R_s_b_10_0 = s_b_14_0, dominates: s_b_15_0  */
    emitter.store_local(DV_sym_110562_1__R_s_b_10_0, s_b_14_0);
    /* execute.a64:2770 [F] s_b_14_2: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_12, b_13, b_14,  */
  fixed_block_b_15: 
  {
    /* execute.a64:2794 [D] s_b_15_0 = sym_110562_1__R_s_b_10_0 uint64_t */
    auto s_b_15_0 = emitter.load_local(DV_sym_110562_1__R_s_b_10_0, emitter.context().types().u64());
    /* execute.a64:2794 [D] s_b_15_1: sym_110498_1__R_s_b_0_5 = s_b_15_0, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_110498_1__R_s_b_0_5, s_b_15_0);
    /* execute.a64:2794 [F] s_b_15_2: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_8,  */
  fixed_block_b_16: 
  {
    /* execute.a64:2747 [F] s_b_16_0=sym_16068_3_parameter_inst.rt (const) */
    /* execute.a64:2747 [D] s_b_16_1 = sym_110620_3_parameter_value uint64_t */
    auto s_b_16_1 = emitter.load_local(DV_sym_110620_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_16_2: WriteRegBank 0:s_b_16_0 = s_b_16_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_16_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_16_1);
    /* execute.a64:0 [F] s_b_16_3: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_9,  */
  fixed_block_b_17: 
  {
    /* execute.a64:2747 [F] s_b_17_0=sym_16068_3_parameter_inst.rt (const) */
    /* execute.a64:2747 [D] s_b_17_1 = sym_110642_3_parameter_value uint64_t */
    auto s_b_17_1 = emitter.load_local(DV_sym_110642_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_17_2: WriteRegBank 0:s_b_17_0 = s_b_17_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_17_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_17_1);
    /* execute.a64:0 [F] s_b_17_3: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_11,  */
  fixed_block_b_18: 
  {
    /* execute.a64:3075 [F] s_b_18_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_18_1 = __builtin_get_feature */
    uint32_t s_b_18_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_18_2 = (u8)s_b_18_1 (const) */
    /* execute.a64:2767 [F] s_b_18_3 = (u32)s_b_18_2 (const) */
    /* execute.a64:2767 [F] s_b_18_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_18_5 = s_b_18_3==s_b_18_4 (const) */
    uint8_t s_b_18_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_18_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_18_6: If s_b_18_5: Jump b_13 else b_14 (const) */
    if (s_b_18_5) 
    {
      goto fixed_block_b_13;
    }
    else 
    {
      goto fixed_block_b_14;
    }
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_ldur(const arm64_decode_a64_LS_REG_USIMM&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_16224_0_address = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_16241_0_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_16245_0_v32 = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_112357_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_112401_1__R_s_b_7_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_112459_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_112337_1__R_s_b_0_5 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_112481_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2793 [F] s_b_0_0=sym_16218_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_9 else b_4 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_9;
    }
    else 
    {
      goto fixed_block_b_4;
    }
  }
  /* b_5,  */
  fixed_block_b_1: 
  {
    /* execute.a64:1430 [D] s_b_1_0 = sym_16224_0_address uint64_t */
    auto s_b_1_0 = emitter.load_local(DV_sym_16224_0_address, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_1_1 = Load 8 s_b_1_0 => sym_16241_0_value */
    auto s_b_1_1 = emitter.load_memory(s_b_1_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_16241_0_value, s_b_1_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_1_0, s_b_1_1, emitter.const_u8(8));
    }
    /* execute.a64:1430 [F] s_b_1_2: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1, b_3,  */
  fixed_block_b_2: 
  {
    /* execute.a64:1437 [F] s_b_2_0=sym_16218_3_parameter_inst.size (const) */
    /* execute.a64:1437 [F] s_b_2_1 = (u32)s_b_2_0 (const) */
    /* execute.a64:1437 [F] s_b_2_2 = constant u32 3 (const) */
    /* execute.a64:1437 [F] s_b_2_3 = s_b_2_1==s_b_2_2 (const) */
    uint8_t s_b_2_3 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)3ULL));
    /* execute.a64:1437 [D] s_b_2_4 = sym_16241_0_value uint64_t */
    auto s_b_2_4 = emitter.load_local(DV_sym_16241_0_value, emitter.context().types().u64());
    /* execute.a64:1437 [D] s_b_2_5: sym_112357_3_parameter_value = s_b_2_4, dominates: s_b_6_1 s_b_7_1  */
    emitter.store_local(DV_sym_112357_3_parameter_value, s_b_2_4);
    /* execute.a64:2753 [F] s_b_2_6: If s_b_2_3: Jump b_6 else b_7 (const) */
    if (s_b_2_3) 
    {
      goto fixed_block_b_6;
    }
    else 
    {
      goto fixed_block_b_7;
    }
  }
  /* b_5,  */
  fixed_block_b_3: 
  {
    /* execute.a64:1433 [D] s_b_3_0 = sym_16224_0_address uint64_t */
    auto s_b_3_0 = emitter.load_local(DV_sym_16224_0_address, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_3_1 = Load 4 s_b_3_0 => sym_16245_0_v32 */
    auto s_b_3_1 = emitter.load_memory(s_b_3_0, emitter.context().types().u32());
    emitter.store_local(DV_sym_16245_0_v32, s_b_3_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_3_0, s_b_3_1, emitter.const_u8(4));
    }
    /* execute.a64:1434 [D] s_b_3_2 = sym_16245_0_v32 uint32_t */
    auto s_b_3_2 = emitter.load_local(DV_sym_16245_0_v32, emitter.context().types().u32());
    /* execute.a64:1434 [D] s_b_3_3 = (u64)s_b_3_2 */
    auto s_b_3_3 = emitter.zx(s_b_3_2, emitter.context().types().u64());
    /* execute.a64:1434 [D] s_b_3_4: sym_16241_0_value = s_b_3_3, dominates: s_b_2_4  */
    emitter.store_local(DV_sym_16241_0_value, s_b_3_3);
    /* execute.a64:1432 [F] s_b_3_5: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_0,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2796 [F] s_b_4_0=sym_16218_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_4_1 = ReadRegBank 0:s_b_4_0 (u64) */
    auto s_b_4_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_4_1,emitter.const_u8(8));
    }
    /* execute.a64:2796 [D] s_b_4_2: sym_112337_1__R_s_b_0_5 = s_b_4_1, dominates: s_b_5_0  */
    emitter.store_local(DV_sym_112337_1__R_s_b_0_5, s_b_4_1);
    /* execute.a64:2796 [F] s_b_4_3: Jump b_5 (const) */
    goto fixed_block_b_5;
  }
  /* b_4, b_13,  */
  fixed_block_b_5: 
  {
    /* execute.a64:1425 [D] s_b_5_0 = sym_112337_1__R_s_b_0_5 uint64_t */
    auto s_b_5_0 = emitter.load_local(DV_sym_112337_1__R_s_b_0_5, emitter.context().types().u64());
    /* execute.a64:1425 [D] s_b_5_1: sym_16224_0_address = s_b_5_0, dominates:  */
    emitter.store_local(DV_sym_16224_0_address, s_b_5_0);
    /* execute.a64:1426 [F] s_b_5_2=sym_16218_3_parameter_inst.imms64 (const) */
    /* ???:4294967295 [F] s_b_5_3 = (u64)s_b_5_2 (const) */
    /* ???:4294967295 [D] s_b_5_4 = s_b_5_0+s_b_5_3 */
    auto s_b_5_4 = emitter.add(s_b_5_0, emitter.const_u64(((uint64_t)insn.imms64)));
    /* execute.a64:1426 [D] s_b_5_5: sym_16224_0_address = s_b_5_4, dominates: s_b_1_0 s_b_3_0  */
    emitter.store_local(DV_sym_16224_0_address, s_b_5_4);
    /* execute.a64:1429 [F] s_b_5_6=sym_16218_3_parameter_inst.size (const) */
    /* execute.a64:1429 [F] s_b_5_7 = (u32)s_b_5_6 (const) */
    /* execute.a64:1429 [F] s_b_5_8 = constant u32 3 (const) */
    /* execute.a64:1429 [F] s_b_5_9 = s_b_5_7==s_b_5_8 (const) */
    uint8_t s_b_5_9 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)3ULL));
    /* execute.a64:1429 [F] s_b_5_10: If s_b_5_9: Jump b_1 else b_3 (const) */
    if (s_b_5_9) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_2,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2754 [F] s_b_6_0=sym_16218_3_parameter_inst.rt (const) */
    /* execute.a64:2754 [D] s_b_6_1 = sym_112357_3_parameter_value uint64_t */
    auto s_b_6_1 = emitter.load_local(DV_sym_112357_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2754 [D] s_b_6_2: sym_112459_3_parameter_value = s_b_6_1, dominates: s_b_14_1  */
    emitter.store_local(DV_sym_112459_3_parameter_value, s_b_6_1);
    /* execute.a64:2745 [F] s_b_6_3 = (u32)s_b_6_0 (const) */
    /* execute.a64:2745 [F] s_b_6_4 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_6_5 = s_b_6_3==s_b_6_4 (const) */
    uint8_t s_b_6_5 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_6_6: If s_b_6_5: Jump b_8 else b_14 (const) */
    if (s_b_6_5) 
    {
      goto fixed_block_b_8;
    }
    else 
    {
      goto fixed_block_b_14;
    }
  }
  /* b_2,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2756 [F] s_b_7_0=sym_16218_3_parameter_inst.rt (const) */
    /* execute.a64:2756 [D] s_b_7_1 = sym_112357_3_parameter_value uint64_t */
    auto s_b_7_1 = emitter.load_local(DV_sym_112357_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_7_2 = (u32)s_b_7_1 */
    auto s_b_7_2 = emitter.truncate(s_b_7_1, emitter.context().types().u32());
    /* execute.a64:2756 [D] s_b_7_3 = (u64)s_b_7_2 */
    auto s_b_7_3 = emitter.zx(s_b_7_2, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_7_4: sym_112481_3_parameter_value = s_b_7_3, dominates: s_b_15_1  */
    emitter.store_local(DV_sym_112481_3_parameter_value, s_b_7_3);
    /* execute.a64:2745 [F] s_b_7_5 = (u32)s_b_7_0 (const) */
    /* execute.a64:2745 [F] s_b_7_6 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_7_7 = s_b_7_5==s_b_7_6 (const) */
    uint8_t s_b_7_7 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_7_8: If s_b_7_7: Jump b_8 else b_15 (const) */
    if (s_b_7_7) 
    {
      goto fixed_block_b_8;
    }
    else 
    {
      goto fixed_block_b_15;
    }
  }
  /* b_6, b_7, b_14, b_15,  */
  fixed_block_b_8: 
  {
    /* ???:4294967295 [F] s_b_8_0: Return */
    goto fixed_done;
  }
  /* b_0,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2764 [F] s_b_9_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_9_1 = __builtin_get_feature */
    uint32_t s_b_9_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_9_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_9_3 = s_b_9_1==s_b_9_2 (const) */
    uint8_t s_b_9_3 = ((uint8_t)(s_b_9_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_9_4: If s_b_9_3: Jump b_10 else b_16 (const) */
    if (s_b_9_3) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_16;
    }
  }
  /* b_9,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2765 [D] s_b_10_0 = ReadReg 21 (u64) */
    auto s_b_10_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_10_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_10_1: sym_112401_1__R_s_b_7_0 = s_b_10_0, dominates: s_b_13_0  */
    emitter.store_local(DV_sym_112401_1__R_s_b_7_0, s_b_10_0);
    /* execute.a64:2765 [F] s_b_10_2: Jump b_13 (const) */
    goto fixed_block_b_13;
  }
  /* b_16,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2768 [D] s_b_11_0 = ReadReg 21 (u64) */
    auto s_b_11_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_11_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_11_1: sym_112401_1__R_s_b_7_0 = s_b_11_0, dominates: s_b_13_0  */
    emitter.store_local(DV_sym_112401_1__R_s_b_7_0, s_b_11_0);
    /* execute.a64:2768 [F] s_b_11_2: Jump b_13 (const) */
    goto fixed_block_b_13;
  }
  /* b_16,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2770 [D] s_b_12_0 = ReadReg 22 (u64) */
    auto s_b_12_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_12_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_12_1: sym_112401_1__R_s_b_7_0 = s_b_12_0, dominates: s_b_13_0  */
    emitter.store_local(DV_sym_112401_1__R_s_b_7_0, s_b_12_0);
    /* execute.a64:2770 [F] s_b_12_2: Jump b_13 (const) */
    goto fixed_block_b_13;
  }
  /* b_10, b_11, b_12,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2794 [D] s_b_13_0 = sym_112401_1__R_s_b_7_0 uint64_t */
    auto s_b_13_0 = emitter.load_local(DV_sym_112401_1__R_s_b_7_0, emitter.context().types().u64());
    /* execute.a64:2794 [D] s_b_13_1: sym_112337_1__R_s_b_0_5 = s_b_13_0, dominates: s_b_5_0  */
    emitter.store_local(DV_sym_112337_1__R_s_b_0_5, s_b_13_0);
    /* execute.a64:2794 [F] s_b_13_2: Jump b_5 (const) */
    goto fixed_block_b_5;
  }
  /* b_6,  */
  fixed_block_b_14: 
  {
    /* execute.a64:2747 [F] s_b_14_0=sym_16218_3_parameter_inst.rt (const) */
    /* execute.a64:2747 [D] s_b_14_1 = sym_112459_3_parameter_value uint64_t */
    auto s_b_14_1 = emitter.load_local(DV_sym_112459_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_14_2: WriteRegBank 0:s_b_14_0 = s_b_14_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_14_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_14_1);
    /* execute.a64:0 [F] s_b_14_3: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_7,  */
  fixed_block_b_15: 
  {
    /* execute.a64:2747 [F] s_b_15_0=sym_16218_3_parameter_inst.rt (const) */
    /* execute.a64:2747 [D] s_b_15_1 = sym_112481_3_parameter_value uint64_t */
    auto s_b_15_1 = emitter.load_local(DV_sym_112481_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_15_2: WriteRegBank 0:s_b_15_0 = s_b_15_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_15_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_15_1);
    /* execute.a64:0 [F] s_b_15_3: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_9,  */
  fixed_block_b_16: 
  {
    /* execute.a64:3075 [F] s_b_16_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_16_1 = __builtin_get_feature */
    uint32_t s_b_16_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_16_2 = (u8)s_b_16_1 (const) */
    /* execute.a64:2767 [F] s_b_16_3 = (u32)s_b_16_2 (const) */
    /* execute.a64:2767 [F] s_b_16_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_16_5 = s_b_16_3==s_b_16_4 (const) */
    uint8_t s_b_16_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_16_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_16_6: If s_b_16_5: Jump b_11 else b_12 (const) */
    if (s_b_16_5) 
    {
      goto fixed_block_b_11;
    }
    else 
    {
      goto fixed_block_b_12;
    }
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_lslv(const arm64_decode_a64_DP_2S&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_16596_0_amount = emitter.alloc_local(emitter.context().types().u8(), false);
  uint32_t CV_sym_123335_1_temporary_value;
  auto DV_sym_123335_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_123226_1__R_s_b_2_6 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_123360_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_123390_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_123201_1__R_s_b_0_4 = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_123251_1_temporary_value;
  auto DV_sym_123251_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_123412_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_123279_1_temporary_value;
  auto DV_sym_123279_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  uint64_t CV_sym_123307_1_temporary_value;
  auto DV_sym_123307_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2344 [F] s_b_0_0=sym_16591_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_0_1: If s_b_0_0: Jump b_4 else b_5 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_6,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2346 [D] s_b_1_0 = sym_16596_0_amount uint8_t */
    auto s_b_1_0 = emitter.load_local(DV_sym_16596_0_amount, emitter.context().types().u8());
    /* ???:4294967295 [D] s_b_1_1 = (u32)s_b_1_0 */
    auto s_b_1_1 = emitter.zx(s_b_1_0, emitter.context().types().u32());
    /* ???:4294967295 [F] s_b_1_2 = constant u32 3f (const) */
    /* ???:4294967295 [D] s_b_1_3 = s_b_1_1&s_b_1_2 */
    auto s_b_1_3 = emitter.bitwise_and(s_b_1_1, emitter.const_u32((uint32_t)63ULL));
    /* execute.a64:2346 [D] s_b_1_4 = (u8)s_b_1_3 */
    auto s_b_1_4 = emitter.truncate(s_b_1_3, emitter.context().types().u8());
    /* execute.a64:2346 [D] s_b_1_5: sym_16596_0_amount = s_b_1_4, dominates: s_b_9_2  */
    emitter.store_local(DV_sym_16596_0_amount, s_b_1_4);
    /* execute.a64:2346 [F] s_b_1_6: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1, b_3,  */
  fixed_block_b_2: 
  {
    /* execute.a64:2351 [F] s_b_2_0=sym_16591_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_2_1: If s_b_2_0: Jump b_7 else b_8 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_8;
    }
  }
  /* b_6,  */
  fixed_block_b_3: 
  {
    /* execute.a64:2348 [D] s_b_3_0 = sym_16596_0_amount uint8_t */
    auto s_b_3_0 = emitter.load_local(DV_sym_16596_0_amount, emitter.context().types().u8());
    /* ???:4294967295 [D] s_b_3_1 = (u32)s_b_3_0 */
    auto s_b_3_1 = emitter.zx(s_b_3_0, emitter.context().types().u32());
    /* ???:4294967295 [F] s_b_3_2 = constant u32 1f (const) */
    /* ???:4294967295 [D] s_b_3_3 = s_b_3_1&s_b_3_2 */
    auto s_b_3_3 = emitter.bitwise_and(s_b_3_1, emitter.const_u32((uint32_t)31ULL));
    /* execute.a64:2348 [D] s_b_3_4 = (u8)s_b_3_3 */
    auto s_b_3_4 = emitter.truncate(s_b_3_3, emitter.context().types().u8());
    /* execute.a64:2348 [D] s_b_3_5: sym_16596_0_amount = s_b_3_4, dominates: s_b_9_2  */
    emitter.store_local(DV_sym_16596_0_amount, s_b_3_4);
    /* execute.a64:2348 [F] s_b_3_6: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_0,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2720 [F] s_b_4_0=sym_16591_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [F] s_b_4_1 = (u32)s_b_4_0 (const) */
    /* execute.a64:2714 [F] s_b_4_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_4_3 = s_b_4_1==s_b_4_2 (const) */
    uint8_t s_b_4_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_4_4: If s_b_4_3: Jump b_10 else b_11 (const) */
    if (s_b_4_3) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_11;
    }
  }
  /* b_0,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2722 [F] s_b_5_0=sym_16591_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [F] s_b_5_1 = (u32)s_b_5_0 (const) */
    /* execute.a64:2709 [F] s_b_5_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_5_3 = s_b_5_1==s_b_5_2 (const) */
    uint8_t s_b_5_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_5_4: If s_b_5_3: Jump b_13 else b_14 (const) */
    if (s_b_5_3) 
    {
      goto fixed_block_b_13;
    }
    else 
    {
      goto fixed_block_b_14;
    }
  }
  /* b_12, b_15,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2344 [D] s_b_6_0 = sym_123201_1__R_s_b_0_4 uint64_t */
    auto s_b_6_0 = emitter.load_local(DV_sym_123201_1__R_s_b_0_4, emitter.context().types().u64());
    /* execute.a64:2344 [D] s_b_6_1 = (u8)s_b_6_0 */
    auto s_b_6_1 = emitter.truncate(s_b_6_0, emitter.context().types().u8());
    /* execute.a64:2344 [D] s_b_6_2: sym_16596_0_amount = s_b_6_1, dominates: s_b_1_0 s_b_3_0  */
    emitter.store_local(DV_sym_16596_0_amount, s_b_6_1);
    /* execute.a64:2345 [F] s_b_6_3=sym_16591_3_parameter_inst.sf (const) */
    /* execute.a64:2345 [F] s_b_6_4: If s_b_6_3: Jump b_1 else b_3 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_2,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2720 [F] s_b_7_0=sym_16591_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [F] s_b_7_1 = (u32)s_b_7_0 (const) */
    /* execute.a64:2714 [F] s_b_7_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_7_3 = s_b_7_1==s_b_7_2 (const) */
    uint8_t s_b_7_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_7_4: If s_b_7_3: Jump b_16 else b_17 (const) */
    if (s_b_7_3) 
    {
      goto fixed_block_b_16;
    }
    else 
    {
      goto fixed_block_b_17;
    }
  }
  /* b_2,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2722 [F] s_b_8_0=sym_16591_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [F] s_b_8_1 = (u32)s_b_8_0 (const) */
    /* execute.a64:2709 [F] s_b_8_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_8_3 = s_b_8_1==s_b_8_2 (const) */
    uint8_t s_b_8_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_8_4: If s_b_8_3: Jump b_19 else b_20 (const) */
    if (s_b_8_3) 
    {
      goto fixed_block_b_19;
    }
    else 
    {
      goto fixed_block_b_20;
    }
  }
  /* b_18, b_21,  */
  fixed_block_b_9: 
  {
    /* ???:4294967295 [F] s_b_9_0=sym_16591_3_parameter_inst.sf (const) */
    /* execute.a64:2351 [D] s_b_9_1 = sym_123226_1__R_s_b_2_6 uint64_t */
    auto s_b_9_1 = emitter.load_local(DV_sym_123226_1__R_s_b_2_6, emitter.context().types().u64());
    /* execute.a64:2351 [D] s_b_9_2 = sym_16596_0_amount uint8_t */
    auto s_b_9_2 = emitter.load_local(DV_sym_16596_0_amount, emitter.context().types().u8());
    /* execute.a64:2351 [D] s_b_9_3 = (u64)s_b_9_2 */
    auto s_b_9_3 = emitter.zx(s_b_9_2, emitter.context().types().u64());
    /* execute.a64:2351 [D] s_b_9_4 = s_b_9_1<<s_b_9_3 */
    auto s_b_9_4 = emitter.shl(s_b_9_1, s_b_9_3);
    /* execute.a64:2351 [D] s_b_9_5: sym_123360_3_parameter_value = s_b_9_4, dominates: s_b_22_1 s_b_23_1  */
    emitter.store_local(DV_sym_123360_3_parameter_value, s_b_9_4);
    /* execute.a64:2753 [F] s_b_9_6: If s_b_9_0: Jump b_22 else b_23 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_22;
    }
    else 
    {
      goto fixed_block_b_23;
    }
  }
  /* b_4,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2714 [F] s_b_10_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_10_1: sym_123251_1_temporary_value = s_b_10_0 (const), dominates: s_b_12_0  */
    CV_sym_123251_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_123251_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_10_2: Jump b_12 (const) */
    goto fixed_block_b_12;
  }
  /* b_4,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2714 [F] s_b_11_0=sym_16591_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_11_1 = ReadRegBank 0:s_b_11_0 (u64) */
    auto s_b_11_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_11_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_11_2: sym_123251_1_temporary_value = s_b_11_1, dominates: s_b_12_0  */
    emitter.store_local(DV_sym_123251_1_temporary_value, s_b_11_1);
    /* execute.a64:2714 [F] s_b_11_3: Jump b_12 (const) */
    goto fixed_block_b_12;
  }
  /* b_10, b_11,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2714 [D] s_b_12_0 = sym_123251_1_temporary_value uint64_t */
    auto s_b_12_0 = emitter.load_local(DV_sym_123251_1_temporary_value, emitter.context().types().u64());
    /* execute.a64:2720 [D] s_b_12_1: sym_123201_1__R_s_b_0_4 = s_b_12_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_123201_1__R_s_b_0_4, s_b_12_0);
    /* execute.a64:2720 [F] s_b_12_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_5,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2709 [F] s_b_13_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_13_1: sym_123279_1_temporary_value = s_b_13_0 (const), dominates: s_b_15_0  */
    CV_sym_123279_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_123279_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_13_2: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_5,  */
  fixed_block_b_14: 
  {
    /* execute.a64:2709 [F] s_b_14_0=sym_16591_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [D] s_b_14_1 = ReadRegBank 1:s_b_14_0 (u32) */
    auto s_b_14_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_14_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_14_2: sym_123279_1_temporary_value = s_b_14_1, dominates: s_b_15_0  */
    emitter.store_local(DV_sym_123279_1_temporary_value, s_b_14_1);
    /* execute.a64:2709 [F] s_b_14_3: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_13, b_14,  */
  fixed_block_b_15: 
  {
    /* execute.a64:2709 [D] s_b_15_0 = sym_123279_1_temporary_value uint32_t */
    auto s_b_15_0 = emitter.load_local(DV_sym_123279_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_15_1 = (u64)s_b_15_0 */
    auto s_b_15_1 = emitter.zx(s_b_15_0, emitter.context().types().u64());
    /* execute.a64:2722 [D] s_b_15_2: sym_123201_1__R_s_b_0_4 = s_b_15_1, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_123201_1__R_s_b_0_4, s_b_15_1);
    /* execute.a64:2722 [F] s_b_15_3: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_7,  */
  fixed_block_b_16: 
  {
    /* execute.a64:2714 [F] s_b_16_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_16_1: sym_123307_1_temporary_value = s_b_16_0 (const), dominates: s_b_18_0  */
    CV_sym_123307_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_123307_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_16_2: Jump b_18 (const) */
    goto fixed_block_b_18;
  }
  /* b_7,  */
  fixed_block_b_17: 
  {
    /* execute.a64:2714 [F] s_b_17_0=sym_16591_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [D] s_b_17_1 = ReadRegBank 0:s_b_17_0 (u64) */
    auto s_b_17_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_17_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_17_2: sym_123307_1_temporary_value = s_b_17_1, dominates: s_b_18_0  */
    emitter.store_local(DV_sym_123307_1_temporary_value, s_b_17_1);
    /* execute.a64:2714 [F] s_b_17_3: Jump b_18 (const) */
    goto fixed_block_b_18;
  }
  /* b_16, b_17,  */
  fixed_block_b_18: 
  {
    /* execute.a64:2714 [D] s_b_18_0 = sym_123307_1_temporary_value uint64_t */
    auto s_b_18_0 = emitter.load_local(DV_sym_123307_1_temporary_value, emitter.context().types().u64());
    /* execute.a64:2720 [D] s_b_18_1: sym_123226_1__R_s_b_2_6 = s_b_18_0, dominates: s_b_9_1  */
    emitter.store_local(DV_sym_123226_1__R_s_b_2_6, s_b_18_0);
    /* execute.a64:2720 [F] s_b_18_2: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_8,  */
  fixed_block_b_19: 
  {
    /* execute.a64:2709 [F] s_b_19_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_19_1: sym_123335_1_temporary_value = s_b_19_0 (const), dominates: s_b_21_0  */
    CV_sym_123335_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_123335_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_19_2: Jump b_21 (const) */
    goto fixed_block_b_21;
  }
  /* b_8,  */
  fixed_block_b_20: 
  {
    /* execute.a64:2709 [F] s_b_20_0=sym_16591_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [D] s_b_20_1 = ReadRegBank 1:s_b_20_0 (u32) */
    auto s_b_20_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_20_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_20_2: sym_123335_1_temporary_value = s_b_20_1, dominates: s_b_21_0  */
    emitter.store_local(DV_sym_123335_1_temporary_value, s_b_20_1);
    /* execute.a64:2709 [F] s_b_20_3: Jump b_21 (const) */
    goto fixed_block_b_21;
  }
  /* b_19, b_20,  */
  fixed_block_b_21: 
  {
    /* execute.a64:2709 [D] s_b_21_0 = sym_123335_1_temporary_value uint32_t */
    auto s_b_21_0 = emitter.load_local(DV_sym_123335_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_21_1 = (u64)s_b_21_0 */
    auto s_b_21_1 = emitter.zx(s_b_21_0, emitter.context().types().u64());
    /* execute.a64:2722 [D] s_b_21_2: sym_123226_1__R_s_b_2_6 = s_b_21_1, dominates: s_b_9_1  */
    emitter.store_local(DV_sym_123226_1__R_s_b_2_6, s_b_21_1);
    /* execute.a64:2722 [F] s_b_21_3: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_9,  */
  fixed_block_b_22: 
  {
    /* execute.a64:2754 [F] s_b_22_0=sym_16591_3_parameter_inst.rd (const) */
    /* execute.a64:2754 [D] s_b_22_1 = sym_123360_3_parameter_value uint64_t */
    auto s_b_22_1 = emitter.load_local(DV_sym_123360_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2754 [D] s_b_22_2: sym_123390_3_parameter_value = s_b_22_1, dominates: s_b_25_1  */
    emitter.store_local(DV_sym_123390_3_parameter_value, s_b_22_1);
    /* execute.a64:2745 [F] s_b_22_3 = (u32)s_b_22_0 (const) */
    /* execute.a64:2745 [F] s_b_22_4 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_22_5 = s_b_22_3==s_b_22_4 (const) */
    uint8_t s_b_22_5 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_22_6: If s_b_22_5: Jump b_24 else b_25 (const) */
    if (s_b_22_5) 
    {
      goto fixed_block_b_24;
    }
    else 
    {
      goto fixed_block_b_25;
    }
  }
  /* b_9,  */
  fixed_block_b_23: 
  {
    /* execute.a64:2756 [F] s_b_23_0=sym_16591_3_parameter_inst.rd (const) */
    /* execute.a64:2756 [D] s_b_23_1 = sym_123360_3_parameter_value uint64_t */
    auto s_b_23_1 = emitter.load_local(DV_sym_123360_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_23_2 = (u32)s_b_23_1 */
    auto s_b_23_2 = emitter.truncate(s_b_23_1, emitter.context().types().u32());
    /* execute.a64:2756 [D] s_b_23_3 = (u64)s_b_23_2 */
    auto s_b_23_3 = emitter.zx(s_b_23_2, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_23_4: sym_123412_3_parameter_value = s_b_23_3, dominates: s_b_26_1  */
    emitter.store_local(DV_sym_123412_3_parameter_value, s_b_23_3);
    /* execute.a64:2745 [F] s_b_23_5 = (u32)s_b_23_0 (const) */
    /* execute.a64:2745 [F] s_b_23_6 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_23_7 = s_b_23_5==s_b_23_6 (const) */
    uint8_t s_b_23_7 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_23_8: If s_b_23_7: Jump b_24 else b_26 (const) */
    if (s_b_23_7) 
    {
      goto fixed_block_b_24;
    }
    else 
    {
      goto fixed_block_b_26;
    }
  }
  /* b_22, b_23, b_25, b_26,  */
  fixed_block_b_24: 
  {
    /* ???:4294967295 [F] s_b_24_0: Return */
    goto fixed_done;
  }
  /* b_22,  */
  fixed_block_b_25: 
  {
    /* execute.a64:2747 [F] s_b_25_0=sym_16591_3_parameter_inst.rd (const) */
    /* execute.a64:2747 [D] s_b_25_1 = sym_123390_3_parameter_value uint64_t */
    auto s_b_25_1 = emitter.load_local(DV_sym_123390_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_25_2: WriteRegBank 0:s_b_25_0 = s_b_25_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_25_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_25_1);
    /* execute.a64:0 [F] s_b_25_3: Jump b_24 (const) */
    goto fixed_block_b_24;
  }
  /* b_23,  */
  fixed_block_b_26: 
  {
    /* execute.a64:2747 [F] s_b_26_0=sym_16591_3_parameter_inst.rd (const) */
    /* execute.a64:2747 [D] s_b_26_1 = sym_123412_3_parameter_value uint64_t */
    auto s_b_26_1 = emitter.load_local(DV_sym_123412_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_26_2: WriteRegBank 0:s_b_26_0 = s_b_26_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_26_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_26_1);
    /* execute.a64:0 [F] s_b_26_3: Jump b_24 (const) */
    goto fixed_block_b_24;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_movz(const arm64_decode_a64_MOVE_WIDE_IMM&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  uint64_t CV_sym_126265_3_parameter_value;
  uint64_t CV_sym_126295_3_parameter_value;
  uint64_t CV_sym_126317_3_parameter_value;
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:250 [F] s_b_0_0=sym_16936_3_parameter_inst.imm16 (const) */
    /* execute.a64:250 [F] s_b_0_1 = (u64)s_b_0_0 (const) */
    /* execute.a64:250 [F] s_b_0_2=sym_16936_3_parameter_inst.shift_amount (const) */
    /* execute.a64:250 [F] s_b_0_3 = (u64)s_b_0_2 (const) */
    /* execute.a64:250 [F] s_b_0_4 = s_b_0_1<<s_b_0_3 (const) */
    uint64_t s_b_0_4 = ((uint64_t)(((uint64_t)insn.imm16) << ((uint64_t)insn.shift_amount)));
    /* execute.a64:251 [F] s_b_0_5=sym_16936_3_parameter_inst.sf (const) */
    /* execute.a64:251 [F] s_b_0_6: sym_126265_3_parameter_value = s_b_0_4 (const), dominates: s_b_1_1 s_b_2_1  */
    CV_sym_126265_3_parameter_value = s_b_0_4;
    /* execute.a64:2753 [F] s_b_0_7: If s_b_0_5: Jump b_1 else b_2 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_2;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2754 [F] s_b_1_0=sym_16936_3_parameter_inst.rd (const) */
    /* execute.a64:2754 [F] s_b_1_1 = sym_126265_3_parameter_value (const) uint64_t */
    uint64_t s_b_1_1 = CV_sym_126265_3_parameter_value;
    /* execute.a64:2754 [F] s_b_1_2: sym_126295_3_parameter_value = s_b_1_1 (const), dominates: s_b_4_1  */
    CV_sym_126295_3_parameter_value = s_b_1_1;
    /* execute.a64:2745 [F] s_b_1_3 = (u32)s_b_1_0 (const) */
    /* execute.a64:2745 [F] s_b_1_4 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_1_5 = s_b_1_3==s_b_1_4 (const) */
    uint8_t s_b_1_5 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_1_6: If s_b_1_5: Jump b_3 else b_4 (const) */
    if (s_b_1_5) 
    {
      goto fixed_block_b_3;
    }
    else 
    {
      goto fixed_block_b_4;
    }
  }
  /* b_0,  */
  fixed_block_b_2: 
  {
    /* execute.a64:2756 [F] s_b_2_0=sym_16936_3_parameter_inst.rd (const) */
    /* execute.a64:2756 [F] s_b_2_1 = sym_126265_3_parameter_value (const) uint64_t */
    uint64_t s_b_2_1 = CV_sym_126265_3_parameter_value;
    /* execute.a64:2756 [F] s_b_2_2 = (u32)s_b_2_1 (const) */
    /* execute.a64:2756 [F] s_b_2_3 = (u64)s_b_2_2 (const) */
    /* execute.a64:2756 [F] s_b_2_4: sym_126317_3_parameter_value = s_b_2_3 (const), dominates: s_b_5_1  */
    CV_sym_126317_3_parameter_value = ((uint64_t)((uint32_t)s_b_2_1));
    /* execute.a64:2745 [F] s_b_2_5 = (u32)s_b_2_0 (const) */
    /* execute.a64:2745 [F] s_b_2_6 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_2_7 = s_b_2_5==s_b_2_6 (const) */
    uint8_t s_b_2_7 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_2_8: If s_b_2_7: Jump b_3 else b_5 (const) */
    if (s_b_2_7) 
    {
      goto fixed_block_b_3;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_1, b_2, b_4, b_5,  */
  fixed_block_b_3: 
  {
    /* ???:4294967295 [F] s_b_3_0: Return */
    goto fixed_done;
  }
  /* b_1,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2747 [F] s_b_4_0=sym_16936_3_parameter_inst.rd (const) */
    /* execute.a64:2747 [F] s_b_4_1 = sym_126295_3_parameter_value (const) uint64_t */
    uint64_t s_b_4_1 = CV_sym_126295_3_parameter_value;
    /* execute.a64:2747 [F] s_b_4_2: WriteRegBank 0:s_b_4_0 = s_b_4_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),emitter.const_u64(s_b_4_1),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),emitter.const_u64(s_b_4_1));
    /* execute.a64:0 [F] s_b_4_3: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  /* b_2,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2747 [F] s_b_5_0=sym_16936_3_parameter_inst.rd (const) */
    /* execute.a64:2747 [F] s_b_5_1 = sym_126317_3_parameter_value (const) uint64_t */
    uint64_t s_b_5_1 = CV_sym_126317_3_parameter_value;
    /* execute.a64:2747 [F] s_b_5_2: WriteRegBank 0:s_b_5_0 = s_b_5_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),emitter.const_u64(s_b_5_1),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),emitter.const_u64(s_b_5_1));
    /* execute.a64:0 [F] s_b_5_3: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_mvni(const arm64_decode_a64_SIMD_MOD_IMM&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:5007 [F] s_b_0_0=sym_19388_3_parameter_inst.Q (const) */
    /* execute.simd:5007 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.simd:5007 [F] s_b_0_2 = constant u32 0 (const) */
    /* execute.simd:5007 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.Q) == (uint32_t)0ULL));
    /* execute.simd:5007 [F] s_b_0_4: If s_b_0_3: Jump b_1 else b_3 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.simd:5008 [F] s_b_1_0=sym_19388_3_parameter_inst.rd (const) */
    /* execute.simd:5008 [F] s_b_1_1=sym_19388_3_parameter_inst.immu64 (const) */
    /* execute.simd:5008 [F] s_b_1_2 = ~s_b_1_1 (const) */
    uint64_t s_b_1_2 = ~insn.immu64;
    /* execute.simd:6326 [F] s_b_1_3: WriteRegBank 2:s_b_1_0 = s_b_1_2 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64(s_b_1_2),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64(s_b_1_2));
    /* execute.simd:6327 [F] s_b_1_4 = constant u64 0 (const) */
    /* execute.simd:6327 [F] s_b_1_5: WriteRegBank 3:s_b_1_0 = s_b_1_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_1_6: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1, b_3,  */
  fixed_block_b_2: 
  {
    /* ???:4294967295 [F] s_b_2_0: Return */
    goto fixed_done;
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:5010 [F] s_b_3_0=sym_19388_3_parameter_inst.rd (const) */
    /* execute.simd:5010 [F] s_b_3_1=sym_19388_3_parameter_inst.immu64 (const) */
    /* execute.simd:5010 [F] s_b_3_2 = ~s_b_3_1 (const) */
    uint64_t s_b_3_2 = ~insn.immu64;
    /* execute.simd:5010 [F] s_b_3_3=sym_19388_3_parameter_inst.immu64 (const) */
    /* execute.simd:5010 [F] s_b_3_4 = ~s_b_3_3 (const) */
    uint64_t s_b_3_4 = ~insn.immu64;
    /* execute.simd:6333 [F] s_b_3_5: WriteRegBank 2:s_b_3_0 = s_b_3_2 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64(s_b_3_2),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64(s_b_3_2));
    /* execute.simd:6334 [F] s_b_3_6: WriteRegBank 3:s_b_3_0 = s_b_3_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64(s_b_3_4),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64(s_b_3_4));
    /* execute.simd:0 [F] s_b_3_7: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_prfm(const arm64_decode_a64_LS_REG_IMM_POST&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* ???:4294967295 [F] s_b_0_0: Return */
    goto fixed_done;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_rev16(const arm64_decode_a64_DP_1S&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_129734_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_129712_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_129645_1_temporary_value;
  auto DV_sym_129645_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_129682_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_129640_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_129631_1_temporary_value;
  auto DV_sym_129631_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2240 [F] s_b_0_0=sym_20237_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_0_1: If s_b_0_0: Jump b_1 else b_4 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_4;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2720 [F] s_b_1_0=sym_20237_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [F] s_b_1_1 = (u32)s_b_1_0 (const) */
    /* execute.a64:2714 [F] s_b_1_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_1_3 = s_b_1_1==s_b_1_2 (const) */
    uint8_t s_b_1_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_1_4: If s_b_1_3: Jump b_2 else b_3 (const) */
    if (s_b_1_3) 
    {
      goto fixed_block_b_2;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_1,  */
  fixed_block_b_2: 
  {
    /* execute.a64:2714 [F] s_b_2_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_2_1: sym_129631_1_temporary_value = s_b_2_0 (const), dominates: s_b_7_0  */
    CV_sym_129631_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_129631_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_2_2: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_1,  */
  fixed_block_b_3: 
  {
    /* execute.a64:2714 [F] s_b_3_0=sym_20237_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [D] s_b_3_1 = ReadRegBank 0:s_b_3_0 (u64) */
    auto s_b_3_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_3_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_3_2: sym_129631_1_temporary_value = s_b_3_1, dominates: s_b_7_0  */
    emitter.store_local(DV_sym_129631_1_temporary_value, s_b_3_1);
    /* execute.a64:2714 [F] s_b_3_3: Jump b_7 (const) */
    goto fixed_block_b_7;
  }
  /* b_0,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2722 [F] s_b_4_0=sym_20237_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [F] s_b_4_1 = (u32)s_b_4_0 (const) */
    /* execute.a64:2709 [F] s_b_4_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_4_3 = s_b_4_1==s_b_4_2 (const) */
    uint8_t s_b_4_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_4_4: If s_b_4_3: Jump b_5 else b_6 (const) */
    if (s_b_4_3) 
    {
      goto fixed_block_b_5;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_4,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2709 [F] s_b_5_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_5_1: sym_129645_1_temporary_value = s_b_5_0 (const), dominates: s_b_9_0  */
    CV_sym_129645_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_129645_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_5_2: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_4,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2709 [F] s_b_6_0=sym_20237_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [D] s_b_6_1 = ReadRegBank 1:s_b_6_0 (u32) */
    auto s_b_6_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_6_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_6_2: sym_129645_1_temporary_value = s_b_6_1, dominates: s_b_9_0  */
    emitter.store_local(DV_sym_129645_1_temporary_value, s_b_6_1);
    /* execute.a64:2709 [F] s_b_6_3: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_2, b_3,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2714 [D] s_b_7_0 = sym_129631_1_temporary_value uint64_t */
    auto s_b_7_0 = emitter.load_local(DV_sym_129631_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_7_1: sym_129640_0_return_symbol = s_b_7_0, dominates: s_b_8_0  */
    emitter.store_local(DV_sym_129640_0_return_symbol, s_b_7_0);
    /* ???:4294967295 [F] s_b_7_2: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_7, b_9,  */
  fixed_block_b_8: 
  {
    /* ???:4294967295 [D] s_b_8_0 = sym_129640_0_return_symbol uint64_t */
    auto s_b_8_0 = emitter.load_local(DV_sym_129640_0_return_symbol, emitter.context().types().u64());
    /* ???:4294967295 [F] s_b_8_1 = constant u64 8 (const) */
    /* ???:4294967295 [D] s_b_8_2 = s_b_8_0>>s_b_8_1 */
    auto s_b_8_2 = emitter.shr(s_b_8_0, emitter.const_u64((uint64_t)8ULL));
    /* ???:4294967295 [F] s_b_8_3 = constant u64 ff00ff00ff00ff (const) */
    /* ???:4294967295 [D] s_b_8_4 = s_b_8_2&s_b_8_3 */
    auto s_b_8_4 = emitter.bitwise_and(s_b_8_2, emitter.const_u64((uint64_t)71777214294589695ULL));
    /* ???:4294967295 [F] s_b_8_5 = constant u64 8 (const) */
    /* ???:4294967295 [D] s_b_8_6 = s_b_8_0<<s_b_8_5 */
    auto s_b_8_6 = emitter.shl(s_b_8_0, emitter.const_u64((uint64_t)8ULL));
    /* execute.a64:2247 [F] s_b_8_7 = constant u64 ff00ff00ff00ff00 (const) */
    /* ???:4294967295 [D] s_b_8_8 = s_b_8_6&s_b_8_7 */
    auto s_b_8_8 = emitter.bitwise_and(s_b_8_6, emitter.const_u64((uint64_t)18374966859414961920ULL));
    /* ???:4294967295 [D] s_b_8_9 = s_b_8_4|s_b_8_8 */
    auto s_b_8_9 = emitter.bitwise_or(s_b_8_4, s_b_8_8);
    /* execute.a64:2250 [F] s_b_8_10=sym_20237_3_parameter_inst.sf (const) */
    /* execute.a64:2250 [D] s_b_8_11: sym_129682_3_parameter_value = s_b_8_9, dominates: s_b_10_1 s_b_11_1  */
    emitter.store_local(DV_sym_129682_3_parameter_value, s_b_8_9);
    /* execute.a64:2753 [F] s_b_8_12: If s_b_8_10: Jump b_10 else b_11 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_11;
    }
  }
  /* b_5, b_6,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2709 [D] s_b_9_0 = sym_129645_1_temporary_value uint32_t */
    auto s_b_9_0 = emitter.load_local(DV_sym_129645_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_9_1 = (u64)s_b_9_0 */
    auto s_b_9_1 = emitter.zx(s_b_9_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_9_2: sym_129640_0_return_symbol = s_b_9_1, dominates: s_b_8_0  */
    emitter.store_local(DV_sym_129640_0_return_symbol, s_b_9_1);
    /* ???:4294967295 [F] s_b_9_3: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_8,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2754 [F] s_b_10_0=sym_20237_3_parameter_inst.rd (const) */
    /* execute.a64:2754 [D] s_b_10_1 = sym_129682_3_parameter_value uint64_t */
    auto s_b_10_1 = emitter.load_local(DV_sym_129682_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2754 [D] s_b_10_2: sym_129712_3_parameter_value = s_b_10_1, dominates: s_b_13_1  */
    emitter.store_local(DV_sym_129712_3_parameter_value, s_b_10_1);
    /* execute.a64:2745 [F] s_b_10_3 = (u32)s_b_10_0 (const) */
    /* execute.a64:2745 [F] s_b_10_4 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_10_5 = s_b_10_3==s_b_10_4 (const) */
    uint8_t s_b_10_5 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_10_6: If s_b_10_5: Jump b_12 else b_13 (const) */
    if (s_b_10_5) 
    {
      goto fixed_block_b_12;
    }
    else 
    {
      goto fixed_block_b_13;
    }
  }
  /* b_8,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2756 [F] s_b_11_0=sym_20237_3_parameter_inst.rd (const) */
    /* execute.a64:2756 [D] s_b_11_1 = sym_129682_3_parameter_value uint64_t */
    auto s_b_11_1 = emitter.load_local(DV_sym_129682_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_11_2 = (u32)s_b_11_1 */
    auto s_b_11_2 = emitter.truncate(s_b_11_1, emitter.context().types().u32());
    /* execute.a64:2756 [D] s_b_11_3 = (u64)s_b_11_2 */
    auto s_b_11_3 = emitter.zx(s_b_11_2, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_11_4: sym_129734_3_parameter_value = s_b_11_3, dominates: s_b_14_1  */
    emitter.store_local(DV_sym_129734_3_parameter_value, s_b_11_3);
    /* execute.a64:2745 [F] s_b_11_5 = (u32)s_b_11_0 (const) */
    /* execute.a64:2745 [F] s_b_11_6 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_11_7 = s_b_11_5==s_b_11_6 (const) */
    uint8_t s_b_11_7 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_11_8: If s_b_11_7: Jump b_12 else b_14 (const) */
    if (s_b_11_7) 
    {
      goto fixed_block_b_12;
    }
    else 
    {
      goto fixed_block_b_14;
    }
  }
  /* b_10, b_11, b_13, b_14,  */
  fixed_block_b_12: 
  {
    /* ???:4294967295 [F] s_b_12_0: Return */
    goto fixed_done;
  }
  /* b_10,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2747 [F] s_b_13_0=sym_20237_3_parameter_inst.rd (const) */
    /* execute.a64:2747 [D] s_b_13_1 = sym_129712_3_parameter_value uint64_t */
    auto s_b_13_1 = emitter.load_local(DV_sym_129712_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_13_2: WriteRegBank 0:s_b_13_0 = s_b_13_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_13_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_13_1);
    /* execute.a64:0 [F] s_b_13_3: Jump b_12 (const) */
    goto fixed_block_b_12;
  }
  /* b_11,  */
  fixed_block_b_14: 
  {
    /* execute.a64:2747 [F] s_b_14_0=sym_20237_3_parameter_inst.rd (const) */
    /* execute.a64:2747 [D] s_b_14_1 = sym_129734_3_parameter_value uint64_t */
    auto s_b_14_1 = emitter.load_local(DV_sym_129734_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_14_2: WriteRegBank 0:s_b_14_0 = s_b_14_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_14_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_14_1);
    /* execute.a64:0 [F] s_b_14_3: Jump b_12 (const) */
    goto fixed_block_b_12;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_sbc(const arm64_decode_a64_ADD_SUB_CARRY&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_130569_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_130340_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_130345_1_temporary_value;
  auto DV_sym_130345_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_130503_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_130331_1_temporary_value;
  auto DV_sym_130331_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_130462_1_temporary_value;
  auto DV_sym_130462_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_130457_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_130448_1_temporary_value;
  auto DV_sym_130448_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_22283_0_op1 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_22288_0_op2 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_22305_0_result = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_22333_0_result = emitter.alloc_local(emitter.context().types().u32(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2052 [F] s_b_0_0=sym_22278_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_0_1: If s_b_0_0: Jump b_10 else b_13 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_13;
    }
  }
  /* b_26,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2058 [F] s_b_1_0=sym_22278_3_parameter_inst.S (const) */
    /* execute.a64:2058 [F] s_b_1_1: If s_b_1_0: Jump b_4 else b_6 (const) */
    if (insn.S) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_5, b_8, b_28, b_29,  */
  fixed_block_b_2: 
  {
    /* ???:4294967295 [F] s_b_2_0: Return */
    goto fixed_done;
  }
  /* b_26,  */
  fixed_block_b_3: 
  {
    /* execute.a64:2068 [F] s_b_3_0=sym_22278_3_parameter_inst.S (const) */
    /* execute.a64:2068 [F] s_b_3_1: If s_b_3_0: Jump b_7 else b_9 (const) */
    if (insn.S) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_9;
    }
  }
  /* b_1,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2059 [D] s_b_4_0 = sym_22283_0_op1 uint64_t */
    auto s_b_4_0 = emitter.load_local(DV_sym_22283_0_op1, emitter.context().types().u64());
    /* execute.a64:2059 [D] s_b_4_1 = sym_22288_0_op2 uint64_t */
    auto s_b_4_1 = emitter.load_local(DV_sym_22288_0_op2, emitter.context().types().u64());
    /* execute.a64:2059 [D] s_b_4_2 = ReadReg 3 (u8) */
    auto s_b_4_2 = emitter.load_register(emitter.const_u32(1298), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1298), s_b_4_2, emitter.const_u8(1));
    }
    /* execute.a64:2059 [D] s_b_4_3 = !s_b_4_2 */
    auto s_b_4_3 = emitter.cmp_eq(s_b_4_2, emitter.const_u8(0));
    /* execute.a64:2059 [D] s_b_4_4 = __builtin_sbc64_flags */
    auto s_b_4_4 = emitter.sbcf(s_b_4_0, s_b_4_1, s_b_4_3);
    /* execute.a64:2059 [D] s_b_4_5: sym_22305_0_result = s_b_4_4, dominates: s_b_5_0  */
    emitter.store_local(DV_sym_22305_0_result, s_b_4_4);
    /* execute.a64:2059 [F] s_b_4_6: Jump b_5 (const) */
    goto fixed_block_b_5;
  }
  /* b_4, b_6,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2064 [D] s_b_5_0 = sym_22305_0_result uint64_t */
    auto s_b_5_0 = emitter.load_local(DV_sym_22305_0_result, emitter.context().types().u64());
    /* execute.a64:2754 [F] s_b_5_1=sym_22278_3_parameter_inst.rd (const) */
    /* execute.a64:2754 [D] s_b_5_2: sym_130503_3_parameter_value = s_b_5_0, dominates: s_b_28_1  */
    emitter.store_local(DV_sym_130503_3_parameter_value, s_b_5_0);
    /* execute.a64:2745 [F] s_b_5_3 = (u32)s_b_5_1 (const) */
    /* execute.a64:2745 [F] s_b_5_4 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_5_5 = s_b_5_3==s_b_5_4 (const) */
    uint8_t s_b_5_5 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_5_6: If s_b_5_5: Jump b_2 else b_28 (const) */
    if (s_b_5_5) 
    {
      goto fixed_block_b_2;
    }
    else 
    {
      goto fixed_block_b_28;
    }
  }
  /* b_1,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2061 [D] s_b_6_0 = sym_22283_0_op1 uint64_t */
    auto s_b_6_0 = emitter.load_local(DV_sym_22283_0_op1, emitter.context().types().u64());
    /* execute.a64:2061 [D] s_b_6_1 = sym_22288_0_op2 uint64_t */
    auto s_b_6_1 = emitter.load_local(DV_sym_22288_0_op2, emitter.context().types().u64());
    /* execute.a64:2061 [D] s_b_6_2 = ReadReg 3 (u8) */
    auto s_b_6_2 = emitter.load_register(emitter.const_u32(1298), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1298), s_b_6_2, emitter.const_u8(1));
    }
    /* execute.a64:2061 [D] s_b_6_3 = !s_b_6_2 */
    auto s_b_6_3 = emitter.cmp_eq(s_b_6_2, emitter.const_u8(0));
    /* execute.a64:2061 [D] s_b_6_4 = __builtin_sbc64 */
    auto s_b_6_4 = emitter.sbc(s_b_6_0, s_b_6_1, s_b_6_3);
    /* execute.a64:2061 [D] s_b_6_5: sym_22305_0_result = s_b_6_4, dominates: s_b_5_0  */
    emitter.store_local(DV_sym_22305_0_result, s_b_6_4);
    /* execute.a64:2061 [F] s_b_6_6: Jump b_5 (const) */
    goto fixed_block_b_5;
  }
  /* b_3,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2069 [D] s_b_7_0 = sym_22283_0_op1 uint64_t */
    auto s_b_7_0 = emitter.load_local(DV_sym_22283_0_op1, emitter.context().types().u64());
    /* execute.a64:2069 [D] s_b_7_1 = (u32)s_b_7_0 */
    auto s_b_7_1 = emitter.truncate(s_b_7_0, emitter.context().types().u32());
    /* execute.a64:2069 [D] s_b_7_2 = sym_22288_0_op2 uint64_t */
    auto s_b_7_2 = emitter.load_local(DV_sym_22288_0_op2, emitter.context().types().u64());
    /* execute.a64:2069 [D] s_b_7_3 = (u32)s_b_7_2 */
    auto s_b_7_3 = emitter.truncate(s_b_7_2, emitter.context().types().u32());
    /* execute.a64:2069 [D] s_b_7_4 = ReadReg 3 (u8) */
    auto s_b_7_4 = emitter.load_register(emitter.const_u32(1298), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1298), s_b_7_4, emitter.const_u8(1));
    }
    /* execute.a64:2069 [D] s_b_7_5 = !s_b_7_4 */
    auto s_b_7_5 = emitter.cmp_eq(s_b_7_4, emitter.const_u8(0));
    /* execute.a64:2069 [D] s_b_7_6 = __builtin_sbc32_flags */
    auto s_b_7_6 = emitter.sbcf(s_b_7_1, s_b_7_3, s_b_7_5);
    /* execute.a64:2069 [D] s_b_7_7: sym_22333_0_result = s_b_7_6, dominates: s_b_8_0  */
    emitter.store_local(DV_sym_22333_0_result, s_b_7_6);
    /* execute.a64:2069 [F] s_b_7_8: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_7, b_9,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2074 [D] s_b_8_0 = sym_22333_0_result uint32_t */
    auto s_b_8_0 = emitter.load_local(DV_sym_22333_0_result, emitter.context().types().u32());
    /* execute.a64:2074 [D] s_b_8_1 = (u64)s_b_8_0 */
    auto s_b_8_1 = emitter.zx(s_b_8_0, emitter.context().types().u64());
    /* execute.a64:2756 [F] s_b_8_2=sym_22278_3_parameter_inst.rd (const) */
    /* execute.a64:2756 [D] s_b_8_3 = (u32)s_b_8_1 */
    auto s_b_8_3 = emitter.truncate(s_b_8_1, emitter.context().types().u32());
    /* execute.a64:2756 [D] s_b_8_4 = (u64)s_b_8_3 */
    auto s_b_8_4 = emitter.zx(s_b_8_3, emitter.context().types().u64());
    /* execute.a64:2756 [D] s_b_8_5: sym_130569_3_parameter_value = s_b_8_4, dominates: s_b_29_1  */
    emitter.store_local(DV_sym_130569_3_parameter_value, s_b_8_4);
    /* execute.a64:2745 [F] s_b_8_6 = (u32)s_b_8_2 (const) */
    /* execute.a64:2745 [F] s_b_8_7 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_8_8 = s_b_8_6==s_b_8_7 (const) */
    uint8_t s_b_8_8 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_8_9: If s_b_8_8: Jump b_2 else b_29 (const) */
    if (s_b_8_8) 
    {
      goto fixed_block_b_2;
    }
    else 
    {
      goto fixed_block_b_29;
    }
  }
  /* b_3,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2071 [D] s_b_9_0 = sym_22283_0_op1 uint64_t */
    auto s_b_9_0 = emitter.load_local(DV_sym_22283_0_op1, emitter.context().types().u64());
    /* execute.a64:2071 [D] s_b_9_1 = (u32)s_b_9_0 */
    auto s_b_9_1 = emitter.truncate(s_b_9_0, emitter.context().types().u32());
    /* execute.a64:2071 [D] s_b_9_2 = sym_22288_0_op2 uint64_t */
    auto s_b_9_2 = emitter.load_local(DV_sym_22288_0_op2, emitter.context().types().u64());
    /* execute.a64:2071 [D] s_b_9_3 = (u32)s_b_9_2 */
    auto s_b_9_3 = emitter.truncate(s_b_9_2, emitter.context().types().u32());
    /* execute.a64:2071 [D] s_b_9_4 = ReadReg 3 (u8) */
    auto s_b_9_4 = emitter.load_register(emitter.const_u32(1298), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1298), s_b_9_4, emitter.const_u8(1));
    }
    /* execute.a64:2071 [D] s_b_9_5 = !s_b_9_4 */
    auto s_b_9_5 = emitter.cmp_eq(s_b_9_4, emitter.const_u8(0));
    /* execute.a64:2071 [D] s_b_9_6 = __builtin_sbc32 */
    auto s_b_9_6 = emitter.sbc(s_b_9_1, s_b_9_3, s_b_9_5);
    /* execute.a64:2071 [D] s_b_9_7: sym_22333_0_result = s_b_9_6, dominates: s_b_8_0  */
    emitter.store_local(DV_sym_22333_0_result, s_b_9_6);
    /* execute.a64:2071 [F] s_b_9_8: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_0,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2720 [F] s_b_10_0=sym_22278_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [F] s_b_10_1 = (u32)s_b_10_0 (const) */
    /* execute.a64:2714 [F] s_b_10_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_10_3 = s_b_10_1==s_b_10_2 (const) */
    uint8_t s_b_10_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_10_4: If s_b_10_3: Jump b_11 else b_12 (const) */
    if (s_b_10_3) 
    {
      goto fixed_block_b_11;
    }
    else 
    {
      goto fixed_block_b_12;
    }
  }
  /* b_10,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2714 [F] s_b_11_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_11_1: sym_130331_1_temporary_value = s_b_11_0 (const), dominates: s_b_16_0  */
    CV_sym_130331_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_130331_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_11_2: Jump b_16 (const) */
    goto fixed_block_b_16;
  }
  /* b_10,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2714 [F] s_b_12_0=sym_22278_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [D] s_b_12_1 = ReadRegBank 0:s_b_12_0 (u64) */
    auto s_b_12_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_12_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_12_2: sym_130331_1_temporary_value = s_b_12_1, dominates: s_b_16_0  */
    emitter.store_local(DV_sym_130331_1_temporary_value, s_b_12_1);
    /* execute.a64:2714 [F] s_b_12_3: Jump b_16 (const) */
    goto fixed_block_b_16;
  }
  /* b_0,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2722 [F] s_b_13_0=sym_22278_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [F] s_b_13_1 = (u32)s_b_13_0 (const) */
    /* execute.a64:2709 [F] s_b_13_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_13_3 = s_b_13_1==s_b_13_2 (const) */
    uint8_t s_b_13_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_13_4: If s_b_13_3: Jump b_14 else b_15 (const) */
    if (s_b_13_3) 
    {
      goto fixed_block_b_14;
    }
    else 
    {
      goto fixed_block_b_15;
    }
  }
  /* b_13,  */
  fixed_block_b_14: 
  {
    /* execute.a64:2709 [F] s_b_14_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_14_1: sym_130345_1_temporary_value = s_b_14_0 (const), dominates: s_b_18_0  */
    CV_sym_130345_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_130345_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_14_2: Jump b_18 (const) */
    goto fixed_block_b_18;
  }
  /* b_13,  */
  fixed_block_b_15: 
  {
    /* execute.a64:2709 [F] s_b_15_0=sym_22278_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [D] s_b_15_1 = ReadRegBank 1:s_b_15_0 (u32) */
    auto s_b_15_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_15_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_15_2: sym_130345_1_temporary_value = s_b_15_1, dominates: s_b_18_0  */
    emitter.store_local(DV_sym_130345_1_temporary_value, s_b_15_1);
    /* execute.a64:2709 [F] s_b_15_3: Jump b_18 (const) */
    goto fixed_block_b_18;
  }
  /* b_11, b_12,  */
  fixed_block_b_16: 
  {
    /* execute.a64:2714 [D] s_b_16_0 = sym_130331_1_temporary_value uint64_t */
    auto s_b_16_0 = emitter.load_local(DV_sym_130331_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_16_1: sym_130340_0_return_symbol = s_b_16_0, dominates: s_b_17_0  */
    emitter.store_local(DV_sym_130340_0_return_symbol, s_b_16_0);
    /* ???:4294967295 [F] s_b_16_2: Jump b_17 (const) */
    goto fixed_block_b_17;
  }
  /* b_16, b_18,  */
  fixed_block_b_17: 
  {
    /* ???:4294967295 [D] s_b_17_0 = sym_130340_0_return_symbol uint64_t */
    auto s_b_17_0 = emitter.load_local(DV_sym_130340_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:2052 [D] s_b_17_1: sym_22283_0_op1 = s_b_17_0, dominates: s_b_4_0 s_b_6_0 s_b_7_0 s_b_9_0  */
    emitter.store_local(DV_sym_22283_0_op1, s_b_17_0);
    /* execute.a64:2053 [F] s_b_17_2=sym_22278_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_17_3: If s_b_17_2: Jump b_19 else b_22 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_19;
    }
    else 
    {
      goto fixed_block_b_22;
    }
  }
  /* b_14, b_15,  */
  fixed_block_b_18: 
  {
    /* execute.a64:2709 [D] s_b_18_0 = sym_130345_1_temporary_value uint32_t */
    auto s_b_18_0 = emitter.load_local(DV_sym_130345_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_18_1 = (u64)s_b_18_0 */
    auto s_b_18_1 = emitter.zx(s_b_18_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_18_2: sym_130340_0_return_symbol = s_b_18_1, dominates: s_b_17_0  */
    emitter.store_local(DV_sym_130340_0_return_symbol, s_b_18_1);
    /* ???:4294967295 [F] s_b_18_3: Jump b_17 (const) */
    goto fixed_block_b_17;
  }
  /* b_17,  */
  fixed_block_b_19: 
  {
    /* execute.a64:2720 [F] s_b_19_0=sym_22278_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [F] s_b_19_1 = (u32)s_b_19_0 (const) */
    /* execute.a64:2714 [F] s_b_19_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_19_3 = s_b_19_1==s_b_19_2 (const) */
    uint8_t s_b_19_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_19_4: If s_b_19_3: Jump b_20 else b_21 (const) */
    if (s_b_19_3) 
    {
      goto fixed_block_b_20;
    }
    else 
    {
      goto fixed_block_b_21;
    }
  }
  /* b_19,  */
  fixed_block_b_20: 
  {
    /* execute.a64:2714 [F] s_b_20_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_20_1: sym_130448_1_temporary_value = s_b_20_0 (const), dominates: s_b_25_0  */
    CV_sym_130448_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_130448_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_20_2: Jump b_25 (const) */
    goto fixed_block_b_25;
  }
  /* b_19,  */
  fixed_block_b_21: 
  {
    /* execute.a64:2714 [F] s_b_21_0=sym_22278_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_21_1 = ReadRegBank 0:s_b_21_0 (u64) */
    auto s_b_21_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_21_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_21_2: sym_130448_1_temporary_value = s_b_21_1, dominates: s_b_25_0  */
    emitter.store_local(DV_sym_130448_1_temporary_value, s_b_21_1);
    /* execute.a64:2714 [F] s_b_21_3: Jump b_25 (const) */
    goto fixed_block_b_25;
  }
  /* b_17,  */
  fixed_block_b_22: 
  {
    /* execute.a64:2722 [F] s_b_22_0=sym_22278_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [F] s_b_22_1 = (u32)s_b_22_0 (const) */
    /* execute.a64:2709 [F] s_b_22_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_22_3 = s_b_22_1==s_b_22_2 (const) */
    uint8_t s_b_22_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_22_4: If s_b_22_3: Jump b_23 else b_24 (const) */
    if (s_b_22_3) 
    {
      goto fixed_block_b_23;
    }
    else 
    {
      goto fixed_block_b_24;
    }
  }
  /* b_22,  */
  fixed_block_b_23: 
  {
    /* execute.a64:2709 [F] s_b_23_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_23_1: sym_130462_1_temporary_value = s_b_23_0 (const), dominates: s_b_27_0  */
    CV_sym_130462_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_130462_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_23_2: Jump b_27 (const) */
    goto fixed_block_b_27;
  }
  /* b_22,  */
  fixed_block_b_24: 
  {
    /* execute.a64:2709 [F] s_b_24_0=sym_22278_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [D] s_b_24_1 = ReadRegBank 1:s_b_24_0 (u32) */
    auto s_b_24_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_24_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_24_2: sym_130462_1_temporary_value = s_b_24_1, dominates: s_b_27_0  */
    emitter.store_local(DV_sym_130462_1_temporary_value, s_b_24_1);
    /* execute.a64:2709 [F] s_b_24_3: Jump b_27 (const) */
    goto fixed_block_b_27;
  }
  /* b_20, b_21,  */
  fixed_block_b_25: 
  {
    /* execute.a64:2714 [D] s_b_25_0 = sym_130448_1_temporary_value uint64_t */
    auto s_b_25_0 = emitter.load_local(DV_sym_130448_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_25_1: sym_130457_0_return_symbol = s_b_25_0, dominates: s_b_26_0  */
    emitter.store_local(DV_sym_130457_0_return_symbol, s_b_25_0);
    /* ???:4294967295 [F] s_b_25_2: Jump b_26 (const) */
    goto fixed_block_b_26;
  }
  /* b_25, b_27,  */
  fixed_block_b_26: 
  {
    /* ???:4294967295 [D] s_b_26_0 = sym_130457_0_return_symbol uint64_t */
    auto s_b_26_0 = emitter.load_local(DV_sym_130457_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:2053 [D] s_b_26_1: sym_22288_0_op2 = s_b_26_0, dominates: s_b_4_1 s_b_6_1 s_b_7_2 s_b_9_2  */
    emitter.store_local(DV_sym_22288_0_op2, s_b_26_0);
    /* execute.a64:2055 [F] s_b_26_2=sym_22278_3_parameter_inst.sf (const) */
    /* execute.a64:2055 [F] s_b_26_3: If s_b_26_2: Jump b_1 else b_3 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_23, b_24,  */
  fixed_block_b_27: 
  {
    /* execute.a64:2709 [D] s_b_27_0 = sym_130462_1_temporary_value uint32_t */
    auto s_b_27_0 = emitter.load_local(DV_sym_130462_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_27_1 = (u64)s_b_27_0 */
    auto s_b_27_1 = emitter.zx(s_b_27_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_27_2: sym_130457_0_return_symbol = s_b_27_1, dominates: s_b_26_0  */
    emitter.store_local(DV_sym_130457_0_return_symbol, s_b_27_1);
    /* ???:4294967295 [F] s_b_27_3: Jump b_26 (const) */
    goto fixed_block_b_26;
  }
  /* b_5,  */
  fixed_block_b_28: 
  {
    /* execute.a64:2747 [F] s_b_28_0=sym_22278_3_parameter_inst.rd (const) */
    /* execute.a64:2747 [D] s_b_28_1 = sym_130503_3_parameter_value uint64_t */
    auto s_b_28_1 = emitter.load_local(DV_sym_130503_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_28_2: WriteRegBank 0:s_b_28_0 = s_b_28_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_28_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_28_1);
    /* execute.a64:0 [F] s_b_28_3: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_8,  */
  fixed_block_b_29: 
  {
    /* execute.a64:2747 [F] s_b_29_0=sym_22278_3_parameter_inst.rd (const) */
    /* execute.a64:2747 [D] s_b_29_1 = sym_130569_3_parameter_value uint64_t */
    auto s_b_29_1 = emitter.load_local(DV_sym_130569_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_29_2: WriteRegBank 0:s_b_29_0 = s_b_29_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_29_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_29_1);
    /* execute.a64:0 [F] s_b_29_3: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_smax(const arm64_decode_a64_SIMD_THREE_SAME&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:2904 [F] s_b_0_0=sym_23072_3_parameter_inst.arrangement (const) */
    /* execute.simd:2905 [F] s_b_0_1 = constant s32 0 (const) */
    /* execute.simd:2917 [F] s_b_0_2 = constant s32 1 (const) */
    /* execute.simd:2927 [F] s_b_0_3 = constant s32 2 (const) */
    /* execute.simd:2938 [F] s_b_0_4 = constant s32 3 (const) */
    /* execute.simd:2948 [F] s_b_0_5 = constant s32 4 (const) */
    /* execute.simd:2959 [F] s_b_0_6 = constant s32 5 (const) */
    /* execute.simd:2904 [F] s_b_0_7: Switch s_b_0_0: < <todo> > def b_8 (const) -> b_2, b_3, b_4, b_5, b_6, b_7, b_8,  */
    switch (insn.arrangement) 
    {
    case (int32_t)0ULL:
      goto fixed_block_b_2;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_3;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_4;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_5;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_6;
      break;
    case (int32_t)5ULL:
      goto fixed_block_b_7;
      break;
    default:
      goto fixed_block_b_8;
    }
  }
  /* b_2, b_3, b_4, b_5, b_6, b_7, b_8,  */
  fixed_block_b_1: 
  {
    /* ???:4294967295 [F] s_b_1_0: Return */
    goto fixed_done;
  }
  /* b_0,  */
  fixed_block_b_2: 
  {
    /* execute.simd:2906 [F] s_b_2_0=sym_23072_3_parameter_inst.rn (const) */
    /* execute.simd:2906 [D] s_b_2_1 = ReadRegBank 15:s_b_2_0 (v8u8) */
    auto s_b_2_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_2_1,emitter.const_u8(8));
    }
    /* execute.simd:2906 [D] s_b_2_2 = (v8s8)s_b_2_1 */
    auto s_b_2_2 = emitter.reinterpret(s_b_2_1, emitter.context().types().v8s8());
    /* execute.simd:2907 [F] s_b_2_3=sym_23072_3_parameter_inst.rm (const) */
    /* execute.simd:2907 [D] s_b_2_4 = ReadRegBank 15:s_b_2_3 (v8u8) */
    auto s_b_2_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_2_4,emitter.const_u8(8));
    }
    /* execute.simd:2907 [D] s_b_2_5 = (v8s8)s_b_2_4 */
    auto s_b_2_5 = emitter.reinterpret(s_b_2_4, emitter.context().types().v8s8());
    /* execute.simd:2909 [D] s_b_2_6 = s_b_2_2>s_b_2_5 */
    auto s_b_2_6 = emitter.cmp_gt(s_b_2_2, s_b_2_5);
    /* execute.simd:2910 [D] s_b_2_7 = s_b_2_2&s_b_2_6 */
    auto s_b_2_7 = emitter.bitwise_and(s_b_2_2, s_b_2_6);
    /* execute.simd:2910 [D] s_b_2_8 = ~s_b_2_6 */
    auto s_b_2_8 = emitter.bitwise_not(s_b_2_6);
    /* execute.simd:2910 [D] s_b_2_9 = s_b_2_5&s_b_2_8 */
    auto s_b_2_9 = emitter.bitwise_and(s_b_2_5, s_b_2_8);
    /* execute.simd:2910 [D] s_b_2_10 = s_b_2_7|s_b_2_9 */
    auto s_b_2_10 = emitter.bitwise_or(s_b_2_7, s_b_2_9);
    /* execute.simd:2912 [F] s_b_2_11=sym_23072_3_parameter_inst.rd (const) */
    /* execute.simd:2912 [D] s_b_2_12 = (v8u8)s_b_2_10 */
    auto s_b_2_12 = emitter.reinterpret(s_b_2_10, emitter.context().types().v8u8());
    /* execute.simd:2912 [D] s_b_2_13: WriteRegBank 15:s_b_2_11 = s_b_2_12 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_2_12,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_2_12);
    /* execute.simd:2913 [F] s_b_2_14=sym_23072_3_parameter_inst.rd (const) */
    /* execute.simd:2913 [F] s_b_2_15 = constant u64 0 (const) */
    /* execute.simd:2913 [F] s_b_2_16: WriteRegBank 3:s_b_2_14 = s_b_2_15 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_2_17: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:2918 [F] s_b_3_0=sym_23072_3_parameter_inst.rn (const) */
    /* execute.simd:2918 [D] s_b_3_1 = ReadRegBank 16:s_b_3_0 (v16u8) */
    auto s_b_3_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_3_1,emitter.const_u8(16));
    }
    /* execute.simd:2918 [D] s_b_3_2 = (v16s8)s_b_3_1 */
    auto s_b_3_2 = emitter.reinterpret(s_b_3_1, emitter.context().types().v16s8());
    /* execute.simd:2919 [F] s_b_3_3=sym_23072_3_parameter_inst.rm (const) */
    /* execute.simd:2919 [D] s_b_3_4 = ReadRegBank 16:s_b_3_3 (v16u8) */
    auto s_b_3_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_3_4,emitter.const_u8(16));
    }
    /* execute.simd:2919 [D] s_b_3_5 = (v16s8)s_b_3_4 */
    auto s_b_3_5 = emitter.reinterpret(s_b_3_4, emitter.context().types().v16s8());
    /* execute.simd:2921 [D] s_b_3_6 = s_b_3_2>s_b_3_5 */
    auto s_b_3_6 = emitter.cmp_gt(s_b_3_2, s_b_3_5);
    /* execute.simd:2922 [D] s_b_3_7 = s_b_3_2&s_b_3_6 */
    auto s_b_3_7 = emitter.bitwise_and(s_b_3_2, s_b_3_6);
    /* execute.simd:2922 [D] s_b_3_8 = ~s_b_3_6 */
    auto s_b_3_8 = emitter.bitwise_not(s_b_3_6);
    /* execute.simd:2922 [D] s_b_3_9 = s_b_3_5&s_b_3_8 */
    auto s_b_3_9 = emitter.bitwise_and(s_b_3_5, s_b_3_8);
    /* execute.simd:2922 [D] s_b_3_10 = s_b_3_7|s_b_3_9 */
    auto s_b_3_10 = emitter.bitwise_or(s_b_3_7, s_b_3_9);
    /* execute.simd:2924 [F] s_b_3_11=sym_23072_3_parameter_inst.rd (const) */
    /* execute.simd:2924 [D] s_b_3_12 = (v16u8)s_b_3_10 */
    auto s_b_3_12 = emitter.reinterpret(s_b_3_10, emitter.context().types().v16u8());
    /* execute.simd:2924 [D] s_b_3_13: WriteRegBank 16:s_b_3_11 = s_b_3_12 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_3_12,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_3_12);
    /* execute.simd:0 [F] s_b_3_14: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_4: 
  {
    /* execute.simd:2928 [F] s_b_4_0=sym_23072_3_parameter_inst.rn (const) */
    /* execute.simd:2928 [D] s_b_4_1 = ReadRegBank 17:s_b_4_0 (v4u16) */
    auto s_b_4_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_4_1,emitter.const_u8(8));
    }
    /* execute.simd:2928 [D] s_b_4_2 = (v4s16)s_b_4_1 */
    auto s_b_4_2 = emitter.reinterpret(s_b_4_1, emitter.context().types().v4s16());
    /* execute.simd:2929 [F] s_b_4_3=sym_23072_3_parameter_inst.rm (const) */
    /* execute.simd:2929 [D] s_b_4_4 = ReadRegBank 17:s_b_4_3 (v4u16) */
    auto s_b_4_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_4_4,emitter.const_u8(8));
    }
    /* execute.simd:2929 [D] s_b_4_5 = (v4s16)s_b_4_4 */
    auto s_b_4_5 = emitter.reinterpret(s_b_4_4, emitter.context().types().v4s16());
    /* execute.simd:2931 [D] s_b_4_6 = s_b_4_2>s_b_4_5 */
    auto s_b_4_6 = emitter.cmp_gt(s_b_4_2, s_b_4_5);
    /* execute.simd:2932 [D] s_b_4_7 = s_b_4_2&s_b_4_6 */
    auto s_b_4_7 = emitter.bitwise_and(s_b_4_2, s_b_4_6);
    /* execute.simd:2932 [D] s_b_4_8 = ~s_b_4_6 */
    auto s_b_4_8 = emitter.bitwise_not(s_b_4_6);
    /* execute.simd:2932 [D] s_b_4_9 = s_b_4_5&s_b_4_8 */
    auto s_b_4_9 = emitter.bitwise_and(s_b_4_5, s_b_4_8);
    /* execute.simd:2932 [D] s_b_4_10 = s_b_4_7|s_b_4_9 */
    auto s_b_4_10 = emitter.bitwise_or(s_b_4_7, s_b_4_9);
    /* execute.simd:2934 [F] s_b_4_11=sym_23072_3_parameter_inst.rd (const) */
    /* execute.simd:2934 [D] s_b_4_12 = (v4u16)s_b_4_10 */
    auto s_b_4_12 = emitter.reinterpret(s_b_4_10, emitter.context().types().v4u16());
    /* execute.simd:2934 [D] s_b_4_13: WriteRegBank 17:s_b_4_11 = s_b_4_12 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_12,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_12);
    /* execute.simd:2935 [F] s_b_4_14=sym_23072_3_parameter_inst.rd (const) */
    /* execute.simd:2935 [F] s_b_4_15 = constant u64 0 (const) */
    /* execute.simd:2935 [F] s_b_4_16: WriteRegBank 3:s_b_4_14 = s_b_4_15 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_4_17: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_5: 
  {
    /* execute.simd:2939 [F] s_b_5_0=sym_23072_3_parameter_inst.rn (const) */
    /* execute.simd:2939 [D] s_b_5_1 = ReadRegBank 18:s_b_5_0 (v8u16) */
    auto s_b_5_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_5_1,emitter.const_u8(16));
    }
    /* execute.simd:2939 [D] s_b_5_2 = (v8s16)s_b_5_1 */
    auto s_b_5_2 = emitter.reinterpret(s_b_5_1, emitter.context().types().v8s16());
    /* execute.simd:2940 [F] s_b_5_3=sym_23072_3_parameter_inst.rm (const) */
    /* execute.simd:2940 [D] s_b_5_4 = ReadRegBank 18:s_b_5_3 (v8u16) */
    auto s_b_5_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_5_4,emitter.const_u8(16));
    }
    /* execute.simd:2940 [D] s_b_5_5 = (v8s16)s_b_5_4 */
    auto s_b_5_5 = emitter.reinterpret(s_b_5_4, emitter.context().types().v8s16());
    /* execute.simd:2942 [D] s_b_5_6 = s_b_5_2>s_b_5_5 */
    auto s_b_5_6 = emitter.cmp_gt(s_b_5_2, s_b_5_5);
    /* execute.simd:2943 [D] s_b_5_7 = s_b_5_2&s_b_5_6 */
    auto s_b_5_7 = emitter.bitwise_and(s_b_5_2, s_b_5_6);
    /* execute.simd:2943 [D] s_b_5_8 = ~s_b_5_6 */
    auto s_b_5_8 = emitter.bitwise_not(s_b_5_6);
    /* execute.simd:2943 [D] s_b_5_9 = s_b_5_5&s_b_5_8 */
    auto s_b_5_9 = emitter.bitwise_and(s_b_5_5, s_b_5_8);
    /* execute.simd:2943 [D] s_b_5_10 = s_b_5_7|s_b_5_9 */
    auto s_b_5_10 = emitter.bitwise_or(s_b_5_7, s_b_5_9);
    /* execute.simd:2945 [F] s_b_5_11=sym_23072_3_parameter_inst.rd (const) */
    /* execute.simd:2945 [D] s_b_5_12 = (v8u16)s_b_5_10 */
    auto s_b_5_12 = emitter.reinterpret(s_b_5_10, emitter.context().types().v8u16());
    /* execute.simd:2945 [D] s_b_5_13: WriteRegBank 18:s_b_5_11 = s_b_5_12 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_12,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_12);
    /* execute.simd:0 [F] s_b_5_14: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_6: 
  {
    /* execute.simd:2949 [F] s_b_6_0=sym_23072_3_parameter_inst.rn (const) */
    /* execute.simd:2949 [D] s_b_6_1 = ReadRegBank 19:s_b_6_0 (v2u32) */
    auto s_b_6_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_6_1,emitter.const_u8(8));
    }
    /* execute.simd:2949 [D] s_b_6_2 = (v2s32)s_b_6_1 */
    auto s_b_6_2 = emitter.reinterpret(s_b_6_1, emitter.context().types().v2s32());
    /* execute.simd:2950 [F] s_b_6_3=sym_23072_3_parameter_inst.rm (const) */
    /* execute.simd:2950 [D] s_b_6_4 = ReadRegBank 19:s_b_6_3 (v2u32) */
    auto s_b_6_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_6_4,emitter.const_u8(8));
    }
    /* execute.simd:2950 [D] s_b_6_5 = (v2s32)s_b_6_4 */
    auto s_b_6_5 = emitter.reinterpret(s_b_6_4, emitter.context().types().v2s32());
    /* execute.simd:2952 [D] s_b_6_6 = s_b_6_2>s_b_6_5 */
    auto s_b_6_6 = emitter.cmp_gt(s_b_6_2, s_b_6_5);
    /* execute.simd:2953 [D] s_b_6_7 = s_b_6_2&s_b_6_6 */
    auto s_b_6_7 = emitter.bitwise_and(s_b_6_2, s_b_6_6);
    /* execute.simd:2953 [D] s_b_6_8 = ~s_b_6_6 */
    auto s_b_6_8 = emitter.bitwise_not(s_b_6_6);
    /* execute.simd:2953 [D] s_b_6_9 = s_b_6_5&s_b_6_8 */
    auto s_b_6_9 = emitter.bitwise_and(s_b_6_5, s_b_6_8);
    /* execute.simd:2953 [D] s_b_6_10 = s_b_6_7|s_b_6_9 */
    auto s_b_6_10 = emitter.bitwise_or(s_b_6_7, s_b_6_9);
    /* execute.simd:2955 [F] s_b_6_11=sym_23072_3_parameter_inst.rd (const) */
    /* execute.simd:2955 [D] s_b_6_12 = (v2u32)s_b_6_10 */
    auto s_b_6_12 = emitter.reinterpret(s_b_6_10, emitter.context().types().v2u32());
    /* execute.simd:2955 [D] s_b_6_13: WriteRegBank 19:s_b_6_11 = s_b_6_12 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_12,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_12);
    /* execute.simd:2956 [F] s_b_6_14=sym_23072_3_parameter_inst.rd (const) */
    /* execute.simd:2956 [F] s_b_6_15 = constant u64 0 (const) */
    /* execute.simd:2956 [F] s_b_6_16: WriteRegBank 3:s_b_6_14 = s_b_6_15 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_6_17: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_7: 
  {
    /* execute.simd:2960 [F] s_b_7_0=sym_23072_3_parameter_inst.rn (const) */
    /* execute.simd:2960 [D] s_b_7_1 = ReadRegBank 20:s_b_7_0 (v4u32) */
    auto s_b_7_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_7_1,emitter.const_u8(16));
    }
    /* execute.simd:2960 [D] s_b_7_2 = (v4s32)s_b_7_1 */
    auto s_b_7_2 = emitter.reinterpret(s_b_7_1, emitter.context().types().v4s32());
    /* execute.simd:2961 [F] s_b_7_3=sym_23072_3_parameter_inst.rm (const) */
    /* execute.simd:2961 [D] s_b_7_4 = ReadRegBank 20:s_b_7_3 (v4u32) */
    auto s_b_7_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_7_4,emitter.const_u8(16));
    }
    /* execute.simd:2961 [D] s_b_7_5 = (v4s32)s_b_7_4 */
    auto s_b_7_5 = emitter.reinterpret(s_b_7_4, emitter.context().types().v4s32());
    /* execute.simd:2963 [D] s_b_7_6 = s_b_7_2>s_b_7_5 */
    auto s_b_7_6 = emitter.cmp_gt(s_b_7_2, s_b_7_5);
    /* execute.simd:2964 [D] s_b_7_7 = s_b_7_2&s_b_7_6 */
    auto s_b_7_7 = emitter.bitwise_and(s_b_7_2, s_b_7_6);
    /* execute.simd:2964 [D] s_b_7_8 = ~s_b_7_6 */
    auto s_b_7_8 = emitter.bitwise_not(s_b_7_6);
    /* execute.simd:2964 [D] s_b_7_9 = s_b_7_5&s_b_7_8 */
    auto s_b_7_9 = emitter.bitwise_and(s_b_7_5, s_b_7_8);
    /* execute.simd:2964 [D] s_b_7_10 = s_b_7_7|s_b_7_9 */
    auto s_b_7_10 = emitter.bitwise_or(s_b_7_7, s_b_7_9);
    /* execute.simd:2966 [F] s_b_7_11=sym_23072_3_parameter_inst.rd (const) */
    /* execute.simd:2966 [D] s_b_7_12 = (v4u32)s_b_7_10 */
    auto s_b_7_12 = emitter.reinterpret(s_b_7_10, emitter.context().types().v4u32());
    /* execute.simd:2966 [D] s_b_7_13: WriteRegBank 20:s_b_7_11 = s_b_7_12 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_12,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_12);
    /* execute.simd:0 [F] s_b_7_14: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_8: 
  {
    /* execute.simd:2970 [D] s_b_8_0 = trap */
    emitter.raise(emitter.const_u8(0));
    /* execute.simd:0 [F] s_b_8_1: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_sshl(const arm64_decode_a64_SIMD_THREE_SAME&insn, captive::arch::dbt::el::Emitter& emitter)
{
  std::queue<captive::arch::dbt::el::Block *> dynamic_block_queue;
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto block_b_2 = emitter.context().create_block();
  auto block_b_4 = emitter.context().create_block();
  auto block_b_5 = emitter.context().create_block();
  auto block_b_7 = emitter.context().create_block();
  auto block_b_8 = emitter.context().create_block();
  auto block_b_9 = emitter.context().create_block();
  auto block_b_10 = emitter.context().create_block();
  auto block_b_11 = emitter.context().create_block();
  auto block_b_12 = emitter.context().create_block();
  auto block_b_13 = emitter.context().create_block();
  auto block_b_14 = emitter.context().create_block();
  auto block_b_15 = emitter.context().create_block();
  auto block_b_16 = emitter.context().create_block();
  auto block_b_17 = emitter.context().create_block();
  auto block_b_18 = emitter.context().create_block();
  auto block_b_19 = emitter.context().create_block();
  auto block_b_20 = emitter.context().create_block();
  auto block_b_21 = emitter.context().create_block();
  auto block_b_22 = emitter.context().create_block();
  auto block_b_23 = emitter.context().create_block();
  auto block_b_24 = emitter.context().create_block();
  auto block_b_25 = emitter.context().create_block();
  auto block_b_26 = emitter.context().create_block();
  auto block_b_27 = emitter.context().create_block();
  auto block_b_28 = emitter.context().create_block();
  auto block_b_29 = emitter.context().create_block();
  auto block_b_30 = emitter.context().create_block();
  auto block_b_32 = emitter.context().create_block();
  auto block_b_33 = emitter.context().create_block();
  auto block_b_34 = emitter.context().create_block();
  auto block_b_35 = emitter.context().create_block();
  auto block_b_36 = emitter.context().create_block();
  auto block_b_37 = emitter.context().create_block();
  auto block_b_38 = emitter.context().create_block();
  auto block_b_39 = emitter.context().create_block();
  auto block_b_40 = emitter.context().create_block();
  auto block_b_41 = emitter.context().create_block();
  auto block_b_42 = emitter.context().create_block();
  auto block_b_43 = emitter.context().create_block();
  auto block_b_44 = emitter.context().create_block();
  auto block_b_45 = emitter.context().create_block();
  auto block_b_46 = emitter.context().create_block();
  auto block_b_47 = emitter.context().create_block();
  auto block_b_48 = emitter.context().create_block();
  auto block_b_49 = emitter.context().create_block();
  auto block_b_50 = emitter.context().create_block();
  auto block_b_51 = emitter.context().create_block();
  auto block_b_52 = emitter.context().create_block();
  auto block_b_53 = emitter.context().create_block();
  auto block_b_54 = emitter.context().create_block();
  auto block_b_55 = emitter.context().create_block();
  auto block_b_56 = emitter.context().create_block();
  auto block_b_57 = emitter.context().create_block();
  auto block_b_58 = emitter.context().create_block();
  auto block_b_59 = emitter.context().create_block();
  auto block_b_60 = emitter.context().create_block();
  auto block_b_61 = emitter.context().create_block();
  auto block_b_62 = emitter.context().create_block();
  auto block_b_63 = emitter.context().create_block();
  auto block_b_64 = emitter.context().create_block();
  auto block_b_65 = emitter.context().create_block();
  auto block_b_66 = emitter.context().create_block();
  auto block_b_67 = emitter.context().create_block();
  auto block_b_68 = emitter.context().create_block();
  auto block_b_69 = emitter.context().create_block();
  auto block_b_70 = emitter.context().create_block();
  auto block_b_71 = emitter.context().create_block();
  auto block_b_72 = emitter.context().create_block();
  auto block_b_73 = emitter.context().create_block();
  auto block_b_74 = emitter.context().create_block();
  auto block_b_75 = emitter.context().create_block();
  auto block_b_76 = emitter.context().create_block();
  auto block_b_77 = emitter.context().create_block();
  auto block_b_78 = emitter.context().create_block();
  auto block_b_79 = emitter.context().create_block();
  auto block_b_81 = emitter.context().create_block();
  auto block_b_82 = emitter.context().create_block();
  auto block_b_83 = emitter.context().create_block();
  auto block_b_84 = emitter.context().create_block();
  auto block_b_85 = emitter.context().create_block();
  auto block_b_86 = emitter.context().create_block();
  auto block_b_87 = emitter.context().create_block();
  auto block_b_88 = emitter.context().create_block();
  auto block_b_89 = emitter.context().create_block();
  auto block_b_90 = emitter.context().create_block();
  auto block_b_91 = emitter.context().create_block();
  auto block_b_92 = emitter.context().create_block();
  auto block_b_94 = emitter.context().create_block();
  auto block_b_95 = emitter.context().create_block();
  auto block_b_96 = emitter.context().create_block();
  auto block_b_97 = emitter.context().create_block();
  auto block_b_98 = emitter.context().create_block();
  auto block_b_99 = emitter.context().create_block();
  auto block_b_100 = emitter.context().create_block();
  auto block_b_101 = emitter.context().create_block();
  auto block_b_102 = emitter.context().create_block();
  auto block_b_103 = emitter.context().create_block();
  auto block_b_104 = emitter.context().create_block();
  auto block_b_105 = emitter.context().create_block();
  auto block_b_106 = emitter.context().create_block();
  auto block_b_107 = emitter.context().create_block();
  auto block_b_108 = emitter.context().create_block();
  auto block_b_109 = emitter.context().create_block();
  auto block_b_110 = emitter.context().create_block();
  auto block_b_111 = emitter.context().create_block();
  auto block_b_112 = emitter.context().create_block();
  auto block_b_113 = emitter.context().create_block();
  auto block_b_114 = emitter.context().create_block();
  auto block_b_115 = emitter.context().create_block();
  auto block_b_116 = emitter.context().create_block();
  auto block_b_117 = emitter.context().create_block();
  auto block_b_119 = emitter.context().create_block();
  auto block_b_120 = emitter.context().create_block();
  auto block_b_121 = emitter.context().create_block();
  auto block_b_122 = emitter.context().create_block();
  auto block_b_123 = emitter.context().create_block();
  auto block_b_124 = emitter.context().create_block();
  auto block_b_126 = emitter.context().create_block();
  auto block_b_127 = emitter.context().create_block();
  auto block_b_128 = emitter.context().create_block();
  auto block_b_129 = emitter.context().create_block();
  auto block_b_130 = emitter.context().create_block();
  auto block_b_131 = emitter.context().create_block();
  auto block_b_132 = emitter.context().create_block();
  auto block_b_133 = emitter.context().create_block();
  auto block_b_134 = emitter.context().create_block();
  auto block_b_135 = emitter.context().create_block();
  auto block_b_136 = emitter.context().create_block();
  auto block_b_137 = emitter.context().create_block();
  auto block_b_139 = emitter.context().create_block();
  auto block_b_140 = emitter.context().create_block();
  auto block_b_141 = emitter.context().create_block();
  auto block_b_142 = emitter.context().create_block();
  auto block_b_143 = emitter.context().create_block();
  auto block_b_144 = emitter.context().create_block();
  auto DV_sym_25786_0_rn = emitter.alloc_local(emitter.context().types().s64(), true);
  auto DV_sym_25791_0_rm = emitter.alloc_local(emitter.context().types().s64(), true);
  auto DV_sym_25824_0_rn = emitter.alloc_local(emitter.context().types().v8s8(), true);
  auto DV_sym_25829_0_rm = emitter.alloc_local(emitter.context().types().v8s8(), true);
  wutils::Vector<uint8_t, 16> CV_sym_25834_0_rd;
  auto DV_sym_25834_0_rd = emitter.alloc_local(emitter.context().types().v16u8(), true);
  auto DV_sym_26231_0_rn = emitter.alloc_local(emitter.context().types().v16s8(), true);
  auto DV_sym_26236_0_rm = emitter.alloc_local(emitter.context().types().v16s8(), true);
  wutils::Vector<uint8_t, 16> CV_sym_26241_0_rd;
  auto DV_sym_26241_0_rd = emitter.alloc_local(emitter.context().types().v16u8(), true);
  auto DV_sym_27022_0_rn = emitter.alloc_local(emitter.context().types().v4s16(), true);
  auto DV_sym_27027_0_rm = emitter.alloc_local(emitter.context().types().v4s16(), true);
  wutils::Vector<uint16_t, 8> CV_sym_27032_0_rd;
  auto DV_sym_27032_0_rd = emitter.alloc_local(emitter.context().types().v8u16(), true);
  auto DV_sym_27237_0_rn = emitter.alloc_local(emitter.context().types().v8s16(), true);
  auto DV_sym_27242_0_rm = emitter.alloc_local(emitter.context().types().v8s16(), true);
  wutils::Vector<uint16_t, 8> CV_sym_27247_0_rd;
  auto DV_sym_27247_0_rd = emitter.alloc_local(emitter.context().types().v8u16(), true);
  auto DV_sym_27644_0_rn = emitter.alloc_local(emitter.context().types().v2s32(), true);
  auto DV_sym_27649_0_rm = emitter.alloc_local(emitter.context().types().v2s32(), true);
  wutils::Vector<uint32_t, 4> CV_sym_27654_0_rd;
  auto DV_sym_27654_0_rd = emitter.alloc_local(emitter.context().types().v4u32(), true);
  auto DV_sym_27761_0_rn = emitter.alloc_local(emitter.context().types().v4s32(), true);
  auto DV_sym_27766_0_rm = emitter.alloc_local(emitter.context().types().v4s32(), true);
  wutils::Vector<uint32_t, 4> CV_sym_27771_0_rd;
  auto DV_sym_27771_0_rd = emitter.alloc_local(emitter.context().types().v4u32(), true);
  auto DV_sym_27972_0_rn = emitter.alloc_local(emitter.context().types().v2s64(), true);
  auto DV_sym_27977_0_rm = emitter.alloc_local(emitter.context().types().v2s64(), true);
  wutils::Vector<uint64_t, 2> CV_sym_27982_0_rd;
  auto DV_sym_27982_0_rd = emitter.alloc_local(emitter.context().types().v2u64(), true);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:3189 [F] s_b_0_0=sym_25777_3_parameter_inst.SCALAR (const) */
    /* execute.simd:3189 [F] s_b_0_1: If s_b_0_0: Jump b_1 else b_3 (const) */
    if (insn.SCALAR) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.simd:3190 [F] s_b_1_0=sym_25777_3_parameter_inst.rn (const) */
    /* execute.simd:6355 [D] s_b_1_1 = ReadRegBank 7:s_b_1_0 (u64) */
    auto s_b_1_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_1_1,emitter.const_u8(8));
    }
    /* execute.simd:3190 [D] s_b_1_2 = (s64)s_b_1_1 */
    auto s_b_1_2 = emitter.reinterpret(s_b_1_1, emitter.context().types().s64());
    /* execute.simd:3190 [D] s_b_1_3: sym_25786_0_rn = s_b_1_2, dominates: s_b_4_1 s_b_5_1  */
    emitter.store_local(DV_sym_25786_0_rn, s_b_1_2);
    /* execute.simd:3191 [F] s_b_1_4=sym_25777_3_parameter_inst.rm (const) */
    /* execute.simd:6355 [D] s_b_1_5 = ReadRegBank 7:s_b_1_4 (u64) */
    auto s_b_1_5 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_1_5,emitter.const_u8(8));
    }
    /* execute.simd:3191 [D] s_b_1_6 = (s64)s_b_1_5 */
    auto s_b_1_6 = emitter.reinterpret(s_b_1_5, emitter.context().types().s64());
    /* execute.simd:3191 [D] s_b_1_7: sym_25791_0_rm = s_b_1_6, dominates: s_b_4_2 s_b_5_2  */
    emitter.store_local(DV_sym_25791_0_rm, s_b_1_6);
    /* execute.simd:3193 [F] s_b_1_8 = constant s64 0 (const) */
    /* execute.simd:3193 [D] s_b_1_9 = s_b_1_6<s_b_1_8 */
    auto s_b_1_9 = emitter.cmp_lt(s_b_1_6, emitter.const_s64((int64_t)0ULL));
    /* execute.simd:3193 [D] s_b_1_10: If s_b_1_9: Jump b_4 else b_5 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_4;
        dynamic_block_queue.push(block_b_4);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_5;
        dynamic_block_queue.push(block_b_5);
        false_target = block;
      }
      emitter.branch(s_b_1_9, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_2 not fully fixed
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:3199 [F] s_b_3_0=sym_25777_3_parameter_inst.arrangement (const) */
    /* execute.simd:3200 [F] s_b_3_1 = constant s32 0 (const) */
    /* execute.simd:3216 [F] s_b_3_2 = constant s32 1 (const) */
    /* execute.simd:3232 [F] s_b_3_3 = constant s32 2 (const) */
    /* execute.simd:3248 [F] s_b_3_4 = constant s32 3 (const) */
    /* execute.simd:3264 [F] s_b_3_5 = constant s32 4 (const) */
    /* execute.simd:3280 [F] s_b_3_6 = constant s32 5 (const) */
    /* execute.simd:3296 [F] s_b_3_7 = constant s32 6 (const) */
    /* execute.simd:3199 [F] s_b_3_8: Switch s_b_3_0: < <todo> > def b_145 (const) -> b_6, b_31, b_80, b_93, b_118, b_125, b_138, b_145,  */
    switch (insn.arrangement) 
    {
    case (int32_t)0ULL:
      goto fixed_block_b_6;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_31;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_80;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_93;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_118;
      break;
    case (int32_t)5ULL:
      goto fixed_block_b_125;
      break;
    case (int32_t)6ULL:
      goto fixed_block_b_138;
      break;
    default:
      goto fixed_block_b_145;
    }
  }
  // BLOCK b_4 not fully fixed
  // BLOCK b_5 not fully fixed
  /* b_3,  */
  fixed_block_b_6: 
  {
    /* execute.simd:3201 [F] s_b_6_0=sym_25777_3_parameter_inst.rn (const) */
    /* execute.simd:3201 [D] s_b_6_1 = ReadRegBank 15:s_b_6_0 (v8u8) */
    auto s_b_6_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_6_1,emitter.const_u8(8));
    }
    /* execute.simd:3201 [D] s_b_6_2 = (v8s8)s_b_6_1 */
    auto s_b_6_2 = emitter.reinterpret(s_b_6_1, emitter.context().types().v8s8());
    /* execute.simd:3201 [D] s_b_6_3: sym_25824_0_rn = s_b_6_2, dominates: s_b_7_0 s_b_10_0 s_b_13_0 s_b_16_0 s_b_19_0 s_b_22_0 s_b_25_0 s_b_28_0 s_b_30_0 s_b_27_0 s_b_24_0 s_b_21_0 s_b_18_0 s_b_15_0 s_b_12_0 s_b_9_0  */
    emitter.store_local(DV_sym_25824_0_rn, s_b_6_2);
    /* execute.simd:3202 [F] s_b_6_4=sym_25777_3_parameter_inst.rm (const) */
    /* execute.simd:3202 [D] s_b_6_5 = ReadRegBank 15:s_b_6_4 (v8u8) */
    auto s_b_6_5 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_6_5,emitter.const_u8(8));
    }
    /* execute.simd:3202 [D] s_b_6_6 = (v8s8)s_b_6_5 */
    auto s_b_6_6 = emitter.reinterpret(s_b_6_5, emitter.context().types().v8s8());
    /* execute.simd:3202 [D] s_b_6_7: sym_25829_0_rm = s_b_6_6, dominates: s_b_7_3 s_b_8_0 s_b_10_3 s_b_11_0 s_b_13_3 s_b_14_0 s_b_16_3 s_b_17_0 s_b_19_3 s_b_20_0 s_b_22_3 s_b_23_0 s_b_25_3 s_b_26_0 s_b_28_3 s_b_30_3 s_b_27_3 s_b_24_3 s_b_21_3 s_b_18_3 s_b_15_3 s_b_12_3 s_b_9_3  */
    emitter.store_local(DV_sym_25829_0_rm, s_b_6_6);
    /* ???:4294967295 [F] s_b_6_8 = constant v16u8 
    {
    }
    (const) */
    /* execute.simd:3204 [F] s_b_6_9: sym_25834_0_rd = s_b_6_8 (const), dominates: s_b_7_8 s_b_9_7  */
    CV_sym_25834_0_rd = wutils::Vector<uint8_t, 16>(0);
    emitter.store_local(DV_sym_25834_0_rd, emitter.constant_vector_splat(wutils::Vector<uint8_t, 16>(0)[0], emitter.context().types().v16u8()));
    /* ???:4294967295 [F] s_b_6_10 = constant u8 0 (const) */
    /* execute.simd:3206 [D] s_b_6_6[s_b_6_10] */
    auto s_b_6_11 = emitter.vector_extract(s_b_6_6, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3206 [F] s_b_6_12 = constant s32 0 (const) */
    /* execute.simd:3206 [D] s_b_6_13 = (s32)s_b_6_11 */
    auto s_b_6_13 = emitter.sx(s_b_6_11, emitter.context().types().s32());
    /* execute.simd:3206 [D] s_b_6_14 = s_b_6_13<s_b_6_12 */
    auto s_b_6_14 = emitter.cmp_lt(s_b_6_13, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3206 [D] s_b_6_15: If s_b_6_14: Jump b_7 else b_9 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_7;
        dynamic_block_queue.push(block_b_7);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_9;
        dynamic_block_queue.push(block_b_9);
        false_target = block;
      }
      emitter.branch(s_b_6_14, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_7 not fully fixed
  // BLOCK b_8 not fully fixed
  // BLOCK b_9 not fully fixed
  // BLOCK b_10 not fully fixed
  // BLOCK b_11 not fully fixed
  // BLOCK b_12 not fully fixed
  // BLOCK b_13 not fully fixed
  // BLOCK b_14 not fully fixed
  // BLOCK b_15 not fully fixed
  // BLOCK b_16 not fully fixed
  // BLOCK b_17 not fully fixed
  // BLOCK b_18 not fully fixed
  // BLOCK b_19 not fully fixed
  // BLOCK b_20 not fully fixed
  // BLOCK b_21 not fully fixed
  // BLOCK b_22 not fully fixed
  // BLOCK b_23 not fully fixed
  // BLOCK b_24 not fully fixed
  // BLOCK b_25 not fully fixed
  // BLOCK b_26 not fully fixed
  // BLOCK b_27 not fully fixed
  // BLOCK b_28 not fully fixed
  // BLOCK b_29 not fully fixed
  // BLOCK b_30 not fully fixed
  /* b_3,  */
  fixed_block_b_31: 
  {
    /* execute.simd:3217 [F] s_b_31_0=sym_25777_3_parameter_inst.rn (const) */
    /* execute.simd:3217 [D] s_b_31_1 = ReadRegBank 16:s_b_31_0 (v16u8) */
    auto s_b_31_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_31_1,emitter.const_u8(16));
    }
    /* execute.simd:3217 [D] s_b_31_2 = (v16s8)s_b_31_1 */
    auto s_b_31_2 = emitter.reinterpret(s_b_31_1, emitter.context().types().v16s8());
    /* execute.simd:3217 [D] s_b_31_3: sym_26231_0_rn = s_b_31_2, dominates: s_b_32_0 s_b_35_0 s_b_38_0 s_b_41_0 s_b_44_0 s_b_47_0 s_b_50_0 s_b_53_0 s_b_56_0 s_b_59_0 s_b_62_0 s_b_65_0 s_b_68_0 s_b_71_0 s_b_74_0 s_b_77_0 s_b_79_0 s_b_76_0 s_b_73_0 s_b_70_0 s_b_67_0 s_b_64_0 s_b_61_0 s_b_58_0 s_b_55_0 s_b_52_0 s_b_49_0 s_b_46_0 s_b_43_0 s_b_40_0 s_b_37_0 s_b_34_0  */
    emitter.store_local(DV_sym_26231_0_rn, s_b_31_2);
    /* execute.simd:3218 [F] s_b_31_4=sym_25777_3_parameter_inst.rm (const) */
    /* execute.simd:3218 [D] s_b_31_5 = ReadRegBank 16:s_b_31_4 (v16u8) */
    auto s_b_31_5 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_31_5,emitter.const_u8(16));
    }
    /* execute.simd:3218 [D] s_b_31_6 = (v16s8)s_b_31_5 */
    auto s_b_31_6 = emitter.reinterpret(s_b_31_5, emitter.context().types().v16s8());
    /* execute.simd:3218 [D] s_b_31_7: sym_26236_0_rm = s_b_31_6, dominates: s_b_32_3 s_b_33_0 s_b_35_3 s_b_36_0 s_b_38_3 s_b_39_0 s_b_41_3 s_b_42_0 s_b_44_3 s_b_45_0 s_b_47_3 s_b_48_0 s_b_50_3 s_b_51_0 s_b_53_3 s_b_54_0 s_b_56_3 s_b_57_0 s_b_59_3 s_b_60_0 s_b_62_3 s_b_63_0 s_b_65_3 s_b_66_0 s_b_68_3 s_b_69_0 s_b_71_3 s_b_72_0 s_b_74_3 s_b_75_0 s_b_77_3 s_b_79_3 s_b_76_3 s_b_73_3 s_b_70_3 s_b_67_3 s_b_64_3 s_b_61_3 s_b_58_3 s_b_55_3 s_b_52_3 s_b_49_3 s_b_46_3 s_b_43_3 s_b_40_3 s_b_37_3 s_b_34_3  */
    emitter.store_local(DV_sym_26236_0_rm, s_b_31_6);
    /* ???:4294967295 [F] s_b_31_8 = constant v16u8 
    {
    }
    (const) */
    /* execute.simd:3220 [F] s_b_31_9: sym_26241_0_rd = s_b_31_8 (const), dominates: s_b_32_8 s_b_34_7  */
    CV_sym_26241_0_rd = wutils::Vector<uint8_t, 16>(0);
    emitter.store_local(DV_sym_26241_0_rd, emitter.constant_vector_splat(wutils::Vector<uint8_t, 16>(0)[0], emitter.context().types().v16u8()));
    /* ???:4294967295 [F] s_b_31_10 = constant u8 0 (const) */
    /* execute.simd:3222 [D] s_b_31_6[s_b_31_10] */
    auto s_b_31_11 = emitter.vector_extract(s_b_31_6, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3222 [F] s_b_31_12 = constant s32 0 (const) */
    /* execute.simd:3222 [D] s_b_31_13 = (s32)s_b_31_11 */
    auto s_b_31_13 = emitter.sx(s_b_31_11, emitter.context().types().s32());
    /* execute.simd:3222 [D] s_b_31_14 = s_b_31_13<s_b_31_12 */
    auto s_b_31_14 = emitter.cmp_lt(s_b_31_13, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3222 [D] s_b_31_15: If s_b_31_14: Jump b_32 else b_34 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_32;
        dynamic_block_queue.push(block_b_32);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_34;
        dynamic_block_queue.push(block_b_34);
        false_target = block;
      }
      emitter.branch(s_b_31_14, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_32 not fully fixed
  // BLOCK b_33 not fully fixed
  // BLOCK b_34 not fully fixed
  // BLOCK b_35 not fully fixed
  // BLOCK b_36 not fully fixed
  // BLOCK b_37 not fully fixed
  // BLOCK b_38 not fully fixed
  // BLOCK b_39 not fully fixed
  // BLOCK b_40 not fully fixed
  // BLOCK b_41 not fully fixed
  // BLOCK b_42 not fully fixed
  // BLOCK b_43 not fully fixed
  // BLOCK b_44 not fully fixed
  // BLOCK b_45 not fully fixed
  // BLOCK b_46 not fully fixed
  // BLOCK b_47 not fully fixed
  // BLOCK b_48 not fully fixed
  // BLOCK b_49 not fully fixed
  // BLOCK b_50 not fully fixed
  // BLOCK b_51 not fully fixed
  // BLOCK b_52 not fully fixed
  // BLOCK b_53 not fully fixed
  // BLOCK b_54 not fully fixed
  // BLOCK b_55 not fully fixed
  // BLOCK b_56 not fully fixed
  // BLOCK b_57 not fully fixed
  // BLOCK b_58 not fully fixed
  // BLOCK b_59 not fully fixed
  // BLOCK b_60 not fully fixed
  // BLOCK b_61 not fully fixed
  // BLOCK b_62 not fully fixed
  // BLOCK b_63 not fully fixed
  // BLOCK b_64 not fully fixed
  // BLOCK b_65 not fully fixed
  // BLOCK b_66 not fully fixed
  // BLOCK b_67 not fully fixed
  // BLOCK b_68 not fully fixed
  // BLOCK b_69 not fully fixed
  // BLOCK b_70 not fully fixed
  // BLOCK b_71 not fully fixed
  // BLOCK b_72 not fully fixed
  // BLOCK b_73 not fully fixed
  // BLOCK b_74 not fully fixed
  // BLOCK b_75 not fully fixed
  // BLOCK b_76 not fully fixed
  // BLOCK b_77 not fully fixed
  // BLOCK b_78 not fully fixed
  // BLOCK b_79 not fully fixed
  /* b_3,  */
  fixed_block_b_80: 
  {
    /* execute.simd:3233 [F] s_b_80_0=sym_25777_3_parameter_inst.rn (const) */
    /* execute.simd:3233 [D] s_b_80_1 = ReadRegBank 17:s_b_80_0 (v4u16) */
    auto s_b_80_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_80_1,emitter.const_u8(8));
    }
    /* execute.simd:3233 [D] s_b_80_2 = (v4s16)s_b_80_1 */
    auto s_b_80_2 = emitter.reinterpret(s_b_80_1, emitter.context().types().v4s16());
    /* execute.simd:3233 [D] s_b_80_3: sym_27022_0_rn = s_b_80_2, dominates: s_b_81_0 s_b_84_0 s_b_87_0 s_b_90_0 s_b_92_0 s_b_89_0 s_b_86_0 s_b_83_0  */
    emitter.store_local(DV_sym_27022_0_rn, s_b_80_2);
    /* execute.simd:3234 [F] s_b_80_4=sym_25777_3_parameter_inst.rm (const) */
    /* execute.simd:3234 [D] s_b_80_5 = ReadRegBank 17:s_b_80_4 (v4u16) */
    auto s_b_80_5 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_80_5,emitter.const_u8(8));
    }
    /* execute.simd:3234 [D] s_b_80_6 = (v4s16)s_b_80_5 */
    auto s_b_80_6 = emitter.reinterpret(s_b_80_5, emitter.context().types().v4s16());
    /* execute.simd:3234 [D] s_b_80_7: sym_27027_0_rm = s_b_80_6, dominates: s_b_81_3 s_b_82_0 s_b_84_3 s_b_85_0 s_b_87_3 s_b_88_0 s_b_90_3 s_b_92_3 s_b_89_3 s_b_86_3 s_b_83_3  */
    emitter.store_local(DV_sym_27027_0_rm, s_b_80_6);
    /* ???:4294967295 [F] s_b_80_8 = constant v8u16 
    {
    }
    (const) */
    /* execute.simd:3236 [F] s_b_80_9: sym_27032_0_rd = s_b_80_8 (const), dominates: s_b_81_8 s_b_83_7  */
    CV_sym_27032_0_rd = wutils::Vector<uint16_t, 8>(0);
    emitter.store_local(DV_sym_27032_0_rd, emitter.constant_vector_splat(wutils::Vector<uint16_t, 8>(0)[0], emitter.context().types().v8u16()));
    /* ???:4294967295 [F] s_b_80_10 = constant u8 0 (const) */
    /* execute.simd:3238 [D] s_b_80_6[s_b_80_10] */
    auto s_b_80_11 = emitter.vector_extract(s_b_80_6, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3238 [F] s_b_80_12 = constant s32 0 (const) */
    /* execute.simd:3238 [D] s_b_80_13 = (s32)s_b_80_11 */
    auto s_b_80_13 = emitter.sx(s_b_80_11, emitter.context().types().s32());
    /* execute.simd:3238 [D] s_b_80_14 = s_b_80_13<s_b_80_12 */
    auto s_b_80_14 = emitter.cmp_lt(s_b_80_13, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3238 [D] s_b_80_15: If s_b_80_14: Jump b_81 else b_83 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_81;
        dynamic_block_queue.push(block_b_81);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_83;
        dynamic_block_queue.push(block_b_83);
        false_target = block;
      }
      emitter.branch(s_b_80_14, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_81 not fully fixed
  // BLOCK b_82 not fully fixed
  // BLOCK b_83 not fully fixed
  // BLOCK b_84 not fully fixed
  // BLOCK b_85 not fully fixed
  // BLOCK b_86 not fully fixed
  // BLOCK b_87 not fully fixed
  // BLOCK b_88 not fully fixed
  // BLOCK b_89 not fully fixed
  // BLOCK b_90 not fully fixed
  // BLOCK b_91 not fully fixed
  // BLOCK b_92 not fully fixed
  /* b_3,  */
  fixed_block_b_93: 
  {
    /* execute.simd:3249 [F] s_b_93_0=sym_25777_3_parameter_inst.rn (const) */
    /* execute.simd:3249 [D] s_b_93_1 = ReadRegBank 18:s_b_93_0 (v8u16) */
    auto s_b_93_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_93_1,emitter.const_u8(16));
    }
    /* execute.simd:3249 [D] s_b_93_2 = (v8s16)s_b_93_1 */
    auto s_b_93_2 = emitter.reinterpret(s_b_93_1, emitter.context().types().v8s16());
    /* execute.simd:3249 [D] s_b_93_3: sym_27237_0_rn = s_b_93_2, dominates: s_b_94_0 s_b_97_0 s_b_100_0 s_b_103_0 s_b_106_0 s_b_109_0 s_b_112_0 s_b_115_0 s_b_117_0 s_b_114_0 s_b_111_0 s_b_108_0 s_b_105_0 s_b_102_0 s_b_99_0 s_b_96_0  */
    emitter.store_local(DV_sym_27237_0_rn, s_b_93_2);
    /* execute.simd:3250 [F] s_b_93_4=sym_25777_3_parameter_inst.rm (const) */
    /* execute.simd:3250 [D] s_b_93_5 = ReadRegBank 18:s_b_93_4 (v8u16) */
    auto s_b_93_5 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_93_5,emitter.const_u8(16));
    }
    /* execute.simd:3250 [D] s_b_93_6 = (v8s16)s_b_93_5 */
    auto s_b_93_6 = emitter.reinterpret(s_b_93_5, emitter.context().types().v8s16());
    /* execute.simd:3250 [D] s_b_93_7: sym_27242_0_rm = s_b_93_6, dominates: s_b_94_3 s_b_95_0 s_b_97_3 s_b_98_0 s_b_100_3 s_b_101_0 s_b_103_3 s_b_104_0 s_b_106_3 s_b_107_0 s_b_109_3 s_b_110_0 s_b_112_3 s_b_113_0 s_b_115_3 s_b_117_3 s_b_114_3 s_b_111_3 s_b_108_3 s_b_105_3 s_b_102_3 s_b_99_3 s_b_96_3  */
    emitter.store_local(DV_sym_27242_0_rm, s_b_93_6);
    /* ???:4294967295 [F] s_b_93_8 = constant v8u16 
    {
    }
    (const) */
    /* execute.simd:3252 [F] s_b_93_9: sym_27247_0_rd = s_b_93_8 (const), dominates: s_b_94_8 s_b_96_7  */
    CV_sym_27247_0_rd = wutils::Vector<uint16_t, 8>(0);
    emitter.store_local(DV_sym_27247_0_rd, emitter.constant_vector_splat(wutils::Vector<uint16_t, 8>(0)[0], emitter.context().types().v8u16()));
    /* ???:4294967295 [F] s_b_93_10 = constant u8 0 (const) */
    /* execute.simd:3254 [D] s_b_93_6[s_b_93_10] */
    auto s_b_93_11 = emitter.vector_extract(s_b_93_6, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3254 [F] s_b_93_12 = constant s32 0 (const) */
    /* execute.simd:3254 [D] s_b_93_13 = (s32)s_b_93_11 */
    auto s_b_93_13 = emitter.sx(s_b_93_11, emitter.context().types().s32());
    /* execute.simd:3254 [D] s_b_93_14 = s_b_93_13<s_b_93_12 */
    auto s_b_93_14 = emitter.cmp_lt(s_b_93_13, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3254 [D] s_b_93_15: If s_b_93_14: Jump b_94 else b_96 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_94;
        dynamic_block_queue.push(block_b_94);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_96;
        dynamic_block_queue.push(block_b_96);
        false_target = block;
      }
      emitter.branch(s_b_93_14, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_94 not fully fixed
  // BLOCK b_95 not fully fixed
  // BLOCK b_96 not fully fixed
  // BLOCK b_97 not fully fixed
  // BLOCK b_98 not fully fixed
  // BLOCK b_99 not fully fixed
  // BLOCK b_100 not fully fixed
  // BLOCK b_101 not fully fixed
  // BLOCK b_102 not fully fixed
  // BLOCK b_103 not fully fixed
  // BLOCK b_104 not fully fixed
  // BLOCK b_105 not fully fixed
  // BLOCK b_106 not fully fixed
  // BLOCK b_107 not fully fixed
  // BLOCK b_108 not fully fixed
  // BLOCK b_109 not fully fixed
  // BLOCK b_110 not fully fixed
  // BLOCK b_111 not fully fixed
  // BLOCK b_112 not fully fixed
  // BLOCK b_113 not fully fixed
  // BLOCK b_114 not fully fixed
  // BLOCK b_115 not fully fixed
  // BLOCK b_116 not fully fixed
  // BLOCK b_117 not fully fixed
  /* b_3,  */
  fixed_block_b_118: 
  {
    /* execute.simd:3265 [F] s_b_118_0=sym_25777_3_parameter_inst.rn (const) */
    /* execute.simd:3265 [D] s_b_118_1 = ReadRegBank 19:s_b_118_0 (v2u32) */
    auto s_b_118_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_118_1,emitter.const_u8(8));
    }
    /* execute.simd:3265 [D] s_b_118_2 = (v2s32)s_b_118_1 */
    auto s_b_118_2 = emitter.reinterpret(s_b_118_1, emitter.context().types().v2s32());
    /* execute.simd:3265 [D] s_b_118_3: sym_27644_0_rn = s_b_118_2, dominates: s_b_119_0 s_b_122_0 s_b_124_0 s_b_121_0  */
    emitter.store_local(DV_sym_27644_0_rn, s_b_118_2);
    /* execute.simd:3266 [F] s_b_118_4=sym_25777_3_parameter_inst.rm (const) */
    /* execute.simd:3266 [D] s_b_118_5 = ReadRegBank 19:s_b_118_4 (v2u32) */
    auto s_b_118_5 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_118_5,emitter.const_u8(8));
    }
    /* execute.simd:3266 [D] s_b_118_6 = (v2s32)s_b_118_5 */
    auto s_b_118_6 = emitter.reinterpret(s_b_118_5, emitter.context().types().v2s32());
    /* execute.simd:3266 [D] s_b_118_7: sym_27649_0_rm = s_b_118_6, dominates: s_b_119_3 s_b_120_0 s_b_122_3 s_b_124_3 s_b_121_3  */
    emitter.store_local(DV_sym_27649_0_rm, s_b_118_6);
    /* ???:4294967295 [F] s_b_118_8 = constant v4u32 
    {
    }
    (const) */
    /* execute.simd:3268 [F] s_b_118_9: sym_27654_0_rd = s_b_118_8 (const), dominates: s_b_119_8 s_b_121_7  */
    CV_sym_27654_0_rd = wutils::Vector<uint32_t, 4>(0);
    emitter.store_local(DV_sym_27654_0_rd, emitter.constant_vector_splat(wutils::Vector<uint32_t, 4>(0)[0], emitter.context().types().v4u32()));
    /* ???:4294967295 [F] s_b_118_10 = constant u8 0 (const) */
    /* execute.simd:3270 [D] s_b_118_6[s_b_118_10] */
    auto s_b_118_11 = emitter.vector_extract(s_b_118_6, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3270 [F] s_b_118_12 = constant s32 0 (const) */
    /* execute.simd:3270 [D] s_b_118_13 = s_b_118_11<s_b_118_12 */
    auto s_b_118_13 = emitter.cmp_lt(s_b_118_11, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3270 [D] s_b_118_14: If s_b_118_13: Jump b_119 else b_121 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_119;
        dynamic_block_queue.push(block_b_119);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_121;
        dynamic_block_queue.push(block_b_121);
        false_target = block;
      }
      emitter.branch(s_b_118_13, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_119 not fully fixed
  // BLOCK b_120 not fully fixed
  // BLOCK b_121 not fully fixed
  // BLOCK b_122 not fully fixed
  // BLOCK b_123 not fully fixed
  // BLOCK b_124 not fully fixed
  /* b_3,  */
  fixed_block_b_125: 
  {
    /* execute.simd:3281 [F] s_b_125_0=sym_25777_3_parameter_inst.rn (const) */
    /* execute.simd:3281 [D] s_b_125_1 = ReadRegBank 20:s_b_125_0 (v4u32) */
    auto s_b_125_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_125_1,emitter.const_u8(16));
    }
    /* execute.simd:3281 [D] s_b_125_2 = (v4s32)s_b_125_1 */
    auto s_b_125_2 = emitter.reinterpret(s_b_125_1, emitter.context().types().v4s32());
    /* execute.simd:3281 [D] s_b_125_3: sym_27761_0_rn = s_b_125_2, dominates: s_b_126_0 s_b_129_0 s_b_132_0 s_b_135_0 s_b_137_0 s_b_134_0 s_b_131_0 s_b_128_0  */
    emitter.store_local(DV_sym_27761_0_rn, s_b_125_2);
    /* execute.simd:3282 [F] s_b_125_4=sym_25777_3_parameter_inst.rm (const) */
    /* execute.simd:3282 [D] s_b_125_5 = ReadRegBank 20:s_b_125_4 (v4u32) */
    auto s_b_125_5 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_125_5,emitter.const_u8(16));
    }
    /* execute.simd:3282 [D] s_b_125_6 = (v4s32)s_b_125_5 */
    auto s_b_125_6 = emitter.reinterpret(s_b_125_5, emitter.context().types().v4s32());
    /* execute.simd:3282 [D] s_b_125_7: sym_27766_0_rm = s_b_125_6, dominates: s_b_126_3 s_b_127_0 s_b_129_3 s_b_130_0 s_b_132_3 s_b_133_0 s_b_135_3 s_b_137_3 s_b_134_3 s_b_131_3 s_b_128_3  */
    emitter.store_local(DV_sym_27766_0_rm, s_b_125_6);
    /* ???:4294967295 [F] s_b_125_8 = constant v4u32 
    {
    }
    (const) */
    /* execute.simd:3284 [F] s_b_125_9: sym_27771_0_rd = s_b_125_8 (const), dominates: s_b_126_8 s_b_128_7  */
    CV_sym_27771_0_rd = wutils::Vector<uint32_t, 4>(0);
    emitter.store_local(DV_sym_27771_0_rd, emitter.constant_vector_splat(wutils::Vector<uint32_t, 4>(0)[0], emitter.context().types().v4u32()));
    /* ???:4294967295 [F] s_b_125_10 = constant u8 0 (const) */
    /* execute.simd:3286 [D] s_b_125_6[s_b_125_10] */
    auto s_b_125_11 = emitter.vector_extract(s_b_125_6, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3286 [F] s_b_125_12 = constant s32 0 (const) */
    /* execute.simd:3286 [D] s_b_125_13 = s_b_125_11<s_b_125_12 */
    auto s_b_125_13 = emitter.cmp_lt(s_b_125_11, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3286 [D] s_b_125_14: If s_b_125_13: Jump b_126 else b_128 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_126;
        dynamic_block_queue.push(block_b_126);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_128;
        dynamic_block_queue.push(block_b_128);
        false_target = block;
      }
      emitter.branch(s_b_125_13, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_126 not fully fixed
  // BLOCK b_127 not fully fixed
  // BLOCK b_128 not fully fixed
  // BLOCK b_129 not fully fixed
  // BLOCK b_130 not fully fixed
  // BLOCK b_131 not fully fixed
  // BLOCK b_132 not fully fixed
  // BLOCK b_133 not fully fixed
  // BLOCK b_134 not fully fixed
  // BLOCK b_135 not fully fixed
  // BLOCK b_136 not fully fixed
  // BLOCK b_137 not fully fixed
  /* b_3,  */
  fixed_block_b_138: 
  {
    /* execute.simd:3297 [F] s_b_138_0=sym_25777_3_parameter_inst.rn (const) */
    /* execute.simd:3297 [D] s_b_138_1 = ReadRegBank 21:s_b_138_0 (v2u64) */
    auto s_b_138_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_138_1,emitter.const_u8(16));
    }
    /* execute.simd:3297 [D] s_b_138_2 = (v2s64)s_b_138_1 */
    auto s_b_138_2 = emitter.reinterpret(s_b_138_1, emitter.context().types().v2s64());
    /* execute.simd:3297 [D] s_b_138_3: sym_27972_0_rn = s_b_138_2, dominates: s_b_139_0 s_b_142_0 s_b_144_0 s_b_141_0  */
    emitter.store_local(DV_sym_27972_0_rn, s_b_138_2);
    /* execute.simd:3298 [F] s_b_138_4=sym_25777_3_parameter_inst.rm (const) */
    /* execute.simd:3298 [D] s_b_138_5 = ReadRegBank 21:s_b_138_4 (v2u64) */
    auto s_b_138_5 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_138_5,emitter.const_u8(16));
    }
    /* execute.simd:3298 [D] s_b_138_6 = (v2s64)s_b_138_5 */
    auto s_b_138_6 = emitter.reinterpret(s_b_138_5, emitter.context().types().v2s64());
    /* execute.simd:3298 [D] s_b_138_7: sym_27977_0_rm = s_b_138_6, dominates: s_b_139_3 s_b_140_0 s_b_142_3 s_b_144_3 s_b_141_3  */
    emitter.store_local(DV_sym_27977_0_rm, s_b_138_6);
    /* ???:4294967295 [F] s_b_138_8 = constant v2u64 
    {
    }
    (const) */
    /* execute.simd:3300 [F] s_b_138_9: sym_27982_0_rd = s_b_138_8 (const), dominates: s_b_139_8 s_b_141_7  */
    CV_sym_27982_0_rd = wutils::Vector<uint64_t, 2>(0);
    emitter.store_local(DV_sym_27982_0_rd, emitter.constant_vector_splat(wutils::Vector<uint64_t, 2>(0)[0], emitter.context().types().v2u64()));
    /* ???:4294967295 [F] s_b_138_10 = constant u8 0 (const) */
    /* execute.simd:3302 [D] s_b_138_6[s_b_138_10] */
    auto s_b_138_11 = emitter.vector_extract(s_b_138_6, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3302 [F] s_b_138_12 = constant s64 0 (const) */
    /* execute.simd:3302 [D] s_b_138_13 = s_b_138_11<s_b_138_12 */
    auto s_b_138_13 = emitter.cmp_lt(s_b_138_11, emitter.const_s64((int64_t)0ULL));
    /* execute.simd:3302 [D] s_b_138_14: If s_b_138_13: Jump b_139 else b_141 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_139;
        dynamic_block_queue.push(block_b_139);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_141;
        dynamic_block_queue.push(block_b_141);
        false_target = block;
      }
      emitter.branch(s_b_138_13, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_139 not fully fixed
  // BLOCK b_140 not fully fixed
  // BLOCK b_141 not fully fixed
  // BLOCK b_142 not fully fixed
  // BLOCK b_143 not fully fixed
  // BLOCK b_144 not fully fixed
  /* b_3,  */
  fixed_block_b_145: 
  {
    /* execute.simd:3313 [D] s_b_145_0 = trap */
    emitter.raise(emitter.const_u8(0));
    /* execute.simd:0 [F] s_b_145_1: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  fixed_done:
  if (dynamic_block_queue.size() > 0) 
  {
    std::set<captive::arch::dbt::el::Block *> emitted_blocks;
    while (dynamic_block_queue.size() > 0) 
    {
      captive::arch::dbt::el::Block *block_index = dynamic_block_queue.front();
      dynamic_block_queue.pop();
      if (emitted_blocks.count(block_index)) continue;
      emitted_blocks.insert(block_index);
      if (block_index == block_b_2) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_2);
        /* ???:4294967295 [F] s_b_2_0: Return */
        emitter.jump(__exit_block);
      }
      else if (block_index == block_b_4) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_4);
        /* execute.simd:3194 [F] s_b_4_0=sym_25777_3_parameter_inst.rd (const) */
        /* execute.simd:3194 [D] s_b_4_1 = sym_25786_0_rn int64_t */
        auto s_b_4_1 = emitter.load_local(DV_sym_25786_0_rn, emitter.context().types().s64());
        /* execute.simd:3194 [D] s_b_4_2 = sym_25791_0_rm int64_t */
        auto s_b_4_2 = emitter.load_local(DV_sym_25791_0_rm, emitter.context().types().s64());
        /* execute.simd:3194 [D] s_b_4_3 = -s_b_4_2 */
        auto s_b_4_3 = emitter.neg(s_b_4_2);
        /* execute.simd:3194 [D] s_b_4_4 = s_b_4_1->>s_b_4_3 */
        auto s_b_4_4 = emitter.sar(s_b_4_1, s_b_4_3);
        /* execute.simd:3194 [D] s_b_4_5 = (u64)s_b_4_4 */
        auto s_b_4_5 = emitter.reinterpret(s_b_4_4, emitter.context().types().u64());
        /* execute.simd:6326 [D] s_b_4_6: WriteRegBank 2:s_b_4_0 = s_b_4_5 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_5,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_5);
        /* execute.simd:6327 [F] s_b_4_7 = constant u64 0 (const) */
        /* execute.simd:6327 [F] s_b_4_8: WriteRegBank 3:s_b_4_0 = s_b_4_7 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_4_9: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_5) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_5);
        /* execute.simd:3196 [F] s_b_5_0=sym_25777_3_parameter_inst.rd (const) */
        /* execute.simd:3196 [D] s_b_5_1 = sym_25786_0_rn int64_t */
        auto s_b_5_1 = emitter.load_local(DV_sym_25786_0_rn, emitter.context().types().s64());
        /* execute.simd:3196 [D] s_b_5_2 = sym_25791_0_rm int64_t */
        auto s_b_5_2 = emitter.load_local(DV_sym_25791_0_rm, emitter.context().types().s64());
        /* execute.simd:3196 [D] s_b_5_3 = s_b_5_1<<s_b_5_2 */
        auto s_b_5_3 = emitter.shl(s_b_5_1, s_b_5_2);
        /* execute.simd:3196 [D] s_b_5_4 = (u64)s_b_5_3 */
        auto s_b_5_4 = emitter.reinterpret(s_b_5_3, emitter.context().types().u64());
        /* execute.simd:6326 [D] s_b_5_5: WriteRegBank 2:s_b_5_0 = s_b_5_4 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_4,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_4);
        /* execute.simd:6327 [F] s_b_5_6 = constant u64 0 (const) */
        /* execute.simd:6327 [F] s_b_5_7: WriteRegBank 3:s_b_5_0 = s_b_5_6 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_5_8: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_7) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_7);
        /* execute.simd:3207 [D] s_b_7_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_7_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_7_1 = constant u8 0 (const) */
        /* execute.simd:3207 [D] s_b_7_0[s_b_7_1] */
        auto s_b_7_2 = emitter.vector_extract(s_b_7_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3207 [D] s_b_7_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_7_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_7_4 = constant u8 0 (const) */
        /* execute.simd:3207 [D] s_b_7_3[s_b_7_4] */
        auto s_b_7_5 = emitter.vector_extract(s_b_7_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3207 [D] s_b_7_6 = -s_b_7_5 */
        auto s_b_7_6 = emitter.neg(s_b_7_5);
        /* execute.simd:3207 [D] s_b_7_7 = s_b_7_2->>s_b_7_6 */
        auto s_b_7_7 = emitter.sar(s_b_7_2, s_b_7_6);
        /* execute.simd:3207 [F] s_b_7_8 = sym_25834_0_rd (const) wutils::Vector<uint8_t, 16> */
        wutils::Vector<uint8_t, 16> s_b_7_8 = CV_sym_25834_0_rd;
        /* execute.simd:3207 [D] s_b_7_9 = (u8)s_b_7_7 */
        auto s_b_7_9 = emitter.reinterpret(s_b_7_7, emitter.context().types().u8());
        /* execute.simd:3207 [F] s_b_7_10 = constant s32 0 (const) */
        /* execute.simd:3207 [D] s_b_7_11 = s_b_7_8[s_b_7_10] <= s_b_7_9 */
        auto s_b_7_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_7_8[0], emitter.context().types().v16u8()), emitter.const_s32((int32_t)0ULL), s_b_7_9);
        /* execute.simd:3207 [D] s_b_7_12: sym_25834_0_rd = s_b_7_11, dominates: s_b_10_8 s_b_12_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_7_11);
        /* execute.simd:3207 [F] s_b_7_13: Jump b_8 (const) */
        {
          auto block = block_b_8;
          dynamic_block_queue.push(block_b_8);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_8) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_8);
        /* execute.simd:3206 [D] s_b_8_0 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_8_0 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_8_1 = constant u8 1 (const) */
        /* execute.simd:3206 [D] s_b_8_0[s_b_8_1] */
        auto s_b_8_2 = emitter.vector_extract(s_b_8_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3206 [F] s_b_8_3 = constant s32 0 (const) */
        /* execute.simd:3206 [D] s_b_8_4 = (s32)s_b_8_2 */
        auto s_b_8_4 = emitter.sx(s_b_8_2, emitter.context().types().s32());
        /* execute.simd:3206 [D] s_b_8_5 = s_b_8_4<s_b_8_3 */
        auto s_b_8_5 = emitter.cmp_lt(s_b_8_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3206 [D] s_b_8_6: If s_b_8_5: Jump b_10 else b_12 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_10;
            dynamic_block_queue.push(block_b_10);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_12;
            dynamic_block_queue.push(block_b_12);
            false_target = block;
          }
          emitter.branch(s_b_8_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_9) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_9);
        /* execute.simd:3209 [D] s_b_9_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_9_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_9_1 = constant u8 0 (const) */
        /* execute.simd:3209 [D] s_b_9_0[s_b_9_1] */
        auto s_b_9_2 = emitter.vector_extract(s_b_9_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3209 [D] s_b_9_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_9_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_9_4 = constant u8 0 (const) */
        /* execute.simd:3209 [D] s_b_9_3[s_b_9_4] */
        auto s_b_9_5 = emitter.vector_extract(s_b_9_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3209 [D] s_b_9_6 = s_b_9_2<<s_b_9_5 */
        auto s_b_9_6 = emitter.shl(s_b_9_2, s_b_9_5);
        /* execute.simd:3209 [F] s_b_9_7 = sym_25834_0_rd (const) wutils::Vector<uint8_t, 16> */
        wutils::Vector<uint8_t, 16> s_b_9_7 = CV_sym_25834_0_rd;
        /* execute.simd:3209 [D] s_b_9_8 = (u8)s_b_9_6 */
        auto s_b_9_8 = emitter.reinterpret(s_b_9_6, emitter.context().types().u8());
        /* execute.simd:3209 [F] s_b_9_9 = constant s32 0 (const) */
        /* execute.simd:3209 [D] s_b_9_10 = s_b_9_7[s_b_9_9] <= s_b_9_8 */
        auto s_b_9_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_9_7[0], emitter.context().types().v16u8()), emitter.const_s32((int32_t)0ULL), s_b_9_8);
        /* execute.simd:3209 [D] s_b_9_11: sym_25834_0_rd = s_b_9_10, dominates: s_b_10_8 s_b_12_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_9_10);
        /* execute.simd:3209 [F] s_b_9_12: Jump b_8 (const) */
        {
          auto block = block_b_8;
          dynamic_block_queue.push(block_b_8);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_10) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_10);
        /* execute.simd:3207 [D] s_b_10_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_10_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_10_1 = constant u8 1 (const) */
        /* execute.simd:3207 [D] s_b_10_0[s_b_10_1] */
        auto s_b_10_2 = emitter.vector_extract(s_b_10_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3207 [D] s_b_10_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_10_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_10_4 = constant u8 1 (const) */
        /* execute.simd:3207 [D] s_b_10_3[s_b_10_4] */
        auto s_b_10_5 = emitter.vector_extract(s_b_10_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3207 [D] s_b_10_6 = -s_b_10_5 */
        auto s_b_10_6 = emitter.neg(s_b_10_5);
        /* execute.simd:3207 [D] s_b_10_7 = s_b_10_2->>s_b_10_6 */
        auto s_b_10_7 = emitter.sar(s_b_10_2, s_b_10_6);
        /* execute.simd:3207 [D] s_b_10_8 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_10_8 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3207 [D] s_b_10_9 = (u8)s_b_10_7 */
        auto s_b_10_9 = emitter.reinterpret(s_b_10_7, emitter.context().types().u8());
        /* execute.simd:3207 [F] s_b_10_10 = constant s32 1 (const) */
        /* execute.simd:3207 [D] s_b_10_11 = s_b_10_8[s_b_10_10] <= s_b_10_9 */
        auto s_b_10_11 = emitter.vector_insert(s_b_10_8, emitter.const_s32((int32_t)1ULL), s_b_10_9);
        /* execute.simd:3207 [D] s_b_10_12: sym_25834_0_rd = s_b_10_11, dominates: s_b_13_8 s_b_15_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_10_11);
        /* execute.simd:3207 [F] s_b_10_13: Jump b_11 (const) */
        {
          auto block = block_b_11;
          dynamic_block_queue.push(block_b_11);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_11) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_11);
        /* execute.simd:3206 [D] s_b_11_0 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_11_0 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_11_1 = constant u8 2 (const) */
        /* execute.simd:3206 [D] s_b_11_0[s_b_11_1] */
        auto s_b_11_2 = emitter.vector_extract(s_b_11_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3206 [F] s_b_11_3 = constant s32 0 (const) */
        /* execute.simd:3206 [D] s_b_11_4 = (s32)s_b_11_2 */
        auto s_b_11_4 = emitter.sx(s_b_11_2, emitter.context().types().s32());
        /* execute.simd:3206 [D] s_b_11_5 = s_b_11_4<s_b_11_3 */
        auto s_b_11_5 = emitter.cmp_lt(s_b_11_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3206 [D] s_b_11_6: If s_b_11_5: Jump b_13 else b_15 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_13;
            dynamic_block_queue.push(block_b_13);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_15;
            dynamic_block_queue.push(block_b_15);
            false_target = block;
          }
          emitter.branch(s_b_11_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_12) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_12);
        /* execute.simd:3209 [D] s_b_12_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_12_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_12_1 = constant u8 1 (const) */
        /* execute.simd:3209 [D] s_b_12_0[s_b_12_1] */
        auto s_b_12_2 = emitter.vector_extract(s_b_12_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3209 [D] s_b_12_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_12_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_12_4 = constant u8 1 (const) */
        /* execute.simd:3209 [D] s_b_12_3[s_b_12_4] */
        auto s_b_12_5 = emitter.vector_extract(s_b_12_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3209 [D] s_b_12_6 = s_b_12_2<<s_b_12_5 */
        auto s_b_12_6 = emitter.shl(s_b_12_2, s_b_12_5);
        /* execute.simd:3209 [D] s_b_12_7 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_12_7 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3209 [D] s_b_12_8 = (u8)s_b_12_6 */
        auto s_b_12_8 = emitter.reinterpret(s_b_12_6, emitter.context().types().u8());
        /* execute.simd:3209 [F] s_b_12_9 = constant s32 1 (const) */
        /* execute.simd:3209 [D] s_b_12_10 = s_b_12_7[s_b_12_9] <= s_b_12_8 */
        auto s_b_12_10 = emitter.vector_insert(s_b_12_7, emitter.const_s32((int32_t)1ULL), s_b_12_8);
        /* execute.simd:3209 [D] s_b_12_11: sym_25834_0_rd = s_b_12_10, dominates: s_b_13_8 s_b_15_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_12_10);
        /* execute.simd:3209 [F] s_b_12_12: Jump b_11 (const) */
        {
          auto block = block_b_11;
          dynamic_block_queue.push(block_b_11);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_13) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_13);
        /* execute.simd:3207 [D] s_b_13_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_13_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_13_1 = constant u8 2 (const) */
        /* execute.simd:3207 [D] s_b_13_0[s_b_13_1] */
        auto s_b_13_2 = emitter.vector_extract(s_b_13_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3207 [D] s_b_13_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_13_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_13_4 = constant u8 2 (const) */
        /* execute.simd:3207 [D] s_b_13_3[s_b_13_4] */
        auto s_b_13_5 = emitter.vector_extract(s_b_13_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3207 [D] s_b_13_6 = -s_b_13_5 */
        auto s_b_13_6 = emitter.neg(s_b_13_5);
        /* execute.simd:3207 [D] s_b_13_7 = s_b_13_2->>s_b_13_6 */
        auto s_b_13_7 = emitter.sar(s_b_13_2, s_b_13_6);
        /* execute.simd:3207 [D] s_b_13_8 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_13_8 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3207 [D] s_b_13_9 = (u8)s_b_13_7 */
        auto s_b_13_9 = emitter.reinterpret(s_b_13_7, emitter.context().types().u8());
        /* execute.simd:3207 [F] s_b_13_10 = constant s32 2 (const) */
        /* execute.simd:3207 [D] s_b_13_11 = s_b_13_8[s_b_13_10] <= s_b_13_9 */
        auto s_b_13_11 = emitter.vector_insert(s_b_13_8, emitter.const_s32((int32_t)2ULL), s_b_13_9);
        /* execute.simd:3207 [D] s_b_13_12: sym_25834_0_rd = s_b_13_11, dominates: s_b_16_8 s_b_18_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_13_11);
        /* execute.simd:3207 [F] s_b_13_13: Jump b_14 (const) */
        {
          auto block = block_b_14;
          dynamic_block_queue.push(block_b_14);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_14) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_14);
        /* execute.simd:3206 [D] s_b_14_0 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_14_0 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_14_1 = constant u8 3 (const) */
        /* execute.simd:3206 [D] s_b_14_0[s_b_14_1] */
        auto s_b_14_2 = emitter.vector_extract(s_b_14_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3206 [F] s_b_14_3 = constant s32 0 (const) */
        /* execute.simd:3206 [D] s_b_14_4 = (s32)s_b_14_2 */
        auto s_b_14_4 = emitter.sx(s_b_14_2, emitter.context().types().s32());
        /* execute.simd:3206 [D] s_b_14_5 = s_b_14_4<s_b_14_3 */
        auto s_b_14_5 = emitter.cmp_lt(s_b_14_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3206 [D] s_b_14_6: If s_b_14_5: Jump b_16 else b_18 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_16;
            dynamic_block_queue.push(block_b_16);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_18;
            dynamic_block_queue.push(block_b_18);
            false_target = block;
          }
          emitter.branch(s_b_14_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_15) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_15);
        /* execute.simd:3209 [D] s_b_15_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_15_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_15_1 = constant u8 2 (const) */
        /* execute.simd:3209 [D] s_b_15_0[s_b_15_1] */
        auto s_b_15_2 = emitter.vector_extract(s_b_15_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3209 [D] s_b_15_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_15_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_15_4 = constant u8 2 (const) */
        /* execute.simd:3209 [D] s_b_15_3[s_b_15_4] */
        auto s_b_15_5 = emitter.vector_extract(s_b_15_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3209 [D] s_b_15_6 = s_b_15_2<<s_b_15_5 */
        auto s_b_15_6 = emitter.shl(s_b_15_2, s_b_15_5);
        /* execute.simd:3209 [D] s_b_15_7 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_15_7 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3209 [D] s_b_15_8 = (u8)s_b_15_6 */
        auto s_b_15_8 = emitter.reinterpret(s_b_15_6, emitter.context().types().u8());
        /* execute.simd:3209 [F] s_b_15_9 = constant s32 2 (const) */
        /* execute.simd:3209 [D] s_b_15_10 = s_b_15_7[s_b_15_9] <= s_b_15_8 */
        auto s_b_15_10 = emitter.vector_insert(s_b_15_7, emitter.const_s32((int32_t)2ULL), s_b_15_8);
        /* execute.simd:3209 [D] s_b_15_11: sym_25834_0_rd = s_b_15_10, dominates: s_b_16_8 s_b_18_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_15_10);
        /* execute.simd:3209 [F] s_b_15_12: Jump b_14 (const) */
        {
          auto block = block_b_14;
          dynamic_block_queue.push(block_b_14);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_16) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_16);
        /* execute.simd:3207 [D] s_b_16_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_16_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_16_1 = constant u8 3 (const) */
        /* execute.simd:3207 [D] s_b_16_0[s_b_16_1] */
        auto s_b_16_2 = emitter.vector_extract(s_b_16_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3207 [D] s_b_16_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_16_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_16_4 = constant u8 3 (const) */
        /* execute.simd:3207 [D] s_b_16_3[s_b_16_4] */
        auto s_b_16_5 = emitter.vector_extract(s_b_16_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3207 [D] s_b_16_6 = -s_b_16_5 */
        auto s_b_16_6 = emitter.neg(s_b_16_5);
        /* execute.simd:3207 [D] s_b_16_7 = s_b_16_2->>s_b_16_6 */
        auto s_b_16_7 = emitter.sar(s_b_16_2, s_b_16_6);
        /* execute.simd:3207 [D] s_b_16_8 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_16_8 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3207 [D] s_b_16_9 = (u8)s_b_16_7 */
        auto s_b_16_9 = emitter.reinterpret(s_b_16_7, emitter.context().types().u8());
        /* execute.simd:3207 [F] s_b_16_10 = constant s32 3 (const) */
        /* execute.simd:3207 [D] s_b_16_11 = s_b_16_8[s_b_16_10] <= s_b_16_9 */
        auto s_b_16_11 = emitter.vector_insert(s_b_16_8, emitter.const_s32((int32_t)3ULL), s_b_16_9);
        /* execute.simd:3207 [D] s_b_16_12: sym_25834_0_rd = s_b_16_11, dominates: s_b_19_8 s_b_21_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_16_11);
        /* execute.simd:3207 [F] s_b_16_13: Jump b_17 (const) */
        {
          auto block = block_b_17;
          dynamic_block_queue.push(block_b_17);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_17) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_17);
        /* execute.simd:3206 [D] s_b_17_0 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_17_0 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_17_1 = constant u8 4 (const) */
        /* execute.simd:3206 [D] s_b_17_0[s_b_17_1] */
        auto s_b_17_2 = emitter.vector_extract(s_b_17_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3206 [F] s_b_17_3 = constant s32 0 (const) */
        /* execute.simd:3206 [D] s_b_17_4 = (s32)s_b_17_2 */
        auto s_b_17_4 = emitter.sx(s_b_17_2, emitter.context().types().s32());
        /* execute.simd:3206 [D] s_b_17_5 = s_b_17_4<s_b_17_3 */
        auto s_b_17_5 = emitter.cmp_lt(s_b_17_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3206 [D] s_b_17_6: If s_b_17_5: Jump b_19 else b_21 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_19;
            dynamic_block_queue.push(block_b_19);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_21;
            dynamic_block_queue.push(block_b_21);
            false_target = block;
          }
          emitter.branch(s_b_17_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_18) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_18);
        /* execute.simd:3209 [D] s_b_18_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_18_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_18_1 = constant u8 3 (const) */
        /* execute.simd:3209 [D] s_b_18_0[s_b_18_1] */
        auto s_b_18_2 = emitter.vector_extract(s_b_18_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3209 [D] s_b_18_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_18_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_18_4 = constant u8 3 (const) */
        /* execute.simd:3209 [D] s_b_18_3[s_b_18_4] */
        auto s_b_18_5 = emitter.vector_extract(s_b_18_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3209 [D] s_b_18_6 = s_b_18_2<<s_b_18_5 */
        auto s_b_18_6 = emitter.shl(s_b_18_2, s_b_18_5);
        /* execute.simd:3209 [D] s_b_18_7 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_18_7 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3209 [D] s_b_18_8 = (u8)s_b_18_6 */
        auto s_b_18_8 = emitter.reinterpret(s_b_18_6, emitter.context().types().u8());
        /* execute.simd:3209 [F] s_b_18_9 = constant s32 3 (const) */
        /* execute.simd:3209 [D] s_b_18_10 = s_b_18_7[s_b_18_9] <= s_b_18_8 */
        auto s_b_18_10 = emitter.vector_insert(s_b_18_7, emitter.const_s32((int32_t)3ULL), s_b_18_8);
        /* execute.simd:3209 [D] s_b_18_11: sym_25834_0_rd = s_b_18_10, dominates: s_b_19_8 s_b_21_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_18_10);
        /* execute.simd:3209 [F] s_b_18_12: Jump b_17 (const) */
        {
          auto block = block_b_17;
          dynamic_block_queue.push(block_b_17);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_19) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_19);
        /* execute.simd:3207 [D] s_b_19_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_19_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_19_1 = constant u8 4 (const) */
        /* execute.simd:3207 [D] s_b_19_0[s_b_19_1] */
        auto s_b_19_2 = emitter.vector_extract(s_b_19_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3207 [D] s_b_19_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_19_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_19_4 = constant u8 4 (const) */
        /* execute.simd:3207 [D] s_b_19_3[s_b_19_4] */
        auto s_b_19_5 = emitter.vector_extract(s_b_19_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3207 [D] s_b_19_6 = -s_b_19_5 */
        auto s_b_19_6 = emitter.neg(s_b_19_5);
        /* execute.simd:3207 [D] s_b_19_7 = s_b_19_2->>s_b_19_6 */
        auto s_b_19_7 = emitter.sar(s_b_19_2, s_b_19_6);
        /* execute.simd:3207 [D] s_b_19_8 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_19_8 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3207 [D] s_b_19_9 = (u8)s_b_19_7 */
        auto s_b_19_9 = emitter.reinterpret(s_b_19_7, emitter.context().types().u8());
        /* execute.simd:3207 [F] s_b_19_10 = constant s32 4 (const) */
        /* execute.simd:3207 [D] s_b_19_11 = s_b_19_8[s_b_19_10] <= s_b_19_9 */
        auto s_b_19_11 = emitter.vector_insert(s_b_19_8, emitter.const_s32((int32_t)4ULL), s_b_19_9);
        /* execute.simd:3207 [D] s_b_19_12: sym_25834_0_rd = s_b_19_11, dominates: s_b_22_8 s_b_24_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_19_11);
        /* execute.simd:3207 [F] s_b_19_13: Jump b_20 (const) */
        {
          auto block = block_b_20;
          dynamic_block_queue.push(block_b_20);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_20) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_20);
        /* execute.simd:3206 [D] s_b_20_0 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_20_0 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_20_1 = constant u8 5 (const) */
        /* execute.simd:3206 [D] s_b_20_0[s_b_20_1] */
        auto s_b_20_2 = emitter.vector_extract(s_b_20_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3206 [F] s_b_20_3 = constant s32 0 (const) */
        /* execute.simd:3206 [D] s_b_20_4 = (s32)s_b_20_2 */
        auto s_b_20_4 = emitter.sx(s_b_20_2, emitter.context().types().s32());
        /* execute.simd:3206 [D] s_b_20_5 = s_b_20_4<s_b_20_3 */
        auto s_b_20_5 = emitter.cmp_lt(s_b_20_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3206 [D] s_b_20_6: If s_b_20_5: Jump b_22 else b_24 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_22;
            dynamic_block_queue.push(block_b_22);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_24;
            dynamic_block_queue.push(block_b_24);
            false_target = block;
          }
          emitter.branch(s_b_20_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_21) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_21);
        /* execute.simd:3209 [D] s_b_21_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_21_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_21_1 = constant u8 4 (const) */
        /* execute.simd:3209 [D] s_b_21_0[s_b_21_1] */
        auto s_b_21_2 = emitter.vector_extract(s_b_21_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3209 [D] s_b_21_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_21_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_21_4 = constant u8 4 (const) */
        /* execute.simd:3209 [D] s_b_21_3[s_b_21_4] */
        auto s_b_21_5 = emitter.vector_extract(s_b_21_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3209 [D] s_b_21_6 = s_b_21_2<<s_b_21_5 */
        auto s_b_21_6 = emitter.shl(s_b_21_2, s_b_21_5);
        /* execute.simd:3209 [D] s_b_21_7 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_21_7 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3209 [D] s_b_21_8 = (u8)s_b_21_6 */
        auto s_b_21_8 = emitter.reinterpret(s_b_21_6, emitter.context().types().u8());
        /* execute.simd:3209 [F] s_b_21_9 = constant s32 4 (const) */
        /* execute.simd:3209 [D] s_b_21_10 = s_b_21_7[s_b_21_9] <= s_b_21_8 */
        auto s_b_21_10 = emitter.vector_insert(s_b_21_7, emitter.const_s32((int32_t)4ULL), s_b_21_8);
        /* execute.simd:3209 [D] s_b_21_11: sym_25834_0_rd = s_b_21_10, dominates: s_b_22_8 s_b_24_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_21_10);
        /* execute.simd:3209 [F] s_b_21_12: Jump b_20 (const) */
        {
          auto block = block_b_20;
          dynamic_block_queue.push(block_b_20);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_22) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_22);
        /* execute.simd:3207 [D] s_b_22_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_22_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_22_1 = constant u8 5 (const) */
        /* execute.simd:3207 [D] s_b_22_0[s_b_22_1] */
        auto s_b_22_2 = emitter.vector_extract(s_b_22_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3207 [D] s_b_22_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_22_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_22_4 = constant u8 5 (const) */
        /* execute.simd:3207 [D] s_b_22_3[s_b_22_4] */
        auto s_b_22_5 = emitter.vector_extract(s_b_22_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3207 [D] s_b_22_6 = -s_b_22_5 */
        auto s_b_22_6 = emitter.neg(s_b_22_5);
        /* execute.simd:3207 [D] s_b_22_7 = s_b_22_2->>s_b_22_6 */
        auto s_b_22_7 = emitter.sar(s_b_22_2, s_b_22_6);
        /* execute.simd:3207 [D] s_b_22_8 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_22_8 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3207 [D] s_b_22_9 = (u8)s_b_22_7 */
        auto s_b_22_9 = emitter.reinterpret(s_b_22_7, emitter.context().types().u8());
        /* execute.simd:3207 [F] s_b_22_10 = constant s32 5 (const) */
        /* execute.simd:3207 [D] s_b_22_11 = s_b_22_8[s_b_22_10] <= s_b_22_9 */
        auto s_b_22_11 = emitter.vector_insert(s_b_22_8, emitter.const_s32((int32_t)5ULL), s_b_22_9);
        /* execute.simd:3207 [D] s_b_22_12: sym_25834_0_rd = s_b_22_11, dominates: s_b_25_8 s_b_27_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_22_11);
        /* execute.simd:3207 [F] s_b_22_13: Jump b_23 (const) */
        {
          auto block = block_b_23;
          dynamic_block_queue.push(block_b_23);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_23) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_23);
        /* execute.simd:3206 [D] s_b_23_0 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_23_0 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_23_1 = constant u8 6 (const) */
        /* execute.simd:3206 [D] s_b_23_0[s_b_23_1] */
        auto s_b_23_2 = emitter.vector_extract(s_b_23_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3206 [F] s_b_23_3 = constant s32 0 (const) */
        /* execute.simd:3206 [D] s_b_23_4 = (s32)s_b_23_2 */
        auto s_b_23_4 = emitter.sx(s_b_23_2, emitter.context().types().s32());
        /* execute.simd:3206 [D] s_b_23_5 = s_b_23_4<s_b_23_3 */
        auto s_b_23_5 = emitter.cmp_lt(s_b_23_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3206 [D] s_b_23_6: If s_b_23_5: Jump b_25 else b_27 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_25;
            dynamic_block_queue.push(block_b_25);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_27;
            dynamic_block_queue.push(block_b_27);
            false_target = block;
          }
          emitter.branch(s_b_23_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_24) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_24);
        /* execute.simd:3209 [D] s_b_24_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_24_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_24_1 = constant u8 5 (const) */
        /* execute.simd:3209 [D] s_b_24_0[s_b_24_1] */
        auto s_b_24_2 = emitter.vector_extract(s_b_24_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3209 [D] s_b_24_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_24_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_24_4 = constant u8 5 (const) */
        /* execute.simd:3209 [D] s_b_24_3[s_b_24_4] */
        auto s_b_24_5 = emitter.vector_extract(s_b_24_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3209 [D] s_b_24_6 = s_b_24_2<<s_b_24_5 */
        auto s_b_24_6 = emitter.shl(s_b_24_2, s_b_24_5);
        /* execute.simd:3209 [D] s_b_24_7 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_24_7 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3209 [D] s_b_24_8 = (u8)s_b_24_6 */
        auto s_b_24_8 = emitter.reinterpret(s_b_24_6, emitter.context().types().u8());
        /* execute.simd:3209 [F] s_b_24_9 = constant s32 5 (const) */
        /* execute.simd:3209 [D] s_b_24_10 = s_b_24_7[s_b_24_9] <= s_b_24_8 */
        auto s_b_24_10 = emitter.vector_insert(s_b_24_7, emitter.const_s32((int32_t)5ULL), s_b_24_8);
        /* execute.simd:3209 [D] s_b_24_11: sym_25834_0_rd = s_b_24_10, dominates: s_b_25_8 s_b_27_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_24_10);
        /* execute.simd:3209 [F] s_b_24_12: Jump b_23 (const) */
        {
          auto block = block_b_23;
          dynamic_block_queue.push(block_b_23);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_25) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_25);
        /* execute.simd:3207 [D] s_b_25_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_25_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_25_1 = constant u8 6 (const) */
        /* execute.simd:3207 [D] s_b_25_0[s_b_25_1] */
        auto s_b_25_2 = emitter.vector_extract(s_b_25_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3207 [D] s_b_25_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_25_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_25_4 = constant u8 6 (const) */
        /* execute.simd:3207 [D] s_b_25_3[s_b_25_4] */
        auto s_b_25_5 = emitter.vector_extract(s_b_25_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3207 [D] s_b_25_6 = -s_b_25_5 */
        auto s_b_25_6 = emitter.neg(s_b_25_5);
        /* execute.simd:3207 [D] s_b_25_7 = s_b_25_2->>s_b_25_6 */
        auto s_b_25_7 = emitter.sar(s_b_25_2, s_b_25_6);
        /* execute.simd:3207 [D] s_b_25_8 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_25_8 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3207 [D] s_b_25_9 = (u8)s_b_25_7 */
        auto s_b_25_9 = emitter.reinterpret(s_b_25_7, emitter.context().types().u8());
        /* execute.simd:3207 [F] s_b_25_10 = constant s32 6 (const) */
        /* execute.simd:3207 [D] s_b_25_11 = s_b_25_8[s_b_25_10] <= s_b_25_9 */
        auto s_b_25_11 = emitter.vector_insert(s_b_25_8, emitter.const_s32((int32_t)6ULL), s_b_25_9);
        /* execute.simd:3207 [D] s_b_25_12: sym_25834_0_rd = s_b_25_11, dominates: s_b_28_8 s_b_30_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_25_11);
        /* execute.simd:3207 [F] s_b_25_13: Jump b_26 (const) */
        {
          auto block = block_b_26;
          dynamic_block_queue.push(block_b_26);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_26) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_26);
        /* execute.simd:3206 [D] s_b_26_0 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_26_0 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_26_1 = constant u8 7 (const) */
        /* execute.simd:3206 [D] s_b_26_0[s_b_26_1] */
        auto s_b_26_2 = emitter.vector_extract(s_b_26_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3206 [F] s_b_26_3 = constant s32 0 (const) */
        /* execute.simd:3206 [D] s_b_26_4 = (s32)s_b_26_2 */
        auto s_b_26_4 = emitter.sx(s_b_26_2, emitter.context().types().s32());
        /* execute.simd:3206 [D] s_b_26_5 = s_b_26_4<s_b_26_3 */
        auto s_b_26_5 = emitter.cmp_lt(s_b_26_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3206 [D] s_b_26_6: If s_b_26_5: Jump b_28 else b_30 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_28;
            dynamic_block_queue.push(block_b_28);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_30;
            dynamic_block_queue.push(block_b_30);
            false_target = block;
          }
          emitter.branch(s_b_26_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_27) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_27);
        /* execute.simd:3209 [D] s_b_27_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_27_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_27_1 = constant u8 6 (const) */
        /* execute.simd:3209 [D] s_b_27_0[s_b_27_1] */
        auto s_b_27_2 = emitter.vector_extract(s_b_27_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3209 [D] s_b_27_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_27_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_27_4 = constant u8 6 (const) */
        /* execute.simd:3209 [D] s_b_27_3[s_b_27_4] */
        auto s_b_27_5 = emitter.vector_extract(s_b_27_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3209 [D] s_b_27_6 = s_b_27_2<<s_b_27_5 */
        auto s_b_27_6 = emitter.shl(s_b_27_2, s_b_27_5);
        /* execute.simd:3209 [D] s_b_27_7 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_27_7 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3209 [D] s_b_27_8 = (u8)s_b_27_6 */
        auto s_b_27_8 = emitter.reinterpret(s_b_27_6, emitter.context().types().u8());
        /* execute.simd:3209 [F] s_b_27_9 = constant s32 6 (const) */
        /* execute.simd:3209 [D] s_b_27_10 = s_b_27_7[s_b_27_9] <= s_b_27_8 */
        auto s_b_27_10 = emitter.vector_insert(s_b_27_7, emitter.const_s32((int32_t)6ULL), s_b_27_8);
        /* execute.simd:3209 [D] s_b_27_11: sym_25834_0_rd = s_b_27_10, dominates: s_b_28_8 s_b_30_7  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_27_10);
        /* execute.simd:3209 [F] s_b_27_12: Jump b_26 (const) */
        {
          auto block = block_b_26;
          dynamic_block_queue.push(block_b_26);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_28) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_28);
        /* execute.simd:3207 [D] s_b_28_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_28_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_28_1 = constant u8 7 (const) */
        /* execute.simd:3207 [D] s_b_28_0[s_b_28_1] */
        auto s_b_28_2 = emitter.vector_extract(s_b_28_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3207 [D] s_b_28_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_28_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_28_4 = constant u8 7 (const) */
        /* execute.simd:3207 [D] s_b_28_3[s_b_28_4] */
        auto s_b_28_5 = emitter.vector_extract(s_b_28_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3207 [D] s_b_28_6 = -s_b_28_5 */
        auto s_b_28_6 = emitter.neg(s_b_28_5);
        /* execute.simd:3207 [D] s_b_28_7 = s_b_28_2->>s_b_28_6 */
        auto s_b_28_7 = emitter.sar(s_b_28_2, s_b_28_6);
        /* execute.simd:3207 [D] s_b_28_8 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_28_8 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3207 [D] s_b_28_9 = (u8)s_b_28_7 */
        auto s_b_28_9 = emitter.reinterpret(s_b_28_7, emitter.context().types().u8());
        /* execute.simd:3207 [F] s_b_28_10 = constant s32 7 (const) */
        /* execute.simd:3207 [D] s_b_28_11 = s_b_28_8[s_b_28_10] <= s_b_28_9 */
        auto s_b_28_11 = emitter.vector_insert(s_b_28_8, emitter.const_s32((int32_t)7ULL), s_b_28_9);
        /* execute.simd:3207 [D] s_b_28_12: sym_25834_0_rd = s_b_28_11, dominates: s_b_29_1  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_28_11);
        /* execute.simd:3207 [F] s_b_28_13: Jump b_29 (const) */
        {
          auto block = block_b_29;
          dynamic_block_queue.push(block_b_29);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_29) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_29);
        /* execute.simd:3213 [F] s_b_29_0=sym_25777_3_parameter_inst.rd (const) */
        /* execute.simd:3213 [D] s_b_29_1 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_29_1 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3213 [D] s_b_29_2: WriteRegBank 16:s_b_29_0 = s_b_29_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_29_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_29_1);
        /* execute.simd:0 [F] s_b_29_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_30) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_30);
        /* execute.simd:3209 [D] s_b_30_0 = sym_25824_0_rn wutils::Vector<int8_t, 8> */
        auto s_b_30_0 = emitter.load_local(DV_sym_25824_0_rn, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_30_1 = constant u8 7 (const) */
        /* execute.simd:3209 [D] s_b_30_0[s_b_30_1] */
        auto s_b_30_2 = emitter.vector_extract(s_b_30_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3209 [D] s_b_30_3 = sym_25829_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_30_3 = emitter.load_local(DV_sym_25829_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_30_4 = constant u8 7 (const) */
        /* execute.simd:3209 [D] s_b_30_3[s_b_30_4] */
        auto s_b_30_5 = emitter.vector_extract(s_b_30_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3209 [D] s_b_30_6 = s_b_30_2<<s_b_30_5 */
        auto s_b_30_6 = emitter.shl(s_b_30_2, s_b_30_5);
        /* execute.simd:3209 [D] s_b_30_7 = sym_25834_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_30_7 = emitter.load_local(DV_sym_25834_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3209 [D] s_b_30_8 = (u8)s_b_30_6 */
        auto s_b_30_8 = emitter.reinterpret(s_b_30_6, emitter.context().types().u8());
        /* execute.simd:3209 [F] s_b_30_9 = constant s32 7 (const) */
        /* execute.simd:3209 [D] s_b_30_10 = s_b_30_7[s_b_30_9] <= s_b_30_8 */
        auto s_b_30_10 = emitter.vector_insert(s_b_30_7, emitter.const_s32((int32_t)7ULL), s_b_30_8);
        /* execute.simd:3209 [D] s_b_30_11: sym_25834_0_rd = s_b_30_10, dominates: s_b_29_1  */
        emitter.store_local(DV_sym_25834_0_rd, s_b_30_10);
        /* execute.simd:3209 [F] s_b_30_12: Jump b_29 (const) */
        {
          auto block = block_b_29;
          dynamic_block_queue.push(block_b_29);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_32) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_32);
        /* execute.simd:3223 [D] s_b_32_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_32_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_32_1 = constant u8 0 (const) */
        /* execute.simd:3223 [D] s_b_32_0[s_b_32_1] */
        auto s_b_32_2 = emitter.vector_extract(s_b_32_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3223 [D] s_b_32_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_32_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_32_4 = constant u8 0 (const) */
        /* execute.simd:3223 [D] s_b_32_3[s_b_32_4] */
        auto s_b_32_5 = emitter.vector_extract(s_b_32_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3223 [D] s_b_32_6 = -s_b_32_5 */
        auto s_b_32_6 = emitter.neg(s_b_32_5);
        /* execute.simd:3223 [D] s_b_32_7 = s_b_32_2->>s_b_32_6 */
        auto s_b_32_7 = emitter.sar(s_b_32_2, s_b_32_6);
        /* execute.simd:3223 [F] s_b_32_8 = sym_26241_0_rd (const) wutils::Vector<uint8_t, 16> */
        wutils::Vector<uint8_t, 16> s_b_32_8 = CV_sym_26241_0_rd;
        /* execute.simd:3223 [D] s_b_32_9 = (u8)s_b_32_7 */
        auto s_b_32_9 = emitter.reinterpret(s_b_32_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_32_10 = constant s32 0 (const) */
        /* execute.simd:3223 [D] s_b_32_11 = s_b_32_8[s_b_32_10] <= s_b_32_9 */
        auto s_b_32_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_32_8[0], emitter.context().types().v16u8()), emitter.const_s32((int32_t)0ULL), s_b_32_9);
        /* execute.simd:3223 [D] s_b_32_12: sym_26241_0_rd = s_b_32_11, dominates: s_b_35_8 s_b_37_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_32_11);
        /* execute.simd:3223 [F] s_b_32_13: Jump b_33 (const) */
        {
          auto block = block_b_33;
          dynamic_block_queue.push(block_b_33);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_33) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_33);
        /* execute.simd:3222 [D] s_b_33_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_33_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_33_1 = constant u8 1 (const) */
        /* execute.simd:3222 [D] s_b_33_0[s_b_33_1] */
        auto s_b_33_2 = emitter.vector_extract(s_b_33_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3222 [F] s_b_33_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_33_4 = (s32)s_b_33_2 */
        auto s_b_33_4 = emitter.sx(s_b_33_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_33_5 = s_b_33_4<s_b_33_3 */
        auto s_b_33_5 = emitter.cmp_lt(s_b_33_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_33_6: If s_b_33_5: Jump b_35 else b_37 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_35;
            dynamic_block_queue.push(block_b_35);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_37;
            dynamic_block_queue.push(block_b_37);
            false_target = block;
          }
          emitter.branch(s_b_33_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_34) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_34);
        /* execute.simd:3225 [D] s_b_34_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_34_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_34_1 = constant u8 0 (const) */
        /* execute.simd:3225 [D] s_b_34_0[s_b_34_1] */
        auto s_b_34_2 = emitter.vector_extract(s_b_34_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3225 [D] s_b_34_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_34_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_34_4 = constant u8 0 (const) */
        /* execute.simd:3225 [D] s_b_34_3[s_b_34_4] */
        auto s_b_34_5 = emitter.vector_extract(s_b_34_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3225 [D] s_b_34_6 = s_b_34_2<<s_b_34_5 */
        auto s_b_34_6 = emitter.shl(s_b_34_2, s_b_34_5);
        /* execute.simd:3225 [F] s_b_34_7 = sym_26241_0_rd (const) wutils::Vector<uint8_t, 16> */
        wutils::Vector<uint8_t, 16> s_b_34_7 = CV_sym_26241_0_rd;
        /* execute.simd:3225 [D] s_b_34_8 = (u8)s_b_34_6 */
        auto s_b_34_8 = emitter.reinterpret(s_b_34_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_34_9 = constant s32 0 (const) */
        /* execute.simd:3225 [D] s_b_34_10 = s_b_34_7[s_b_34_9] <= s_b_34_8 */
        auto s_b_34_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_34_7[0], emitter.context().types().v16u8()), emitter.const_s32((int32_t)0ULL), s_b_34_8);
        /* execute.simd:3225 [D] s_b_34_11: sym_26241_0_rd = s_b_34_10, dominates: s_b_35_8 s_b_37_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_34_10);
        /* execute.simd:3225 [F] s_b_34_12: Jump b_33 (const) */
        {
          auto block = block_b_33;
          dynamic_block_queue.push(block_b_33);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_35) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_35);
        /* execute.simd:3223 [D] s_b_35_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_35_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_35_1 = constant u8 1 (const) */
        /* execute.simd:3223 [D] s_b_35_0[s_b_35_1] */
        auto s_b_35_2 = emitter.vector_extract(s_b_35_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3223 [D] s_b_35_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_35_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_35_4 = constant u8 1 (const) */
        /* execute.simd:3223 [D] s_b_35_3[s_b_35_4] */
        auto s_b_35_5 = emitter.vector_extract(s_b_35_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3223 [D] s_b_35_6 = -s_b_35_5 */
        auto s_b_35_6 = emitter.neg(s_b_35_5);
        /* execute.simd:3223 [D] s_b_35_7 = s_b_35_2->>s_b_35_6 */
        auto s_b_35_7 = emitter.sar(s_b_35_2, s_b_35_6);
        /* execute.simd:3223 [D] s_b_35_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_35_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_35_9 = (u8)s_b_35_7 */
        auto s_b_35_9 = emitter.reinterpret(s_b_35_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_35_10 = constant s32 1 (const) */
        /* execute.simd:3223 [D] s_b_35_11 = s_b_35_8[s_b_35_10] <= s_b_35_9 */
        auto s_b_35_11 = emitter.vector_insert(s_b_35_8, emitter.const_s32((int32_t)1ULL), s_b_35_9);
        /* execute.simd:3223 [D] s_b_35_12: sym_26241_0_rd = s_b_35_11, dominates: s_b_38_8 s_b_40_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_35_11);
        /* execute.simd:3223 [F] s_b_35_13: Jump b_36 (const) */
        {
          auto block = block_b_36;
          dynamic_block_queue.push(block_b_36);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_36) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_36);
        /* execute.simd:3222 [D] s_b_36_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_36_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_36_1 = constant u8 2 (const) */
        /* execute.simd:3222 [D] s_b_36_0[s_b_36_1] */
        auto s_b_36_2 = emitter.vector_extract(s_b_36_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3222 [F] s_b_36_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_36_4 = (s32)s_b_36_2 */
        auto s_b_36_4 = emitter.sx(s_b_36_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_36_5 = s_b_36_4<s_b_36_3 */
        auto s_b_36_5 = emitter.cmp_lt(s_b_36_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_36_6: If s_b_36_5: Jump b_38 else b_40 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_38;
            dynamic_block_queue.push(block_b_38);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_40;
            dynamic_block_queue.push(block_b_40);
            false_target = block;
          }
          emitter.branch(s_b_36_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_37) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_37);
        /* execute.simd:3225 [D] s_b_37_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_37_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_37_1 = constant u8 1 (const) */
        /* execute.simd:3225 [D] s_b_37_0[s_b_37_1] */
        auto s_b_37_2 = emitter.vector_extract(s_b_37_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3225 [D] s_b_37_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_37_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_37_4 = constant u8 1 (const) */
        /* execute.simd:3225 [D] s_b_37_3[s_b_37_4] */
        auto s_b_37_5 = emitter.vector_extract(s_b_37_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3225 [D] s_b_37_6 = s_b_37_2<<s_b_37_5 */
        auto s_b_37_6 = emitter.shl(s_b_37_2, s_b_37_5);
        /* execute.simd:3225 [D] s_b_37_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_37_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_37_8 = (u8)s_b_37_6 */
        auto s_b_37_8 = emitter.reinterpret(s_b_37_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_37_9 = constant s32 1 (const) */
        /* execute.simd:3225 [D] s_b_37_10 = s_b_37_7[s_b_37_9] <= s_b_37_8 */
        auto s_b_37_10 = emitter.vector_insert(s_b_37_7, emitter.const_s32((int32_t)1ULL), s_b_37_8);
        /* execute.simd:3225 [D] s_b_37_11: sym_26241_0_rd = s_b_37_10, dominates: s_b_38_8 s_b_40_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_37_10);
        /* execute.simd:3225 [F] s_b_37_12: Jump b_36 (const) */
        {
          auto block = block_b_36;
          dynamic_block_queue.push(block_b_36);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_38) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_38);
        /* execute.simd:3223 [D] s_b_38_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_38_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_38_1 = constant u8 2 (const) */
        /* execute.simd:3223 [D] s_b_38_0[s_b_38_1] */
        auto s_b_38_2 = emitter.vector_extract(s_b_38_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3223 [D] s_b_38_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_38_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_38_4 = constant u8 2 (const) */
        /* execute.simd:3223 [D] s_b_38_3[s_b_38_4] */
        auto s_b_38_5 = emitter.vector_extract(s_b_38_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3223 [D] s_b_38_6 = -s_b_38_5 */
        auto s_b_38_6 = emitter.neg(s_b_38_5);
        /* execute.simd:3223 [D] s_b_38_7 = s_b_38_2->>s_b_38_6 */
        auto s_b_38_7 = emitter.sar(s_b_38_2, s_b_38_6);
        /* execute.simd:3223 [D] s_b_38_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_38_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_38_9 = (u8)s_b_38_7 */
        auto s_b_38_9 = emitter.reinterpret(s_b_38_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_38_10 = constant s32 2 (const) */
        /* execute.simd:3223 [D] s_b_38_11 = s_b_38_8[s_b_38_10] <= s_b_38_9 */
        auto s_b_38_11 = emitter.vector_insert(s_b_38_8, emitter.const_s32((int32_t)2ULL), s_b_38_9);
        /* execute.simd:3223 [D] s_b_38_12: sym_26241_0_rd = s_b_38_11, dominates: s_b_41_8 s_b_43_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_38_11);
        /* execute.simd:3223 [F] s_b_38_13: Jump b_39 (const) */
        {
          auto block = block_b_39;
          dynamic_block_queue.push(block_b_39);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_39) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_39);
        /* execute.simd:3222 [D] s_b_39_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_39_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_39_1 = constant u8 3 (const) */
        /* execute.simd:3222 [D] s_b_39_0[s_b_39_1] */
        auto s_b_39_2 = emitter.vector_extract(s_b_39_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3222 [F] s_b_39_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_39_4 = (s32)s_b_39_2 */
        auto s_b_39_4 = emitter.sx(s_b_39_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_39_5 = s_b_39_4<s_b_39_3 */
        auto s_b_39_5 = emitter.cmp_lt(s_b_39_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_39_6: If s_b_39_5: Jump b_41 else b_43 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_41;
            dynamic_block_queue.push(block_b_41);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_43;
            dynamic_block_queue.push(block_b_43);
            false_target = block;
          }
          emitter.branch(s_b_39_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_40) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_40);
        /* execute.simd:3225 [D] s_b_40_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_40_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_40_1 = constant u8 2 (const) */
        /* execute.simd:3225 [D] s_b_40_0[s_b_40_1] */
        auto s_b_40_2 = emitter.vector_extract(s_b_40_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3225 [D] s_b_40_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_40_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_40_4 = constant u8 2 (const) */
        /* execute.simd:3225 [D] s_b_40_3[s_b_40_4] */
        auto s_b_40_5 = emitter.vector_extract(s_b_40_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3225 [D] s_b_40_6 = s_b_40_2<<s_b_40_5 */
        auto s_b_40_6 = emitter.shl(s_b_40_2, s_b_40_5);
        /* execute.simd:3225 [D] s_b_40_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_40_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_40_8 = (u8)s_b_40_6 */
        auto s_b_40_8 = emitter.reinterpret(s_b_40_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_40_9 = constant s32 2 (const) */
        /* execute.simd:3225 [D] s_b_40_10 = s_b_40_7[s_b_40_9] <= s_b_40_8 */
        auto s_b_40_10 = emitter.vector_insert(s_b_40_7, emitter.const_s32((int32_t)2ULL), s_b_40_8);
        /* execute.simd:3225 [D] s_b_40_11: sym_26241_0_rd = s_b_40_10, dominates: s_b_41_8 s_b_43_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_40_10);
        /* execute.simd:3225 [F] s_b_40_12: Jump b_39 (const) */
        {
          auto block = block_b_39;
          dynamic_block_queue.push(block_b_39);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_41) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_41);
        /* execute.simd:3223 [D] s_b_41_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_41_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_41_1 = constant u8 3 (const) */
        /* execute.simd:3223 [D] s_b_41_0[s_b_41_1] */
        auto s_b_41_2 = emitter.vector_extract(s_b_41_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3223 [D] s_b_41_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_41_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_41_4 = constant u8 3 (const) */
        /* execute.simd:3223 [D] s_b_41_3[s_b_41_4] */
        auto s_b_41_5 = emitter.vector_extract(s_b_41_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3223 [D] s_b_41_6 = -s_b_41_5 */
        auto s_b_41_6 = emitter.neg(s_b_41_5);
        /* execute.simd:3223 [D] s_b_41_7 = s_b_41_2->>s_b_41_6 */
        auto s_b_41_7 = emitter.sar(s_b_41_2, s_b_41_6);
        /* execute.simd:3223 [D] s_b_41_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_41_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_41_9 = (u8)s_b_41_7 */
        auto s_b_41_9 = emitter.reinterpret(s_b_41_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_41_10 = constant s32 3 (const) */
        /* execute.simd:3223 [D] s_b_41_11 = s_b_41_8[s_b_41_10] <= s_b_41_9 */
        auto s_b_41_11 = emitter.vector_insert(s_b_41_8, emitter.const_s32((int32_t)3ULL), s_b_41_9);
        /* execute.simd:3223 [D] s_b_41_12: sym_26241_0_rd = s_b_41_11, dominates: s_b_44_8 s_b_46_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_41_11);
        /* execute.simd:3223 [F] s_b_41_13: Jump b_42 (const) */
        {
          auto block = block_b_42;
          dynamic_block_queue.push(block_b_42);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_42) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_42);
        /* execute.simd:3222 [D] s_b_42_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_42_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_42_1 = constant u8 4 (const) */
        /* execute.simd:3222 [D] s_b_42_0[s_b_42_1] */
        auto s_b_42_2 = emitter.vector_extract(s_b_42_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3222 [F] s_b_42_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_42_4 = (s32)s_b_42_2 */
        auto s_b_42_4 = emitter.sx(s_b_42_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_42_5 = s_b_42_4<s_b_42_3 */
        auto s_b_42_5 = emitter.cmp_lt(s_b_42_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_42_6: If s_b_42_5: Jump b_44 else b_46 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_44;
            dynamic_block_queue.push(block_b_44);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_46;
            dynamic_block_queue.push(block_b_46);
            false_target = block;
          }
          emitter.branch(s_b_42_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_43) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_43);
        /* execute.simd:3225 [D] s_b_43_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_43_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_43_1 = constant u8 3 (const) */
        /* execute.simd:3225 [D] s_b_43_0[s_b_43_1] */
        auto s_b_43_2 = emitter.vector_extract(s_b_43_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3225 [D] s_b_43_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_43_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_43_4 = constant u8 3 (const) */
        /* execute.simd:3225 [D] s_b_43_3[s_b_43_4] */
        auto s_b_43_5 = emitter.vector_extract(s_b_43_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3225 [D] s_b_43_6 = s_b_43_2<<s_b_43_5 */
        auto s_b_43_6 = emitter.shl(s_b_43_2, s_b_43_5);
        /* execute.simd:3225 [D] s_b_43_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_43_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_43_8 = (u8)s_b_43_6 */
        auto s_b_43_8 = emitter.reinterpret(s_b_43_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_43_9 = constant s32 3 (const) */
        /* execute.simd:3225 [D] s_b_43_10 = s_b_43_7[s_b_43_9] <= s_b_43_8 */
        auto s_b_43_10 = emitter.vector_insert(s_b_43_7, emitter.const_s32((int32_t)3ULL), s_b_43_8);
        /* execute.simd:3225 [D] s_b_43_11: sym_26241_0_rd = s_b_43_10, dominates: s_b_44_8 s_b_46_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_43_10);
        /* execute.simd:3225 [F] s_b_43_12: Jump b_42 (const) */
        {
          auto block = block_b_42;
          dynamic_block_queue.push(block_b_42);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_44) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_44);
        /* execute.simd:3223 [D] s_b_44_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_44_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_44_1 = constant u8 4 (const) */
        /* execute.simd:3223 [D] s_b_44_0[s_b_44_1] */
        auto s_b_44_2 = emitter.vector_extract(s_b_44_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3223 [D] s_b_44_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_44_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_44_4 = constant u8 4 (const) */
        /* execute.simd:3223 [D] s_b_44_3[s_b_44_4] */
        auto s_b_44_5 = emitter.vector_extract(s_b_44_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3223 [D] s_b_44_6 = -s_b_44_5 */
        auto s_b_44_6 = emitter.neg(s_b_44_5);
        /* execute.simd:3223 [D] s_b_44_7 = s_b_44_2->>s_b_44_6 */
        auto s_b_44_7 = emitter.sar(s_b_44_2, s_b_44_6);
        /* execute.simd:3223 [D] s_b_44_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_44_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_44_9 = (u8)s_b_44_7 */
        auto s_b_44_9 = emitter.reinterpret(s_b_44_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_44_10 = constant s32 4 (const) */
        /* execute.simd:3223 [D] s_b_44_11 = s_b_44_8[s_b_44_10] <= s_b_44_9 */
        auto s_b_44_11 = emitter.vector_insert(s_b_44_8, emitter.const_s32((int32_t)4ULL), s_b_44_9);
        /* execute.simd:3223 [D] s_b_44_12: sym_26241_0_rd = s_b_44_11, dominates: s_b_47_8 s_b_49_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_44_11);
        /* execute.simd:3223 [F] s_b_44_13: Jump b_45 (const) */
        {
          auto block = block_b_45;
          dynamic_block_queue.push(block_b_45);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_45) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_45);
        /* execute.simd:3222 [D] s_b_45_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_45_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_45_1 = constant u8 5 (const) */
        /* execute.simd:3222 [D] s_b_45_0[s_b_45_1] */
        auto s_b_45_2 = emitter.vector_extract(s_b_45_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3222 [F] s_b_45_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_45_4 = (s32)s_b_45_2 */
        auto s_b_45_4 = emitter.sx(s_b_45_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_45_5 = s_b_45_4<s_b_45_3 */
        auto s_b_45_5 = emitter.cmp_lt(s_b_45_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_45_6: If s_b_45_5: Jump b_47 else b_49 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_47;
            dynamic_block_queue.push(block_b_47);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_49;
            dynamic_block_queue.push(block_b_49);
            false_target = block;
          }
          emitter.branch(s_b_45_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_46) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_46);
        /* execute.simd:3225 [D] s_b_46_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_46_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_46_1 = constant u8 4 (const) */
        /* execute.simd:3225 [D] s_b_46_0[s_b_46_1] */
        auto s_b_46_2 = emitter.vector_extract(s_b_46_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3225 [D] s_b_46_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_46_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_46_4 = constant u8 4 (const) */
        /* execute.simd:3225 [D] s_b_46_3[s_b_46_4] */
        auto s_b_46_5 = emitter.vector_extract(s_b_46_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3225 [D] s_b_46_6 = s_b_46_2<<s_b_46_5 */
        auto s_b_46_6 = emitter.shl(s_b_46_2, s_b_46_5);
        /* execute.simd:3225 [D] s_b_46_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_46_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_46_8 = (u8)s_b_46_6 */
        auto s_b_46_8 = emitter.reinterpret(s_b_46_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_46_9 = constant s32 4 (const) */
        /* execute.simd:3225 [D] s_b_46_10 = s_b_46_7[s_b_46_9] <= s_b_46_8 */
        auto s_b_46_10 = emitter.vector_insert(s_b_46_7, emitter.const_s32((int32_t)4ULL), s_b_46_8);
        /* execute.simd:3225 [D] s_b_46_11: sym_26241_0_rd = s_b_46_10, dominates: s_b_47_8 s_b_49_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_46_10);
        /* execute.simd:3225 [F] s_b_46_12: Jump b_45 (const) */
        {
          auto block = block_b_45;
          dynamic_block_queue.push(block_b_45);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_47) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_47);
        /* execute.simd:3223 [D] s_b_47_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_47_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_47_1 = constant u8 5 (const) */
        /* execute.simd:3223 [D] s_b_47_0[s_b_47_1] */
        auto s_b_47_2 = emitter.vector_extract(s_b_47_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3223 [D] s_b_47_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_47_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_47_4 = constant u8 5 (const) */
        /* execute.simd:3223 [D] s_b_47_3[s_b_47_4] */
        auto s_b_47_5 = emitter.vector_extract(s_b_47_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3223 [D] s_b_47_6 = -s_b_47_5 */
        auto s_b_47_6 = emitter.neg(s_b_47_5);
        /* execute.simd:3223 [D] s_b_47_7 = s_b_47_2->>s_b_47_6 */
        auto s_b_47_7 = emitter.sar(s_b_47_2, s_b_47_6);
        /* execute.simd:3223 [D] s_b_47_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_47_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_47_9 = (u8)s_b_47_7 */
        auto s_b_47_9 = emitter.reinterpret(s_b_47_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_47_10 = constant s32 5 (const) */
        /* execute.simd:3223 [D] s_b_47_11 = s_b_47_8[s_b_47_10] <= s_b_47_9 */
        auto s_b_47_11 = emitter.vector_insert(s_b_47_8, emitter.const_s32((int32_t)5ULL), s_b_47_9);
        /* execute.simd:3223 [D] s_b_47_12: sym_26241_0_rd = s_b_47_11, dominates: s_b_50_8 s_b_52_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_47_11);
        /* execute.simd:3223 [F] s_b_47_13: Jump b_48 (const) */
        {
          auto block = block_b_48;
          dynamic_block_queue.push(block_b_48);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_48) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_48);
        /* execute.simd:3222 [D] s_b_48_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_48_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_48_1 = constant u8 6 (const) */
        /* execute.simd:3222 [D] s_b_48_0[s_b_48_1] */
        auto s_b_48_2 = emitter.vector_extract(s_b_48_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3222 [F] s_b_48_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_48_4 = (s32)s_b_48_2 */
        auto s_b_48_4 = emitter.sx(s_b_48_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_48_5 = s_b_48_4<s_b_48_3 */
        auto s_b_48_5 = emitter.cmp_lt(s_b_48_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_48_6: If s_b_48_5: Jump b_50 else b_52 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_50;
            dynamic_block_queue.push(block_b_50);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_52;
            dynamic_block_queue.push(block_b_52);
            false_target = block;
          }
          emitter.branch(s_b_48_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_49) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_49);
        /* execute.simd:3225 [D] s_b_49_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_49_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_49_1 = constant u8 5 (const) */
        /* execute.simd:3225 [D] s_b_49_0[s_b_49_1] */
        auto s_b_49_2 = emitter.vector_extract(s_b_49_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3225 [D] s_b_49_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_49_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_49_4 = constant u8 5 (const) */
        /* execute.simd:3225 [D] s_b_49_3[s_b_49_4] */
        auto s_b_49_5 = emitter.vector_extract(s_b_49_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3225 [D] s_b_49_6 = s_b_49_2<<s_b_49_5 */
        auto s_b_49_6 = emitter.shl(s_b_49_2, s_b_49_5);
        /* execute.simd:3225 [D] s_b_49_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_49_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_49_8 = (u8)s_b_49_6 */
        auto s_b_49_8 = emitter.reinterpret(s_b_49_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_49_9 = constant s32 5 (const) */
        /* execute.simd:3225 [D] s_b_49_10 = s_b_49_7[s_b_49_9] <= s_b_49_8 */
        auto s_b_49_10 = emitter.vector_insert(s_b_49_7, emitter.const_s32((int32_t)5ULL), s_b_49_8);
        /* execute.simd:3225 [D] s_b_49_11: sym_26241_0_rd = s_b_49_10, dominates: s_b_50_8 s_b_52_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_49_10);
        /* execute.simd:3225 [F] s_b_49_12: Jump b_48 (const) */
        {
          auto block = block_b_48;
          dynamic_block_queue.push(block_b_48);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_50) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_50);
        /* execute.simd:3223 [D] s_b_50_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_50_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_50_1 = constant u8 6 (const) */
        /* execute.simd:3223 [D] s_b_50_0[s_b_50_1] */
        auto s_b_50_2 = emitter.vector_extract(s_b_50_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3223 [D] s_b_50_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_50_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_50_4 = constant u8 6 (const) */
        /* execute.simd:3223 [D] s_b_50_3[s_b_50_4] */
        auto s_b_50_5 = emitter.vector_extract(s_b_50_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3223 [D] s_b_50_6 = -s_b_50_5 */
        auto s_b_50_6 = emitter.neg(s_b_50_5);
        /* execute.simd:3223 [D] s_b_50_7 = s_b_50_2->>s_b_50_6 */
        auto s_b_50_7 = emitter.sar(s_b_50_2, s_b_50_6);
        /* execute.simd:3223 [D] s_b_50_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_50_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_50_9 = (u8)s_b_50_7 */
        auto s_b_50_9 = emitter.reinterpret(s_b_50_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_50_10 = constant s32 6 (const) */
        /* execute.simd:3223 [D] s_b_50_11 = s_b_50_8[s_b_50_10] <= s_b_50_9 */
        auto s_b_50_11 = emitter.vector_insert(s_b_50_8, emitter.const_s32((int32_t)6ULL), s_b_50_9);
        /* execute.simd:3223 [D] s_b_50_12: sym_26241_0_rd = s_b_50_11, dominates: s_b_53_8 s_b_55_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_50_11);
        /* execute.simd:3223 [F] s_b_50_13: Jump b_51 (const) */
        {
          auto block = block_b_51;
          dynamic_block_queue.push(block_b_51);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_51) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_51);
        /* execute.simd:3222 [D] s_b_51_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_51_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_51_1 = constant u8 7 (const) */
        /* execute.simd:3222 [D] s_b_51_0[s_b_51_1] */
        auto s_b_51_2 = emitter.vector_extract(s_b_51_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3222 [F] s_b_51_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_51_4 = (s32)s_b_51_2 */
        auto s_b_51_4 = emitter.sx(s_b_51_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_51_5 = s_b_51_4<s_b_51_3 */
        auto s_b_51_5 = emitter.cmp_lt(s_b_51_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_51_6: If s_b_51_5: Jump b_53 else b_55 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_53;
            dynamic_block_queue.push(block_b_53);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_55;
            dynamic_block_queue.push(block_b_55);
            false_target = block;
          }
          emitter.branch(s_b_51_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_52) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_52);
        /* execute.simd:3225 [D] s_b_52_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_52_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_52_1 = constant u8 6 (const) */
        /* execute.simd:3225 [D] s_b_52_0[s_b_52_1] */
        auto s_b_52_2 = emitter.vector_extract(s_b_52_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3225 [D] s_b_52_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_52_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_52_4 = constant u8 6 (const) */
        /* execute.simd:3225 [D] s_b_52_3[s_b_52_4] */
        auto s_b_52_5 = emitter.vector_extract(s_b_52_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3225 [D] s_b_52_6 = s_b_52_2<<s_b_52_5 */
        auto s_b_52_6 = emitter.shl(s_b_52_2, s_b_52_5);
        /* execute.simd:3225 [D] s_b_52_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_52_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_52_8 = (u8)s_b_52_6 */
        auto s_b_52_8 = emitter.reinterpret(s_b_52_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_52_9 = constant s32 6 (const) */
        /* execute.simd:3225 [D] s_b_52_10 = s_b_52_7[s_b_52_9] <= s_b_52_8 */
        auto s_b_52_10 = emitter.vector_insert(s_b_52_7, emitter.const_s32((int32_t)6ULL), s_b_52_8);
        /* execute.simd:3225 [D] s_b_52_11: sym_26241_0_rd = s_b_52_10, dominates: s_b_53_8 s_b_55_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_52_10);
        /* execute.simd:3225 [F] s_b_52_12: Jump b_51 (const) */
        {
          auto block = block_b_51;
          dynamic_block_queue.push(block_b_51);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_53) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_53);
        /* execute.simd:3223 [D] s_b_53_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_53_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_53_1 = constant u8 7 (const) */
        /* execute.simd:3223 [D] s_b_53_0[s_b_53_1] */
        auto s_b_53_2 = emitter.vector_extract(s_b_53_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3223 [D] s_b_53_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_53_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_53_4 = constant u8 7 (const) */
        /* execute.simd:3223 [D] s_b_53_3[s_b_53_4] */
        auto s_b_53_5 = emitter.vector_extract(s_b_53_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3223 [D] s_b_53_6 = -s_b_53_5 */
        auto s_b_53_6 = emitter.neg(s_b_53_5);
        /* execute.simd:3223 [D] s_b_53_7 = s_b_53_2->>s_b_53_6 */
        auto s_b_53_7 = emitter.sar(s_b_53_2, s_b_53_6);
        /* execute.simd:3223 [D] s_b_53_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_53_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_53_9 = (u8)s_b_53_7 */
        auto s_b_53_9 = emitter.reinterpret(s_b_53_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_53_10 = constant s32 7 (const) */
        /* execute.simd:3223 [D] s_b_53_11 = s_b_53_8[s_b_53_10] <= s_b_53_9 */
        auto s_b_53_11 = emitter.vector_insert(s_b_53_8, emitter.const_s32((int32_t)7ULL), s_b_53_9);
        /* execute.simd:3223 [D] s_b_53_12: sym_26241_0_rd = s_b_53_11, dominates: s_b_56_8 s_b_58_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_53_11);
        /* execute.simd:3223 [F] s_b_53_13: Jump b_54 (const) */
        {
          auto block = block_b_54;
          dynamic_block_queue.push(block_b_54);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_54) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_54);
        /* execute.simd:3222 [D] s_b_54_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_54_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_54_1 = constant u8 8 (const) */
        /* execute.simd:3222 [D] s_b_54_0[s_b_54_1] */
        auto s_b_54_2 = emitter.vector_extract(s_b_54_0, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3222 [F] s_b_54_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_54_4 = (s32)s_b_54_2 */
        auto s_b_54_4 = emitter.sx(s_b_54_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_54_5 = s_b_54_4<s_b_54_3 */
        auto s_b_54_5 = emitter.cmp_lt(s_b_54_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_54_6: If s_b_54_5: Jump b_56 else b_58 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_56;
            dynamic_block_queue.push(block_b_56);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_58;
            dynamic_block_queue.push(block_b_58);
            false_target = block;
          }
          emitter.branch(s_b_54_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_55) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_55);
        /* execute.simd:3225 [D] s_b_55_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_55_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_55_1 = constant u8 7 (const) */
        /* execute.simd:3225 [D] s_b_55_0[s_b_55_1] */
        auto s_b_55_2 = emitter.vector_extract(s_b_55_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3225 [D] s_b_55_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_55_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_55_4 = constant u8 7 (const) */
        /* execute.simd:3225 [D] s_b_55_3[s_b_55_4] */
        auto s_b_55_5 = emitter.vector_extract(s_b_55_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3225 [D] s_b_55_6 = s_b_55_2<<s_b_55_5 */
        auto s_b_55_6 = emitter.shl(s_b_55_2, s_b_55_5);
        /* execute.simd:3225 [D] s_b_55_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_55_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_55_8 = (u8)s_b_55_6 */
        auto s_b_55_8 = emitter.reinterpret(s_b_55_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_55_9 = constant s32 7 (const) */
        /* execute.simd:3225 [D] s_b_55_10 = s_b_55_7[s_b_55_9] <= s_b_55_8 */
        auto s_b_55_10 = emitter.vector_insert(s_b_55_7, emitter.const_s32((int32_t)7ULL), s_b_55_8);
        /* execute.simd:3225 [D] s_b_55_11: sym_26241_0_rd = s_b_55_10, dominates: s_b_56_8 s_b_58_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_55_10);
        /* execute.simd:3225 [F] s_b_55_12: Jump b_54 (const) */
        {
          auto block = block_b_54;
          dynamic_block_queue.push(block_b_54);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_56) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_56);
        /* execute.simd:3223 [D] s_b_56_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_56_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_56_1 = constant u8 8 (const) */
        /* execute.simd:3223 [D] s_b_56_0[s_b_56_1] */
        auto s_b_56_2 = emitter.vector_extract(s_b_56_0, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3223 [D] s_b_56_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_56_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_56_4 = constant u8 8 (const) */
        /* execute.simd:3223 [D] s_b_56_3[s_b_56_4] */
        auto s_b_56_5 = emitter.vector_extract(s_b_56_3, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3223 [D] s_b_56_6 = -s_b_56_5 */
        auto s_b_56_6 = emitter.neg(s_b_56_5);
        /* execute.simd:3223 [D] s_b_56_7 = s_b_56_2->>s_b_56_6 */
        auto s_b_56_7 = emitter.sar(s_b_56_2, s_b_56_6);
        /* execute.simd:3223 [D] s_b_56_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_56_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_56_9 = (u8)s_b_56_7 */
        auto s_b_56_9 = emitter.reinterpret(s_b_56_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_56_10 = constant s32 8 (const) */
        /* execute.simd:3223 [D] s_b_56_11 = s_b_56_8[s_b_56_10] <= s_b_56_9 */
        auto s_b_56_11 = emitter.vector_insert(s_b_56_8, emitter.const_s32((int32_t)8ULL), s_b_56_9);
        /* execute.simd:3223 [D] s_b_56_12: sym_26241_0_rd = s_b_56_11, dominates: s_b_59_8 s_b_61_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_56_11);
        /* execute.simd:3223 [F] s_b_56_13: Jump b_57 (const) */
        {
          auto block = block_b_57;
          dynamic_block_queue.push(block_b_57);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_57) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_57);
        /* execute.simd:3222 [D] s_b_57_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_57_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_57_1 = constant u8 9 (const) */
        /* execute.simd:3222 [D] s_b_57_0[s_b_57_1] */
        auto s_b_57_2 = emitter.vector_extract(s_b_57_0, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3222 [F] s_b_57_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_57_4 = (s32)s_b_57_2 */
        auto s_b_57_4 = emitter.sx(s_b_57_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_57_5 = s_b_57_4<s_b_57_3 */
        auto s_b_57_5 = emitter.cmp_lt(s_b_57_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_57_6: If s_b_57_5: Jump b_59 else b_61 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_59;
            dynamic_block_queue.push(block_b_59);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_61;
            dynamic_block_queue.push(block_b_61);
            false_target = block;
          }
          emitter.branch(s_b_57_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_58) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_58);
        /* execute.simd:3225 [D] s_b_58_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_58_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_58_1 = constant u8 8 (const) */
        /* execute.simd:3225 [D] s_b_58_0[s_b_58_1] */
        auto s_b_58_2 = emitter.vector_extract(s_b_58_0, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3225 [D] s_b_58_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_58_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_58_4 = constant u8 8 (const) */
        /* execute.simd:3225 [D] s_b_58_3[s_b_58_4] */
        auto s_b_58_5 = emitter.vector_extract(s_b_58_3, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3225 [D] s_b_58_6 = s_b_58_2<<s_b_58_5 */
        auto s_b_58_6 = emitter.shl(s_b_58_2, s_b_58_5);
        /* execute.simd:3225 [D] s_b_58_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_58_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_58_8 = (u8)s_b_58_6 */
        auto s_b_58_8 = emitter.reinterpret(s_b_58_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_58_9 = constant s32 8 (const) */
        /* execute.simd:3225 [D] s_b_58_10 = s_b_58_7[s_b_58_9] <= s_b_58_8 */
        auto s_b_58_10 = emitter.vector_insert(s_b_58_7, emitter.const_s32((int32_t)8ULL), s_b_58_8);
        /* execute.simd:3225 [D] s_b_58_11: sym_26241_0_rd = s_b_58_10, dominates: s_b_59_8 s_b_61_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_58_10);
        /* execute.simd:3225 [F] s_b_58_12: Jump b_57 (const) */
        {
          auto block = block_b_57;
          dynamic_block_queue.push(block_b_57);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_59) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_59);
        /* execute.simd:3223 [D] s_b_59_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_59_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_59_1 = constant u8 9 (const) */
        /* execute.simd:3223 [D] s_b_59_0[s_b_59_1] */
        auto s_b_59_2 = emitter.vector_extract(s_b_59_0, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3223 [D] s_b_59_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_59_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_59_4 = constant u8 9 (const) */
        /* execute.simd:3223 [D] s_b_59_3[s_b_59_4] */
        auto s_b_59_5 = emitter.vector_extract(s_b_59_3, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3223 [D] s_b_59_6 = -s_b_59_5 */
        auto s_b_59_6 = emitter.neg(s_b_59_5);
        /* execute.simd:3223 [D] s_b_59_7 = s_b_59_2->>s_b_59_6 */
        auto s_b_59_7 = emitter.sar(s_b_59_2, s_b_59_6);
        /* execute.simd:3223 [D] s_b_59_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_59_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_59_9 = (u8)s_b_59_7 */
        auto s_b_59_9 = emitter.reinterpret(s_b_59_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_59_10 = constant s32 9 (const) */
        /* execute.simd:3223 [D] s_b_59_11 = s_b_59_8[s_b_59_10] <= s_b_59_9 */
        auto s_b_59_11 = emitter.vector_insert(s_b_59_8, emitter.const_s32((int32_t)9ULL), s_b_59_9);
        /* execute.simd:3223 [D] s_b_59_12: sym_26241_0_rd = s_b_59_11, dominates: s_b_62_8 s_b_64_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_59_11);
        /* execute.simd:3223 [F] s_b_59_13: Jump b_60 (const) */
        {
          auto block = block_b_60;
          dynamic_block_queue.push(block_b_60);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_60) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_60);
        /* execute.simd:3222 [D] s_b_60_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_60_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_60_1 = constant u8 a (const) */
        /* execute.simd:3222 [D] s_b_60_0[s_b_60_1] */
        auto s_b_60_2 = emitter.vector_extract(s_b_60_0, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3222 [F] s_b_60_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_60_4 = (s32)s_b_60_2 */
        auto s_b_60_4 = emitter.sx(s_b_60_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_60_5 = s_b_60_4<s_b_60_3 */
        auto s_b_60_5 = emitter.cmp_lt(s_b_60_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_60_6: If s_b_60_5: Jump b_62 else b_64 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_62;
            dynamic_block_queue.push(block_b_62);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_64;
            dynamic_block_queue.push(block_b_64);
            false_target = block;
          }
          emitter.branch(s_b_60_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_61) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_61);
        /* execute.simd:3225 [D] s_b_61_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_61_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_61_1 = constant u8 9 (const) */
        /* execute.simd:3225 [D] s_b_61_0[s_b_61_1] */
        auto s_b_61_2 = emitter.vector_extract(s_b_61_0, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3225 [D] s_b_61_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_61_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_61_4 = constant u8 9 (const) */
        /* execute.simd:3225 [D] s_b_61_3[s_b_61_4] */
        auto s_b_61_5 = emitter.vector_extract(s_b_61_3, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3225 [D] s_b_61_6 = s_b_61_2<<s_b_61_5 */
        auto s_b_61_6 = emitter.shl(s_b_61_2, s_b_61_5);
        /* execute.simd:3225 [D] s_b_61_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_61_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_61_8 = (u8)s_b_61_6 */
        auto s_b_61_8 = emitter.reinterpret(s_b_61_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_61_9 = constant s32 9 (const) */
        /* execute.simd:3225 [D] s_b_61_10 = s_b_61_7[s_b_61_9] <= s_b_61_8 */
        auto s_b_61_10 = emitter.vector_insert(s_b_61_7, emitter.const_s32((int32_t)9ULL), s_b_61_8);
        /* execute.simd:3225 [D] s_b_61_11: sym_26241_0_rd = s_b_61_10, dominates: s_b_62_8 s_b_64_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_61_10);
        /* execute.simd:3225 [F] s_b_61_12: Jump b_60 (const) */
        {
          auto block = block_b_60;
          dynamic_block_queue.push(block_b_60);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_62) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_62);
        /* execute.simd:3223 [D] s_b_62_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_62_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_62_1 = constant u8 a (const) */
        /* execute.simd:3223 [D] s_b_62_0[s_b_62_1] */
        auto s_b_62_2 = emitter.vector_extract(s_b_62_0, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3223 [D] s_b_62_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_62_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_62_4 = constant u8 a (const) */
        /* execute.simd:3223 [D] s_b_62_3[s_b_62_4] */
        auto s_b_62_5 = emitter.vector_extract(s_b_62_3, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3223 [D] s_b_62_6 = -s_b_62_5 */
        auto s_b_62_6 = emitter.neg(s_b_62_5);
        /* execute.simd:3223 [D] s_b_62_7 = s_b_62_2->>s_b_62_6 */
        auto s_b_62_7 = emitter.sar(s_b_62_2, s_b_62_6);
        /* execute.simd:3223 [D] s_b_62_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_62_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_62_9 = (u8)s_b_62_7 */
        auto s_b_62_9 = emitter.reinterpret(s_b_62_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_62_10 = constant s32 a (const) */
        /* execute.simd:3223 [D] s_b_62_11 = s_b_62_8[s_b_62_10] <= s_b_62_9 */
        auto s_b_62_11 = emitter.vector_insert(s_b_62_8, emitter.const_s32((int32_t)10ULL), s_b_62_9);
        /* execute.simd:3223 [D] s_b_62_12: sym_26241_0_rd = s_b_62_11, dominates: s_b_65_8 s_b_67_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_62_11);
        /* execute.simd:3223 [F] s_b_62_13: Jump b_63 (const) */
        {
          auto block = block_b_63;
          dynamic_block_queue.push(block_b_63);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_63) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_63);
        /* execute.simd:3222 [D] s_b_63_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_63_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_63_1 = constant u8 b (const) */
        /* execute.simd:3222 [D] s_b_63_0[s_b_63_1] */
        auto s_b_63_2 = emitter.vector_extract(s_b_63_0, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3222 [F] s_b_63_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_63_4 = (s32)s_b_63_2 */
        auto s_b_63_4 = emitter.sx(s_b_63_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_63_5 = s_b_63_4<s_b_63_3 */
        auto s_b_63_5 = emitter.cmp_lt(s_b_63_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_63_6: If s_b_63_5: Jump b_65 else b_67 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_65;
            dynamic_block_queue.push(block_b_65);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_67;
            dynamic_block_queue.push(block_b_67);
            false_target = block;
          }
          emitter.branch(s_b_63_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_64) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_64);
        /* execute.simd:3225 [D] s_b_64_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_64_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_64_1 = constant u8 a (const) */
        /* execute.simd:3225 [D] s_b_64_0[s_b_64_1] */
        auto s_b_64_2 = emitter.vector_extract(s_b_64_0, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3225 [D] s_b_64_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_64_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_64_4 = constant u8 a (const) */
        /* execute.simd:3225 [D] s_b_64_3[s_b_64_4] */
        auto s_b_64_5 = emitter.vector_extract(s_b_64_3, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3225 [D] s_b_64_6 = s_b_64_2<<s_b_64_5 */
        auto s_b_64_6 = emitter.shl(s_b_64_2, s_b_64_5);
        /* execute.simd:3225 [D] s_b_64_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_64_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_64_8 = (u8)s_b_64_6 */
        auto s_b_64_8 = emitter.reinterpret(s_b_64_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_64_9 = constant s32 a (const) */
        /* execute.simd:3225 [D] s_b_64_10 = s_b_64_7[s_b_64_9] <= s_b_64_8 */
        auto s_b_64_10 = emitter.vector_insert(s_b_64_7, emitter.const_s32((int32_t)10ULL), s_b_64_8);
        /* execute.simd:3225 [D] s_b_64_11: sym_26241_0_rd = s_b_64_10, dominates: s_b_65_8 s_b_67_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_64_10);
        /* execute.simd:3225 [F] s_b_64_12: Jump b_63 (const) */
        {
          auto block = block_b_63;
          dynamic_block_queue.push(block_b_63);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_65) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_65);
        /* execute.simd:3223 [D] s_b_65_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_65_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_65_1 = constant u8 b (const) */
        /* execute.simd:3223 [D] s_b_65_0[s_b_65_1] */
        auto s_b_65_2 = emitter.vector_extract(s_b_65_0, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3223 [D] s_b_65_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_65_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_65_4 = constant u8 b (const) */
        /* execute.simd:3223 [D] s_b_65_3[s_b_65_4] */
        auto s_b_65_5 = emitter.vector_extract(s_b_65_3, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3223 [D] s_b_65_6 = -s_b_65_5 */
        auto s_b_65_6 = emitter.neg(s_b_65_5);
        /* execute.simd:3223 [D] s_b_65_7 = s_b_65_2->>s_b_65_6 */
        auto s_b_65_7 = emitter.sar(s_b_65_2, s_b_65_6);
        /* execute.simd:3223 [D] s_b_65_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_65_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_65_9 = (u8)s_b_65_7 */
        auto s_b_65_9 = emitter.reinterpret(s_b_65_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_65_10 = constant s32 b (const) */
        /* execute.simd:3223 [D] s_b_65_11 = s_b_65_8[s_b_65_10] <= s_b_65_9 */
        auto s_b_65_11 = emitter.vector_insert(s_b_65_8, emitter.const_s32((int32_t)11ULL), s_b_65_9);
        /* execute.simd:3223 [D] s_b_65_12: sym_26241_0_rd = s_b_65_11, dominates: s_b_68_8 s_b_70_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_65_11);
        /* execute.simd:3223 [F] s_b_65_13: Jump b_66 (const) */
        {
          auto block = block_b_66;
          dynamic_block_queue.push(block_b_66);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_66) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_66);
        /* execute.simd:3222 [D] s_b_66_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_66_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_66_1 = constant u8 c (const) */
        /* execute.simd:3222 [D] s_b_66_0[s_b_66_1] */
        auto s_b_66_2 = emitter.vector_extract(s_b_66_0, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3222 [F] s_b_66_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_66_4 = (s32)s_b_66_2 */
        auto s_b_66_4 = emitter.sx(s_b_66_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_66_5 = s_b_66_4<s_b_66_3 */
        auto s_b_66_5 = emitter.cmp_lt(s_b_66_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_66_6: If s_b_66_5: Jump b_68 else b_70 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_68;
            dynamic_block_queue.push(block_b_68);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_70;
            dynamic_block_queue.push(block_b_70);
            false_target = block;
          }
          emitter.branch(s_b_66_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_67) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_67);
        /* execute.simd:3225 [D] s_b_67_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_67_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_67_1 = constant u8 b (const) */
        /* execute.simd:3225 [D] s_b_67_0[s_b_67_1] */
        auto s_b_67_2 = emitter.vector_extract(s_b_67_0, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3225 [D] s_b_67_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_67_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_67_4 = constant u8 b (const) */
        /* execute.simd:3225 [D] s_b_67_3[s_b_67_4] */
        auto s_b_67_5 = emitter.vector_extract(s_b_67_3, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3225 [D] s_b_67_6 = s_b_67_2<<s_b_67_5 */
        auto s_b_67_6 = emitter.shl(s_b_67_2, s_b_67_5);
        /* execute.simd:3225 [D] s_b_67_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_67_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_67_8 = (u8)s_b_67_6 */
        auto s_b_67_8 = emitter.reinterpret(s_b_67_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_67_9 = constant s32 b (const) */
        /* execute.simd:3225 [D] s_b_67_10 = s_b_67_7[s_b_67_9] <= s_b_67_8 */
        auto s_b_67_10 = emitter.vector_insert(s_b_67_7, emitter.const_s32((int32_t)11ULL), s_b_67_8);
        /* execute.simd:3225 [D] s_b_67_11: sym_26241_0_rd = s_b_67_10, dominates: s_b_68_8 s_b_70_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_67_10);
        /* execute.simd:3225 [F] s_b_67_12: Jump b_66 (const) */
        {
          auto block = block_b_66;
          dynamic_block_queue.push(block_b_66);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_68) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_68);
        /* execute.simd:3223 [D] s_b_68_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_68_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_68_1 = constant u8 c (const) */
        /* execute.simd:3223 [D] s_b_68_0[s_b_68_1] */
        auto s_b_68_2 = emitter.vector_extract(s_b_68_0, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3223 [D] s_b_68_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_68_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_68_4 = constant u8 c (const) */
        /* execute.simd:3223 [D] s_b_68_3[s_b_68_4] */
        auto s_b_68_5 = emitter.vector_extract(s_b_68_3, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3223 [D] s_b_68_6 = -s_b_68_5 */
        auto s_b_68_6 = emitter.neg(s_b_68_5);
        /* execute.simd:3223 [D] s_b_68_7 = s_b_68_2->>s_b_68_6 */
        auto s_b_68_7 = emitter.sar(s_b_68_2, s_b_68_6);
        /* execute.simd:3223 [D] s_b_68_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_68_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_68_9 = (u8)s_b_68_7 */
        auto s_b_68_9 = emitter.reinterpret(s_b_68_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_68_10 = constant s32 c (const) */
        /* execute.simd:3223 [D] s_b_68_11 = s_b_68_8[s_b_68_10] <= s_b_68_9 */
        auto s_b_68_11 = emitter.vector_insert(s_b_68_8, emitter.const_s32((int32_t)12ULL), s_b_68_9);
        /* execute.simd:3223 [D] s_b_68_12: sym_26241_0_rd = s_b_68_11, dominates: s_b_71_8 s_b_73_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_68_11);
        /* execute.simd:3223 [F] s_b_68_13: Jump b_69 (const) */
        {
          auto block = block_b_69;
          dynamic_block_queue.push(block_b_69);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_69) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_69);
        /* execute.simd:3222 [D] s_b_69_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_69_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_69_1 = constant u8 d (const) */
        /* execute.simd:3222 [D] s_b_69_0[s_b_69_1] */
        auto s_b_69_2 = emitter.vector_extract(s_b_69_0, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3222 [F] s_b_69_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_69_4 = (s32)s_b_69_2 */
        auto s_b_69_4 = emitter.sx(s_b_69_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_69_5 = s_b_69_4<s_b_69_3 */
        auto s_b_69_5 = emitter.cmp_lt(s_b_69_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_69_6: If s_b_69_5: Jump b_71 else b_73 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_71;
            dynamic_block_queue.push(block_b_71);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_73;
            dynamic_block_queue.push(block_b_73);
            false_target = block;
          }
          emitter.branch(s_b_69_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_70) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_70);
        /* execute.simd:3225 [D] s_b_70_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_70_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_70_1 = constant u8 c (const) */
        /* execute.simd:3225 [D] s_b_70_0[s_b_70_1] */
        auto s_b_70_2 = emitter.vector_extract(s_b_70_0, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3225 [D] s_b_70_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_70_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_70_4 = constant u8 c (const) */
        /* execute.simd:3225 [D] s_b_70_3[s_b_70_4] */
        auto s_b_70_5 = emitter.vector_extract(s_b_70_3, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3225 [D] s_b_70_6 = s_b_70_2<<s_b_70_5 */
        auto s_b_70_6 = emitter.shl(s_b_70_2, s_b_70_5);
        /* execute.simd:3225 [D] s_b_70_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_70_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_70_8 = (u8)s_b_70_6 */
        auto s_b_70_8 = emitter.reinterpret(s_b_70_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_70_9 = constant s32 c (const) */
        /* execute.simd:3225 [D] s_b_70_10 = s_b_70_7[s_b_70_9] <= s_b_70_8 */
        auto s_b_70_10 = emitter.vector_insert(s_b_70_7, emitter.const_s32((int32_t)12ULL), s_b_70_8);
        /* execute.simd:3225 [D] s_b_70_11: sym_26241_0_rd = s_b_70_10, dominates: s_b_71_8 s_b_73_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_70_10);
        /* execute.simd:3225 [F] s_b_70_12: Jump b_69 (const) */
        {
          auto block = block_b_69;
          dynamic_block_queue.push(block_b_69);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_71) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_71);
        /* execute.simd:3223 [D] s_b_71_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_71_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_71_1 = constant u8 d (const) */
        /* execute.simd:3223 [D] s_b_71_0[s_b_71_1] */
        auto s_b_71_2 = emitter.vector_extract(s_b_71_0, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3223 [D] s_b_71_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_71_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_71_4 = constant u8 d (const) */
        /* execute.simd:3223 [D] s_b_71_3[s_b_71_4] */
        auto s_b_71_5 = emitter.vector_extract(s_b_71_3, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3223 [D] s_b_71_6 = -s_b_71_5 */
        auto s_b_71_6 = emitter.neg(s_b_71_5);
        /* execute.simd:3223 [D] s_b_71_7 = s_b_71_2->>s_b_71_6 */
        auto s_b_71_7 = emitter.sar(s_b_71_2, s_b_71_6);
        /* execute.simd:3223 [D] s_b_71_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_71_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_71_9 = (u8)s_b_71_7 */
        auto s_b_71_9 = emitter.reinterpret(s_b_71_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_71_10 = constant s32 d (const) */
        /* execute.simd:3223 [D] s_b_71_11 = s_b_71_8[s_b_71_10] <= s_b_71_9 */
        auto s_b_71_11 = emitter.vector_insert(s_b_71_8, emitter.const_s32((int32_t)13ULL), s_b_71_9);
        /* execute.simd:3223 [D] s_b_71_12: sym_26241_0_rd = s_b_71_11, dominates: s_b_74_8 s_b_76_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_71_11);
        /* execute.simd:3223 [F] s_b_71_13: Jump b_72 (const) */
        {
          auto block = block_b_72;
          dynamic_block_queue.push(block_b_72);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_72) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_72);
        /* execute.simd:3222 [D] s_b_72_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_72_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_72_1 = constant u8 e (const) */
        /* execute.simd:3222 [D] s_b_72_0[s_b_72_1] */
        auto s_b_72_2 = emitter.vector_extract(s_b_72_0, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3222 [F] s_b_72_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_72_4 = (s32)s_b_72_2 */
        auto s_b_72_4 = emitter.sx(s_b_72_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_72_5 = s_b_72_4<s_b_72_3 */
        auto s_b_72_5 = emitter.cmp_lt(s_b_72_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_72_6: If s_b_72_5: Jump b_74 else b_76 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_74;
            dynamic_block_queue.push(block_b_74);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_76;
            dynamic_block_queue.push(block_b_76);
            false_target = block;
          }
          emitter.branch(s_b_72_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_73) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_73);
        /* execute.simd:3225 [D] s_b_73_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_73_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_73_1 = constant u8 d (const) */
        /* execute.simd:3225 [D] s_b_73_0[s_b_73_1] */
        auto s_b_73_2 = emitter.vector_extract(s_b_73_0, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3225 [D] s_b_73_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_73_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_73_4 = constant u8 d (const) */
        /* execute.simd:3225 [D] s_b_73_3[s_b_73_4] */
        auto s_b_73_5 = emitter.vector_extract(s_b_73_3, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3225 [D] s_b_73_6 = s_b_73_2<<s_b_73_5 */
        auto s_b_73_6 = emitter.shl(s_b_73_2, s_b_73_5);
        /* execute.simd:3225 [D] s_b_73_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_73_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_73_8 = (u8)s_b_73_6 */
        auto s_b_73_8 = emitter.reinterpret(s_b_73_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_73_9 = constant s32 d (const) */
        /* execute.simd:3225 [D] s_b_73_10 = s_b_73_7[s_b_73_9] <= s_b_73_8 */
        auto s_b_73_10 = emitter.vector_insert(s_b_73_7, emitter.const_s32((int32_t)13ULL), s_b_73_8);
        /* execute.simd:3225 [D] s_b_73_11: sym_26241_0_rd = s_b_73_10, dominates: s_b_74_8 s_b_76_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_73_10);
        /* execute.simd:3225 [F] s_b_73_12: Jump b_72 (const) */
        {
          auto block = block_b_72;
          dynamic_block_queue.push(block_b_72);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_74) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_74);
        /* execute.simd:3223 [D] s_b_74_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_74_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_74_1 = constant u8 e (const) */
        /* execute.simd:3223 [D] s_b_74_0[s_b_74_1] */
        auto s_b_74_2 = emitter.vector_extract(s_b_74_0, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3223 [D] s_b_74_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_74_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_74_4 = constant u8 e (const) */
        /* execute.simd:3223 [D] s_b_74_3[s_b_74_4] */
        auto s_b_74_5 = emitter.vector_extract(s_b_74_3, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3223 [D] s_b_74_6 = -s_b_74_5 */
        auto s_b_74_6 = emitter.neg(s_b_74_5);
        /* execute.simd:3223 [D] s_b_74_7 = s_b_74_2->>s_b_74_6 */
        auto s_b_74_7 = emitter.sar(s_b_74_2, s_b_74_6);
        /* execute.simd:3223 [D] s_b_74_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_74_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_74_9 = (u8)s_b_74_7 */
        auto s_b_74_9 = emitter.reinterpret(s_b_74_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_74_10 = constant s32 e (const) */
        /* execute.simd:3223 [D] s_b_74_11 = s_b_74_8[s_b_74_10] <= s_b_74_9 */
        auto s_b_74_11 = emitter.vector_insert(s_b_74_8, emitter.const_s32((int32_t)14ULL), s_b_74_9);
        /* execute.simd:3223 [D] s_b_74_12: sym_26241_0_rd = s_b_74_11, dominates: s_b_77_8 s_b_79_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_74_11);
        /* execute.simd:3223 [F] s_b_74_13: Jump b_75 (const) */
        {
          auto block = block_b_75;
          dynamic_block_queue.push(block_b_75);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_75) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_75);
        /* execute.simd:3222 [D] s_b_75_0 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_75_0 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_75_1 = constant u8 f (const) */
        /* execute.simd:3222 [D] s_b_75_0[s_b_75_1] */
        auto s_b_75_2 = emitter.vector_extract(s_b_75_0, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3222 [F] s_b_75_3 = constant s32 0 (const) */
        /* execute.simd:3222 [D] s_b_75_4 = (s32)s_b_75_2 */
        auto s_b_75_4 = emitter.sx(s_b_75_2, emitter.context().types().s32());
        /* execute.simd:3222 [D] s_b_75_5 = s_b_75_4<s_b_75_3 */
        auto s_b_75_5 = emitter.cmp_lt(s_b_75_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3222 [D] s_b_75_6: If s_b_75_5: Jump b_77 else b_79 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_77;
            dynamic_block_queue.push(block_b_77);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_79;
            dynamic_block_queue.push(block_b_79);
            false_target = block;
          }
          emitter.branch(s_b_75_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_76) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_76);
        /* execute.simd:3225 [D] s_b_76_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_76_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_76_1 = constant u8 e (const) */
        /* execute.simd:3225 [D] s_b_76_0[s_b_76_1] */
        auto s_b_76_2 = emitter.vector_extract(s_b_76_0, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3225 [D] s_b_76_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_76_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_76_4 = constant u8 e (const) */
        /* execute.simd:3225 [D] s_b_76_3[s_b_76_4] */
        auto s_b_76_5 = emitter.vector_extract(s_b_76_3, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3225 [D] s_b_76_6 = s_b_76_2<<s_b_76_5 */
        auto s_b_76_6 = emitter.shl(s_b_76_2, s_b_76_5);
        /* execute.simd:3225 [D] s_b_76_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_76_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_76_8 = (u8)s_b_76_6 */
        auto s_b_76_8 = emitter.reinterpret(s_b_76_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_76_9 = constant s32 e (const) */
        /* execute.simd:3225 [D] s_b_76_10 = s_b_76_7[s_b_76_9] <= s_b_76_8 */
        auto s_b_76_10 = emitter.vector_insert(s_b_76_7, emitter.const_s32((int32_t)14ULL), s_b_76_8);
        /* execute.simd:3225 [D] s_b_76_11: sym_26241_0_rd = s_b_76_10, dominates: s_b_77_8 s_b_79_7  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_76_10);
        /* execute.simd:3225 [F] s_b_76_12: Jump b_75 (const) */
        {
          auto block = block_b_75;
          dynamic_block_queue.push(block_b_75);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_77) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_77);
        /* execute.simd:3223 [D] s_b_77_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_77_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_77_1 = constant u8 f (const) */
        /* execute.simd:3223 [D] s_b_77_0[s_b_77_1] */
        auto s_b_77_2 = emitter.vector_extract(s_b_77_0, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3223 [D] s_b_77_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_77_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_77_4 = constant u8 f (const) */
        /* execute.simd:3223 [D] s_b_77_3[s_b_77_4] */
        auto s_b_77_5 = emitter.vector_extract(s_b_77_3, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3223 [D] s_b_77_6 = -s_b_77_5 */
        auto s_b_77_6 = emitter.neg(s_b_77_5);
        /* execute.simd:3223 [D] s_b_77_7 = s_b_77_2->>s_b_77_6 */
        auto s_b_77_7 = emitter.sar(s_b_77_2, s_b_77_6);
        /* execute.simd:3223 [D] s_b_77_8 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_77_8 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3223 [D] s_b_77_9 = (u8)s_b_77_7 */
        auto s_b_77_9 = emitter.reinterpret(s_b_77_7, emitter.context().types().u8());
        /* execute.simd:3223 [F] s_b_77_10 = constant s32 f (const) */
        /* execute.simd:3223 [D] s_b_77_11 = s_b_77_8[s_b_77_10] <= s_b_77_9 */
        auto s_b_77_11 = emitter.vector_insert(s_b_77_8, emitter.const_s32((int32_t)15ULL), s_b_77_9);
        /* execute.simd:3223 [D] s_b_77_12: sym_26241_0_rd = s_b_77_11, dominates: s_b_78_1  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_77_11);
        /* execute.simd:3223 [F] s_b_77_13: Jump b_78 (const) */
        {
          auto block = block_b_78;
          dynamic_block_queue.push(block_b_78);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_78) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_78);
        /* execute.simd:3229 [F] s_b_78_0=sym_25777_3_parameter_inst.rd (const) */
        /* execute.simd:3229 [D] s_b_78_1 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_78_1 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3229 [D] s_b_78_2: WriteRegBank 16:s_b_78_0 = s_b_78_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_78_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_78_1);
        /* execute.simd:0 [F] s_b_78_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_79) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_79);
        /* execute.simd:3225 [D] s_b_79_0 = sym_26231_0_rn wutils::Vector<int8_t, 16> */
        auto s_b_79_0 = emitter.load_local(DV_sym_26231_0_rn, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_79_1 = constant u8 f (const) */
        /* execute.simd:3225 [D] s_b_79_0[s_b_79_1] */
        auto s_b_79_2 = emitter.vector_extract(s_b_79_0, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3225 [D] s_b_79_3 = sym_26236_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_79_3 = emitter.load_local(DV_sym_26236_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_79_4 = constant u8 f (const) */
        /* execute.simd:3225 [D] s_b_79_3[s_b_79_4] */
        auto s_b_79_5 = emitter.vector_extract(s_b_79_3, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3225 [D] s_b_79_6 = s_b_79_2<<s_b_79_5 */
        auto s_b_79_6 = emitter.shl(s_b_79_2, s_b_79_5);
        /* execute.simd:3225 [D] s_b_79_7 = sym_26241_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_79_7 = emitter.load_local(DV_sym_26241_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3225 [D] s_b_79_8 = (u8)s_b_79_6 */
        auto s_b_79_8 = emitter.reinterpret(s_b_79_6, emitter.context().types().u8());
        /* execute.simd:3225 [F] s_b_79_9 = constant s32 f (const) */
        /* execute.simd:3225 [D] s_b_79_10 = s_b_79_7[s_b_79_9] <= s_b_79_8 */
        auto s_b_79_10 = emitter.vector_insert(s_b_79_7, emitter.const_s32((int32_t)15ULL), s_b_79_8);
        /* execute.simd:3225 [D] s_b_79_11: sym_26241_0_rd = s_b_79_10, dominates: s_b_78_1  */
        emitter.store_local(DV_sym_26241_0_rd, s_b_79_10);
        /* execute.simd:3225 [F] s_b_79_12: Jump b_78 (const) */
        {
          auto block = block_b_78;
          dynamic_block_queue.push(block_b_78);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_81) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_81);
        /* execute.simd:3239 [D] s_b_81_0 = sym_27022_0_rn wutils::Vector<int16_t, 4> */
        auto s_b_81_0 = emitter.load_local(DV_sym_27022_0_rn, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_81_1 = constant u8 0 (const) */
        /* execute.simd:3239 [D] s_b_81_0[s_b_81_1] */
        auto s_b_81_2 = emitter.vector_extract(s_b_81_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3239 [D] s_b_81_3 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_81_3 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_81_4 = constant u8 0 (const) */
        /* execute.simd:3239 [D] s_b_81_3[s_b_81_4] */
        auto s_b_81_5 = emitter.vector_extract(s_b_81_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3239 [D] s_b_81_6 = -s_b_81_5 */
        auto s_b_81_6 = emitter.neg(s_b_81_5);
        /* execute.simd:3239 [D] s_b_81_7 = s_b_81_2->>s_b_81_6 */
        auto s_b_81_7 = emitter.sar(s_b_81_2, s_b_81_6);
        /* execute.simd:3239 [F] s_b_81_8 = sym_27032_0_rd (const) wutils::Vector<uint16_t, 8> */
        wutils::Vector<uint16_t, 8> s_b_81_8 = CV_sym_27032_0_rd;
        /* execute.simd:3239 [D] s_b_81_9 = (u16)s_b_81_7 */
        auto s_b_81_9 = emitter.reinterpret(s_b_81_7, emitter.context().types().u16());
        /* execute.simd:3239 [F] s_b_81_10 = constant s32 0 (const) */
        /* execute.simd:3239 [D] s_b_81_11 = s_b_81_8[s_b_81_10] <= s_b_81_9 */
        auto s_b_81_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_81_8[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_81_9);
        /* execute.simd:3239 [D] s_b_81_12: sym_27032_0_rd = s_b_81_11, dominates: s_b_84_8 s_b_86_7  */
        emitter.store_local(DV_sym_27032_0_rd, s_b_81_11);
        /* execute.simd:3239 [F] s_b_81_13: Jump b_82 (const) */
        {
          auto block = block_b_82;
          dynamic_block_queue.push(block_b_82);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_82) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_82);
        /* execute.simd:3238 [D] s_b_82_0 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_82_0 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_82_1 = constant u8 1 (const) */
        /* execute.simd:3238 [D] s_b_82_0[s_b_82_1] */
        auto s_b_82_2 = emitter.vector_extract(s_b_82_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3238 [F] s_b_82_3 = constant s32 0 (const) */
        /* execute.simd:3238 [D] s_b_82_4 = (s32)s_b_82_2 */
        auto s_b_82_4 = emitter.sx(s_b_82_2, emitter.context().types().s32());
        /* execute.simd:3238 [D] s_b_82_5 = s_b_82_4<s_b_82_3 */
        auto s_b_82_5 = emitter.cmp_lt(s_b_82_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3238 [D] s_b_82_6: If s_b_82_5: Jump b_84 else b_86 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_84;
            dynamic_block_queue.push(block_b_84);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_86;
            dynamic_block_queue.push(block_b_86);
            false_target = block;
          }
          emitter.branch(s_b_82_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_83) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_83);
        /* execute.simd:3241 [D] s_b_83_0 = sym_27022_0_rn wutils::Vector<int16_t, 4> */
        auto s_b_83_0 = emitter.load_local(DV_sym_27022_0_rn, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_83_1 = constant u8 0 (const) */
        /* execute.simd:3241 [D] s_b_83_0[s_b_83_1] */
        auto s_b_83_2 = emitter.vector_extract(s_b_83_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3241 [D] s_b_83_3 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_83_3 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_83_4 = constant u8 0 (const) */
        /* execute.simd:3241 [D] s_b_83_3[s_b_83_4] */
        auto s_b_83_5 = emitter.vector_extract(s_b_83_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3241 [D] s_b_83_6 = s_b_83_2<<s_b_83_5 */
        auto s_b_83_6 = emitter.shl(s_b_83_2, s_b_83_5);
        /* execute.simd:3241 [F] s_b_83_7 = sym_27032_0_rd (const) wutils::Vector<uint16_t, 8> */
        wutils::Vector<uint16_t, 8> s_b_83_7 = CV_sym_27032_0_rd;
        /* execute.simd:3241 [D] s_b_83_8 = (u16)s_b_83_6 */
        auto s_b_83_8 = emitter.reinterpret(s_b_83_6, emitter.context().types().u16());
        /* execute.simd:3241 [F] s_b_83_9 = constant s32 0 (const) */
        /* execute.simd:3241 [D] s_b_83_10 = s_b_83_7[s_b_83_9] <= s_b_83_8 */
        auto s_b_83_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_83_7[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_83_8);
        /* execute.simd:3241 [D] s_b_83_11: sym_27032_0_rd = s_b_83_10, dominates: s_b_84_8 s_b_86_7  */
        emitter.store_local(DV_sym_27032_0_rd, s_b_83_10);
        /* execute.simd:3241 [F] s_b_83_12: Jump b_82 (const) */
        {
          auto block = block_b_82;
          dynamic_block_queue.push(block_b_82);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_84) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_84);
        /* execute.simd:3239 [D] s_b_84_0 = sym_27022_0_rn wutils::Vector<int16_t, 4> */
        auto s_b_84_0 = emitter.load_local(DV_sym_27022_0_rn, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_84_1 = constant u8 1 (const) */
        /* execute.simd:3239 [D] s_b_84_0[s_b_84_1] */
        auto s_b_84_2 = emitter.vector_extract(s_b_84_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3239 [D] s_b_84_3 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_84_3 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_84_4 = constant u8 1 (const) */
        /* execute.simd:3239 [D] s_b_84_3[s_b_84_4] */
        auto s_b_84_5 = emitter.vector_extract(s_b_84_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3239 [D] s_b_84_6 = -s_b_84_5 */
        auto s_b_84_6 = emitter.neg(s_b_84_5);
        /* execute.simd:3239 [D] s_b_84_7 = s_b_84_2->>s_b_84_6 */
        auto s_b_84_7 = emitter.sar(s_b_84_2, s_b_84_6);
        /* execute.simd:3239 [D] s_b_84_8 = sym_27032_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_84_8 = emitter.load_local(DV_sym_27032_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3239 [D] s_b_84_9 = (u16)s_b_84_7 */
        auto s_b_84_9 = emitter.reinterpret(s_b_84_7, emitter.context().types().u16());
        /* execute.simd:3239 [F] s_b_84_10 = constant s32 1 (const) */
        /* execute.simd:3239 [D] s_b_84_11 = s_b_84_8[s_b_84_10] <= s_b_84_9 */
        auto s_b_84_11 = emitter.vector_insert(s_b_84_8, emitter.const_s32((int32_t)1ULL), s_b_84_9);
        /* execute.simd:3239 [D] s_b_84_12: sym_27032_0_rd = s_b_84_11, dominates: s_b_87_8 s_b_89_7  */
        emitter.store_local(DV_sym_27032_0_rd, s_b_84_11);
        /* execute.simd:3239 [F] s_b_84_13: Jump b_85 (const) */
        {
          auto block = block_b_85;
          dynamic_block_queue.push(block_b_85);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_85) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_85);
        /* execute.simd:3238 [D] s_b_85_0 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_85_0 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_85_1 = constant u8 2 (const) */
        /* execute.simd:3238 [D] s_b_85_0[s_b_85_1] */
        auto s_b_85_2 = emitter.vector_extract(s_b_85_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3238 [F] s_b_85_3 = constant s32 0 (const) */
        /* execute.simd:3238 [D] s_b_85_4 = (s32)s_b_85_2 */
        auto s_b_85_4 = emitter.sx(s_b_85_2, emitter.context().types().s32());
        /* execute.simd:3238 [D] s_b_85_5 = s_b_85_4<s_b_85_3 */
        auto s_b_85_5 = emitter.cmp_lt(s_b_85_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3238 [D] s_b_85_6: If s_b_85_5: Jump b_87 else b_89 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_87;
            dynamic_block_queue.push(block_b_87);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_89;
            dynamic_block_queue.push(block_b_89);
            false_target = block;
          }
          emitter.branch(s_b_85_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_86) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_86);
        /* execute.simd:3241 [D] s_b_86_0 = sym_27022_0_rn wutils::Vector<int16_t, 4> */
        auto s_b_86_0 = emitter.load_local(DV_sym_27022_0_rn, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_86_1 = constant u8 1 (const) */
        /* execute.simd:3241 [D] s_b_86_0[s_b_86_1] */
        auto s_b_86_2 = emitter.vector_extract(s_b_86_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3241 [D] s_b_86_3 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_86_3 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_86_4 = constant u8 1 (const) */
        /* execute.simd:3241 [D] s_b_86_3[s_b_86_4] */
        auto s_b_86_5 = emitter.vector_extract(s_b_86_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3241 [D] s_b_86_6 = s_b_86_2<<s_b_86_5 */
        auto s_b_86_6 = emitter.shl(s_b_86_2, s_b_86_5);
        /* execute.simd:3241 [D] s_b_86_7 = sym_27032_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_86_7 = emitter.load_local(DV_sym_27032_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3241 [D] s_b_86_8 = (u16)s_b_86_6 */
        auto s_b_86_8 = emitter.reinterpret(s_b_86_6, emitter.context().types().u16());
        /* execute.simd:3241 [F] s_b_86_9 = constant s32 1 (const) */
        /* execute.simd:3241 [D] s_b_86_10 = s_b_86_7[s_b_86_9] <= s_b_86_8 */
        auto s_b_86_10 = emitter.vector_insert(s_b_86_7, emitter.const_s32((int32_t)1ULL), s_b_86_8);
        /* execute.simd:3241 [D] s_b_86_11: sym_27032_0_rd = s_b_86_10, dominates: s_b_87_8 s_b_89_7  */
        emitter.store_local(DV_sym_27032_0_rd, s_b_86_10);
        /* execute.simd:3241 [F] s_b_86_12: Jump b_85 (const) */
        {
          auto block = block_b_85;
          dynamic_block_queue.push(block_b_85);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_87) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_87);
        /* execute.simd:3239 [D] s_b_87_0 = sym_27022_0_rn wutils::Vector<int16_t, 4> */
        auto s_b_87_0 = emitter.load_local(DV_sym_27022_0_rn, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_87_1 = constant u8 2 (const) */
        /* execute.simd:3239 [D] s_b_87_0[s_b_87_1] */
        auto s_b_87_2 = emitter.vector_extract(s_b_87_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3239 [D] s_b_87_3 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_87_3 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_87_4 = constant u8 2 (const) */
        /* execute.simd:3239 [D] s_b_87_3[s_b_87_4] */
        auto s_b_87_5 = emitter.vector_extract(s_b_87_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3239 [D] s_b_87_6 = -s_b_87_5 */
        auto s_b_87_6 = emitter.neg(s_b_87_5);
        /* execute.simd:3239 [D] s_b_87_7 = s_b_87_2->>s_b_87_6 */
        auto s_b_87_7 = emitter.sar(s_b_87_2, s_b_87_6);
        /* execute.simd:3239 [D] s_b_87_8 = sym_27032_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_87_8 = emitter.load_local(DV_sym_27032_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3239 [D] s_b_87_9 = (u16)s_b_87_7 */
        auto s_b_87_9 = emitter.reinterpret(s_b_87_7, emitter.context().types().u16());
        /* execute.simd:3239 [F] s_b_87_10 = constant s32 2 (const) */
        /* execute.simd:3239 [D] s_b_87_11 = s_b_87_8[s_b_87_10] <= s_b_87_9 */
        auto s_b_87_11 = emitter.vector_insert(s_b_87_8, emitter.const_s32((int32_t)2ULL), s_b_87_9);
        /* execute.simd:3239 [D] s_b_87_12: sym_27032_0_rd = s_b_87_11, dominates: s_b_90_8 s_b_92_7  */
        emitter.store_local(DV_sym_27032_0_rd, s_b_87_11);
        /* execute.simd:3239 [F] s_b_87_13: Jump b_88 (const) */
        {
          auto block = block_b_88;
          dynamic_block_queue.push(block_b_88);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_88) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_88);
        /* execute.simd:3238 [D] s_b_88_0 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_88_0 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_88_1 = constant u8 3 (const) */
        /* execute.simd:3238 [D] s_b_88_0[s_b_88_1] */
        auto s_b_88_2 = emitter.vector_extract(s_b_88_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3238 [F] s_b_88_3 = constant s32 0 (const) */
        /* execute.simd:3238 [D] s_b_88_4 = (s32)s_b_88_2 */
        auto s_b_88_4 = emitter.sx(s_b_88_2, emitter.context().types().s32());
        /* execute.simd:3238 [D] s_b_88_5 = s_b_88_4<s_b_88_3 */
        auto s_b_88_5 = emitter.cmp_lt(s_b_88_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3238 [D] s_b_88_6: If s_b_88_5: Jump b_90 else b_92 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_90;
            dynamic_block_queue.push(block_b_90);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_92;
            dynamic_block_queue.push(block_b_92);
            false_target = block;
          }
          emitter.branch(s_b_88_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_89) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_89);
        /* execute.simd:3241 [D] s_b_89_0 = sym_27022_0_rn wutils::Vector<int16_t, 4> */
        auto s_b_89_0 = emitter.load_local(DV_sym_27022_0_rn, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_89_1 = constant u8 2 (const) */
        /* execute.simd:3241 [D] s_b_89_0[s_b_89_1] */
        auto s_b_89_2 = emitter.vector_extract(s_b_89_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3241 [D] s_b_89_3 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_89_3 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_89_4 = constant u8 2 (const) */
        /* execute.simd:3241 [D] s_b_89_3[s_b_89_4] */
        auto s_b_89_5 = emitter.vector_extract(s_b_89_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3241 [D] s_b_89_6 = s_b_89_2<<s_b_89_5 */
        auto s_b_89_6 = emitter.shl(s_b_89_2, s_b_89_5);
        /* execute.simd:3241 [D] s_b_89_7 = sym_27032_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_89_7 = emitter.load_local(DV_sym_27032_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3241 [D] s_b_89_8 = (u16)s_b_89_6 */
        auto s_b_89_8 = emitter.reinterpret(s_b_89_6, emitter.context().types().u16());
        /* execute.simd:3241 [F] s_b_89_9 = constant s32 2 (const) */
        /* execute.simd:3241 [D] s_b_89_10 = s_b_89_7[s_b_89_9] <= s_b_89_8 */
        auto s_b_89_10 = emitter.vector_insert(s_b_89_7, emitter.const_s32((int32_t)2ULL), s_b_89_8);
        /* execute.simd:3241 [D] s_b_89_11: sym_27032_0_rd = s_b_89_10, dominates: s_b_90_8 s_b_92_7  */
        emitter.store_local(DV_sym_27032_0_rd, s_b_89_10);
        /* execute.simd:3241 [F] s_b_89_12: Jump b_88 (const) */
        {
          auto block = block_b_88;
          dynamic_block_queue.push(block_b_88);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_90) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_90);
        /* execute.simd:3239 [D] s_b_90_0 = sym_27022_0_rn wutils::Vector<int16_t, 4> */
        auto s_b_90_0 = emitter.load_local(DV_sym_27022_0_rn, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_90_1 = constant u8 3 (const) */
        /* execute.simd:3239 [D] s_b_90_0[s_b_90_1] */
        auto s_b_90_2 = emitter.vector_extract(s_b_90_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3239 [D] s_b_90_3 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_90_3 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_90_4 = constant u8 3 (const) */
        /* execute.simd:3239 [D] s_b_90_3[s_b_90_4] */
        auto s_b_90_5 = emitter.vector_extract(s_b_90_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3239 [D] s_b_90_6 = -s_b_90_5 */
        auto s_b_90_6 = emitter.neg(s_b_90_5);
        /* execute.simd:3239 [D] s_b_90_7 = s_b_90_2->>s_b_90_6 */
        auto s_b_90_7 = emitter.sar(s_b_90_2, s_b_90_6);
        /* execute.simd:3239 [D] s_b_90_8 = sym_27032_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_90_8 = emitter.load_local(DV_sym_27032_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3239 [D] s_b_90_9 = (u16)s_b_90_7 */
        auto s_b_90_9 = emitter.reinterpret(s_b_90_7, emitter.context().types().u16());
        /* execute.simd:3239 [F] s_b_90_10 = constant s32 3 (const) */
        /* execute.simd:3239 [D] s_b_90_11 = s_b_90_8[s_b_90_10] <= s_b_90_9 */
        auto s_b_90_11 = emitter.vector_insert(s_b_90_8, emitter.const_s32((int32_t)3ULL), s_b_90_9);
        /* execute.simd:3239 [D] s_b_90_12: sym_27032_0_rd = s_b_90_11, dominates: s_b_91_1  */
        emitter.store_local(DV_sym_27032_0_rd, s_b_90_11);
        /* execute.simd:3239 [F] s_b_90_13: Jump b_91 (const) */
        {
          auto block = block_b_91;
          dynamic_block_queue.push(block_b_91);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_91) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_91);
        /* execute.simd:3245 [F] s_b_91_0=sym_25777_3_parameter_inst.rd (const) */
        /* execute.simd:3245 [D] s_b_91_1 = sym_27032_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_91_1 = emitter.load_local(DV_sym_27032_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3245 [D] s_b_91_2: WriteRegBank 18:s_b_91_0 = s_b_91_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_91_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_91_1);
        /* execute.simd:0 [F] s_b_91_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_92) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_92);
        /* execute.simd:3241 [D] s_b_92_0 = sym_27022_0_rn wutils::Vector<int16_t, 4> */
        auto s_b_92_0 = emitter.load_local(DV_sym_27022_0_rn, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_92_1 = constant u8 3 (const) */
        /* execute.simd:3241 [D] s_b_92_0[s_b_92_1] */
        auto s_b_92_2 = emitter.vector_extract(s_b_92_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3241 [D] s_b_92_3 = sym_27027_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_92_3 = emitter.load_local(DV_sym_27027_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_92_4 = constant u8 3 (const) */
        /* execute.simd:3241 [D] s_b_92_3[s_b_92_4] */
        auto s_b_92_5 = emitter.vector_extract(s_b_92_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3241 [D] s_b_92_6 = s_b_92_2<<s_b_92_5 */
        auto s_b_92_6 = emitter.shl(s_b_92_2, s_b_92_5);
        /* execute.simd:3241 [D] s_b_92_7 = sym_27032_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_92_7 = emitter.load_local(DV_sym_27032_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3241 [D] s_b_92_8 = (u16)s_b_92_6 */
        auto s_b_92_8 = emitter.reinterpret(s_b_92_6, emitter.context().types().u16());
        /* execute.simd:3241 [F] s_b_92_9 = constant s32 3 (const) */
        /* execute.simd:3241 [D] s_b_92_10 = s_b_92_7[s_b_92_9] <= s_b_92_8 */
        auto s_b_92_10 = emitter.vector_insert(s_b_92_7, emitter.const_s32((int32_t)3ULL), s_b_92_8);
        /* execute.simd:3241 [D] s_b_92_11: sym_27032_0_rd = s_b_92_10, dominates: s_b_91_1  */
        emitter.store_local(DV_sym_27032_0_rd, s_b_92_10);
        /* execute.simd:3241 [F] s_b_92_12: Jump b_91 (const) */
        {
          auto block = block_b_91;
          dynamic_block_queue.push(block_b_91);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_94) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_94);
        /* execute.simd:3255 [D] s_b_94_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_94_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_94_1 = constant u8 0 (const) */
        /* execute.simd:3255 [D] s_b_94_0[s_b_94_1] */
        auto s_b_94_2 = emitter.vector_extract(s_b_94_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3255 [D] s_b_94_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_94_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_94_4 = constant u8 0 (const) */
        /* execute.simd:3255 [D] s_b_94_3[s_b_94_4] */
        auto s_b_94_5 = emitter.vector_extract(s_b_94_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3255 [D] s_b_94_6 = -s_b_94_5 */
        auto s_b_94_6 = emitter.neg(s_b_94_5);
        /* execute.simd:3255 [D] s_b_94_7 = s_b_94_2->>s_b_94_6 */
        auto s_b_94_7 = emitter.sar(s_b_94_2, s_b_94_6);
        /* execute.simd:3255 [F] s_b_94_8 = sym_27247_0_rd (const) wutils::Vector<uint16_t, 8> */
        wutils::Vector<uint16_t, 8> s_b_94_8 = CV_sym_27247_0_rd;
        /* execute.simd:3255 [D] s_b_94_9 = (u16)s_b_94_7 */
        auto s_b_94_9 = emitter.reinterpret(s_b_94_7, emitter.context().types().u16());
        /* execute.simd:3255 [F] s_b_94_10 = constant s32 0 (const) */
        /* execute.simd:3255 [D] s_b_94_11 = s_b_94_8[s_b_94_10] <= s_b_94_9 */
        auto s_b_94_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_94_8[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_94_9);
        /* execute.simd:3255 [D] s_b_94_12: sym_27247_0_rd = s_b_94_11, dominates: s_b_97_8 s_b_99_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_94_11);
        /* execute.simd:3255 [F] s_b_94_13: Jump b_95 (const) */
        {
          auto block = block_b_95;
          dynamic_block_queue.push(block_b_95);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_95) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_95);
        /* execute.simd:3254 [D] s_b_95_0 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_95_0 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_95_1 = constant u8 1 (const) */
        /* execute.simd:3254 [D] s_b_95_0[s_b_95_1] */
        auto s_b_95_2 = emitter.vector_extract(s_b_95_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3254 [F] s_b_95_3 = constant s32 0 (const) */
        /* execute.simd:3254 [D] s_b_95_4 = (s32)s_b_95_2 */
        auto s_b_95_4 = emitter.sx(s_b_95_2, emitter.context().types().s32());
        /* execute.simd:3254 [D] s_b_95_5 = s_b_95_4<s_b_95_3 */
        auto s_b_95_5 = emitter.cmp_lt(s_b_95_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3254 [D] s_b_95_6: If s_b_95_5: Jump b_97 else b_99 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_97;
            dynamic_block_queue.push(block_b_97);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_99;
            dynamic_block_queue.push(block_b_99);
            false_target = block;
          }
          emitter.branch(s_b_95_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_96) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_96);
        /* execute.simd:3257 [D] s_b_96_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_96_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_96_1 = constant u8 0 (const) */
        /* execute.simd:3257 [D] s_b_96_0[s_b_96_1] */
        auto s_b_96_2 = emitter.vector_extract(s_b_96_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3257 [D] s_b_96_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_96_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_96_4 = constant u8 0 (const) */
        /* execute.simd:3257 [D] s_b_96_3[s_b_96_4] */
        auto s_b_96_5 = emitter.vector_extract(s_b_96_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3257 [D] s_b_96_6 = s_b_96_2<<s_b_96_5 */
        auto s_b_96_6 = emitter.shl(s_b_96_2, s_b_96_5);
        /* execute.simd:3257 [F] s_b_96_7 = sym_27247_0_rd (const) wutils::Vector<uint16_t, 8> */
        wutils::Vector<uint16_t, 8> s_b_96_7 = CV_sym_27247_0_rd;
        /* execute.simd:3257 [D] s_b_96_8 = (u16)s_b_96_6 */
        auto s_b_96_8 = emitter.reinterpret(s_b_96_6, emitter.context().types().u16());
        /* execute.simd:3257 [F] s_b_96_9 = constant s32 0 (const) */
        /* execute.simd:3257 [D] s_b_96_10 = s_b_96_7[s_b_96_9] <= s_b_96_8 */
        auto s_b_96_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_96_7[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_96_8);
        /* execute.simd:3257 [D] s_b_96_11: sym_27247_0_rd = s_b_96_10, dominates: s_b_97_8 s_b_99_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_96_10);
        /* execute.simd:3257 [F] s_b_96_12: Jump b_95 (const) */
        {
          auto block = block_b_95;
          dynamic_block_queue.push(block_b_95);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_97) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_97);
        /* execute.simd:3255 [D] s_b_97_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_97_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_97_1 = constant u8 1 (const) */
        /* execute.simd:3255 [D] s_b_97_0[s_b_97_1] */
        auto s_b_97_2 = emitter.vector_extract(s_b_97_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3255 [D] s_b_97_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_97_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_97_4 = constant u8 1 (const) */
        /* execute.simd:3255 [D] s_b_97_3[s_b_97_4] */
        auto s_b_97_5 = emitter.vector_extract(s_b_97_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3255 [D] s_b_97_6 = -s_b_97_5 */
        auto s_b_97_6 = emitter.neg(s_b_97_5);
        /* execute.simd:3255 [D] s_b_97_7 = s_b_97_2->>s_b_97_6 */
        auto s_b_97_7 = emitter.sar(s_b_97_2, s_b_97_6);
        /* execute.simd:3255 [D] s_b_97_8 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_97_8 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3255 [D] s_b_97_9 = (u16)s_b_97_7 */
        auto s_b_97_9 = emitter.reinterpret(s_b_97_7, emitter.context().types().u16());
        /* execute.simd:3255 [F] s_b_97_10 = constant s32 1 (const) */
        /* execute.simd:3255 [D] s_b_97_11 = s_b_97_8[s_b_97_10] <= s_b_97_9 */
        auto s_b_97_11 = emitter.vector_insert(s_b_97_8, emitter.const_s32((int32_t)1ULL), s_b_97_9);
        /* execute.simd:3255 [D] s_b_97_12: sym_27247_0_rd = s_b_97_11, dominates: s_b_100_8 s_b_102_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_97_11);
        /* execute.simd:3255 [F] s_b_97_13: Jump b_98 (const) */
        {
          auto block = block_b_98;
          dynamic_block_queue.push(block_b_98);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_98) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_98);
        /* execute.simd:3254 [D] s_b_98_0 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_98_0 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_98_1 = constant u8 2 (const) */
        /* execute.simd:3254 [D] s_b_98_0[s_b_98_1] */
        auto s_b_98_2 = emitter.vector_extract(s_b_98_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3254 [F] s_b_98_3 = constant s32 0 (const) */
        /* execute.simd:3254 [D] s_b_98_4 = (s32)s_b_98_2 */
        auto s_b_98_4 = emitter.sx(s_b_98_2, emitter.context().types().s32());
        /* execute.simd:3254 [D] s_b_98_5 = s_b_98_4<s_b_98_3 */
        auto s_b_98_5 = emitter.cmp_lt(s_b_98_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3254 [D] s_b_98_6: If s_b_98_5: Jump b_100 else b_102 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_100;
            dynamic_block_queue.push(block_b_100);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_102;
            dynamic_block_queue.push(block_b_102);
            false_target = block;
          }
          emitter.branch(s_b_98_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_99) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_99);
        /* execute.simd:3257 [D] s_b_99_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_99_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_99_1 = constant u8 1 (const) */
        /* execute.simd:3257 [D] s_b_99_0[s_b_99_1] */
        auto s_b_99_2 = emitter.vector_extract(s_b_99_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3257 [D] s_b_99_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_99_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_99_4 = constant u8 1 (const) */
        /* execute.simd:3257 [D] s_b_99_3[s_b_99_4] */
        auto s_b_99_5 = emitter.vector_extract(s_b_99_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3257 [D] s_b_99_6 = s_b_99_2<<s_b_99_5 */
        auto s_b_99_6 = emitter.shl(s_b_99_2, s_b_99_5);
        /* execute.simd:3257 [D] s_b_99_7 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_99_7 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3257 [D] s_b_99_8 = (u16)s_b_99_6 */
        auto s_b_99_8 = emitter.reinterpret(s_b_99_6, emitter.context().types().u16());
        /* execute.simd:3257 [F] s_b_99_9 = constant s32 1 (const) */
        /* execute.simd:3257 [D] s_b_99_10 = s_b_99_7[s_b_99_9] <= s_b_99_8 */
        auto s_b_99_10 = emitter.vector_insert(s_b_99_7, emitter.const_s32((int32_t)1ULL), s_b_99_8);
        /* execute.simd:3257 [D] s_b_99_11: sym_27247_0_rd = s_b_99_10, dominates: s_b_100_8 s_b_102_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_99_10);
        /* execute.simd:3257 [F] s_b_99_12: Jump b_98 (const) */
        {
          auto block = block_b_98;
          dynamic_block_queue.push(block_b_98);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_100) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_100);
        /* execute.simd:3255 [D] s_b_100_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_100_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_100_1 = constant u8 2 (const) */
        /* execute.simd:3255 [D] s_b_100_0[s_b_100_1] */
        auto s_b_100_2 = emitter.vector_extract(s_b_100_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3255 [D] s_b_100_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_100_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_100_4 = constant u8 2 (const) */
        /* execute.simd:3255 [D] s_b_100_3[s_b_100_4] */
        auto s_b_100_5 = emitter.vector_extract(s_b_100_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3255 [D] s_b_100_6 = -s_b_100_5 */
        auto s_b_100_6 = emitter.neg(s_b_100_5);
        /* execute.simd:3255 [D] s_b_100_7 = s_b_100_2->>s_b_100_6 */
        auto s_b_100_7 = emitter.sar(s_b_100_2, s_b_100_6);
        /* execute.simd:3255 [D] s_b_100_8 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_100_8 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3255 [D] s_b_100_9 = (u16)s_b_100_7 */
        auto s_b_100_9 = emitter.reinterpret(s_b_100_7, emitter.context().types().u16());
        /* execute.simd:3255 [F] s_b_100_10 = constant s32 2 (const) */
        /* execute.simd:3255 [D] s_b_100_11 = s_b_100_8[s_b_100_10] <= s_b_100_9 */
        auto s_b_100_11 = emitter.vector_insert(s_b_100_8, emitter.const_s32((int32_t)2ULL), s_b_100_9);
        /* execute.simd:3255 [D] s_b_100_12: sym_27247_0_rd = s_b_100_11, dominates: s_b_103_8 s_b_105_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_100_11);
        /* execute.simd:3255 [F] s_b_100_13: Jump b_101 (const) */
        {
          auto block = block_b_101;
          dynamic_block_queue.push(block_b_101);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_101) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_101);
        /* execute.simd:3254 [D] s_b_101_0 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_101_0 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_101_1 = constant u8 3 (const) */
        /* execute.simd:3254 [D] s_b_101_0[s_b_101_1] */
        auto s_b_101_2 = emitter.vector_extract(s_b_101_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3254 [F] s_b_101_3 = constant s32 0 (const) */
        /* execute.simd:3254 [D] s_b_101_4 = (s32)s_b_101_2 */
        auto s_b_101_4 = emitter.sx(s_b_101_2, emitter.context().types().s32());
        /* execute.simd:3254 [D] s_b_101_5 = s_b_101_4<s_b_101_3 */
        auto s_b_101_5 = emitter.cmp_lt(s_b_101_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3254 [D] s_b_101_6: If s_b_101_5: Jump b_103 else b_105 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_103;
            dynamic_block_queue.push(block_b_103);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_105;
            dynamic_block_queue.push(block_b_105);
            false_target = block;
          }
          emitter.branch(s_b_101_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_102) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_102);
        /* execute.simd:3257 [D] s_b_102_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_102_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_102_1 = constant u8 2 (const) */
        /* execute.simd:3257 [D] s_b_102_0[s_b_102_1] */
        auto s_b_102_2 = emitter.vector_extract(s_b_102_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3257 [D] s_b_102_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_102_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_102_4 = constant u8 2 (const) */
        /* execute.simd:3257 [D] s_b_102_3[s_b_102_4] */
        auto s_b_102_5 = emitter.vector_extract(s_b_102_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3257 [D] s_b_102_6 = s_b_102_2<<s_b_102_5 */
        auto s_b_102_6 = emitter.shl(s_b_102_2, s_b_102_5);
        /* execute.simd:3257 [D] s_b_102_7 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_102_7 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3257 [D] s_b_102_8 = (u16)s_b_102_6 */
        auto s_b_102_8 = emitter.reinterpret(s_b_102_6, emitter.context().types().u16());
        /* execute.simd:3257 [F] s_b_102_9 = constant s32 2 (const) */
        /* execute.simd:3257 [D] s_b_102_10 = s_b_102_7[s_b_102_9] <= s_b_102_8 */
        auto s_b_102_10 = emitter.vector_insert(s_b_102_7, emitter.const_s32((int32_t)2ULL), s_b_102_8);
        /* execute.simd:3257 [D] s_b_102_11: sym_27247_0_rd = s_b_102_10, dominates: s_b_103_8 s_b_105_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_102_10);
        /* execute.simd:3257 [F] s_b_102_12: Jump b_101 (const) */
        {
          auto block = block_b_101;
          dynamic_block_queue.push(block_b_101);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_103) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_103);
        /* execute.simd:3255 [D] s_b_103_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_103_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_103_1 = constant u8 3 (const) */
        /* execute.simd:3255 [D] s_b_103_0[s_b_103_1] */
        auto s_b_103_2 = emitter.vector_extract(s_b_103_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3255 [D] s_b_103_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_103_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_103_4 = constant u8 3 (const) */
        /* execute.simd:3255 [D] s_b_103_3[s_b_103_4] */
        auto s_b_103_5 = emitter.vector_extract(s_b_103_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3255 [D] s_b_103_6 = -s_b_103_5 */
        auto s_b_103_6 = emitter.neg(s_b_103_5);
        /* execute.simd:3255 [D] s_b_103_7 = s_b_103_2->>s_b_103_6 */
        auto s_b_103_7 = emitter.sar(s_b_103_2, s_b_103_6);
        /* execute.simd:3255 [D] s_b_103_8 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_103_8 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3255 [D] s_b_103_9 = (u16)s_b_103_7 */
        auto s_b_103_9 = emitter.reinterpret(s_b_103_7, emitter.context().types().u16());
        /* execute.simd:3255 [F] s_b_103_10 = constant s32 3 (const) */
        /* execute.simd:3255 [D] s_b_103_11 = s_b_103_8[s_b_103_10] <= s_b_103_9 */
        auto s_b_103_11 = emitter.vector_insert(s_b_103_8, emitter.const_s32((int32_t)3ULL), s_b_103_9);
        /* execute.simd:3255 [D] s_b_103_12: sym_27247_0_rd = s_b_103_11, dominates: s_b_106_8 s_b_108_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_103_11);
        /* execute.simd:3255 [F] s_b_103_13: Jump b_104 (const) */
        {
          auto block = block_b_104;
          dynamic_block_queue.push(block_b_104);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_104) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_104);
        /* execute.simd:3254 [D] s_b_104_0 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_104_0 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_104_1 = constant u8 4 (const) */
        /* execute.simd:3254 [D] s_b_104_0[s_b_104_1] */
        auto s_b_104_2 = emitter.vector_extract(s_b_104_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3254 [F] s_b_104_3 = constant s32 0 (const) */
        /* execute.simd:3254 [D] s_b_104_4 = (s32)s_b_104_2 */
        auto s_b_104_4 = emitter.sx(s_b_104_2, emitter.context().types().s32());
        /* execute.simd:3254 [D] s_b_104_5 = s_b_104_4<s_b_104_3 */
        auto s_b_104_5 = emitter.cmp_lt(s_b_104_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3254 [D] s_b_104_6: If s_b_104_5: Jump b_106 else b_108 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_106;
            dynamic_block_queue.push(block_b_106);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_108;
            dynamic_block_queue.push(block_b_108);
            false_target = block;
          }
          emitter.branch(s_b_104_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_105) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_105);
        /* execute.simd:3257 [D] s_b_105_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_105_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_105_1 = constant u8 3 (const) */
        /* execute.simd:3257 [D] s_b_105_0[s_b_105_1] */
        auto s_b_105_2 = emitter.vector_extract(s_b_105_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3257 [D] s_b_105_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_105_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_105_4 = constant u8 3 (const) */
        /* execute.simd:3257 [D] s_b_105_3[s_b_105_4] */
        auto s_b_105_5 = emitter.vector_extract(s_b_105_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3257 [D] s_b_105_6 = s_b_105_2<<s_b_105_5 */
        auto s_b_105_6 = emitter.shl(s_b_105_2, s_b_105_5);
        /* execute.simd:3257 [D] s_b_105_7 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_105_7 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3257 [D] s_b_105_8 = (u16)s_b_105_6 */
        auto s_b_105_8 = emitter.reinterpret(s_b_105_6, emitter.context().types().u16());
        /* execute.simd:3257 [F] s_b_105_9 = constant s32 3 (const) */
        /* execute.simd:3257 [D] s_b_105_10 = s_b_105_7[s_b_105_9] <= s_b_105_8 */
        auto s_b_105_10 = emitter.vector_insert(s_b_105_7, emitter.const_s32((int32_t)3ULL), s_b_105_8);
        /* execute.simd:3257 [D] s_b_105_11: sym_27247_0_rd = s_b_105_10, dominates: s_b_106_8 s_b_108_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_105_10);
        /* execute.simd:3257 [F] s_b_105_12: Jump b_104 (const) */
        {
          auto block = block_b_104;
          dynamic_block_queue.push(block_b_104);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_106) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_106);
        /* execute.simd:3255 [D] s_b_106_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_106_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_106_1 = constant u8 4 (const) */
        /* execute.simd:3255 [D] s_b_106_0[s_b_106_1] */
        auto s_b_106_2 = emitter.vector_extract(s_b_106_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3255 [D] s_b_106_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_106_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_106_4 = constant u8 4 (const) */
        /* execute.simd:3255 [D] s_b_106_3[s_b_106_4] */
        auto s_b_106_5 = emitter.vector_extract(s_b_106_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3255 [D] s_b_106_6 = -s_b_106_5 */
        auto s_b_106_6 = emitter.neg(s_b_106_5);
        /* execute.simd:3255 [D] s_b_106_7 = s_b_106_2->>s_b_106_6 */
        auto s_b_106_7 = emitter.sar(s_b_106_2, s_b_106_6);
        /* execute.simd:3255 [D] s_b_106_8 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_106_8 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3255 [D] s_b_106_9 = (u16)s_b_106_7 */
        auto s_b_106_9 = emitter.reinterpret(s_b_106_7, emitter.context().types().u16());
        /* execute.simd:3255 [F] s_b_106_10 = constant s32 4 (const) */
        /* execute.simd:3255 [D] s_b_106_11 = s_b_106_8[s_b_106_10] <= s_b_106_9 */
        auto s_b_106_11 = emitter.vector_insert(s_b_106_8, emitter.const_s32((int32_t)4ULL), s_b_106_9);
        /* execute.simd:3255 [D] s_b_106_12: sym_27247_0_rd = s_b_106_11, dominates: s_b_109_8 s_b_111_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_106_11);
        /* execute.simd:3255 [F] s_b_106_13: Jump b_107 (const) */
        {
          auto block = block_b_107;
          dynamic_block_queue.push(block_b_107);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_107) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_107);
        /* execute.simd:3254 [D] s_b_107_0 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_107_0 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_107_1 = constant u8 5 (const) */
        /* execute.simd:3254 [D] s_b_107_0[s_b_107_1] */
        auto s_b_107_2 = emitter.vector_extract(s_b_107_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3254 [F] s_b_107_3 = constant s32 0 (const) */
        /* execute.simd:3254 [D] s_b_107_4 = (s32)s_b_107_2 */
        auto s_b_107_4 = emitter.sx(s_b_107_2, emitter.context().types().s32());
        /* execute.simd:3254 [D] s_b_107_5 = s_b_107_4<s_b_107_3 */
        auto s_b_107_5 = emitter.cmp_lt(s_b_107_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3254 [D] s_b_107_6: If s_b_107_5: Jump b_109 else b_111 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_109;
            dynamic_block_queue.push(block_b_109);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_111;
            dynamic_block_queue.push(block_b_111);
            false_target = block;
          }
          emitter.branch(s_b_107_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_108) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_108);
        /* execute.simd:3257 [D] s_b_108_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_108_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_108_1 = constant u8 4 (const) */
        /* execute.simd:3257 [D] s_b_108_0[s_b_108_1] */
        auto s_b_108_2 = emitter.vector_extract(s_b_108_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3257 [D] s_b_108_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_108_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_108_4 = constant u8 4 (const) */
        /* execute.simd:3257 [D] s_b_108_3[s_b_108_4] */
        auto s_b_108_5 = emitter.vector_extract(s_b_108_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3257 [D] s_b_108_6 = s_b_108_2<<s_b_108_5 */
        auto s_b_108_6 = emitter.shl(s_b_108_2, s_b_108_5);
        /* execute.simd:3257 [D] s_b_108_7 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_108_7 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3257 [D] s_b_108_8 = (u16)s_b_108_6 */
        auto s_b_108_8 = emitter.reinterpret(s_b_108_6, emitter.context().types().u16());
        /* execute.simd:3257 [F] s_b_108_9 = constant s32 4 (const) */
        /* execute.simd:3257 [D] s_b_108_10 = s_b_108_7[s_b_108_9] <= s_b_108_8 */
        auto s_b_108_10 = emitter.vector_insert(s_b_108_7, emitter.const_s32((int32_t)4ULL), s_b_108_8);
        /* execute.simd:3257 [D] s_b_108_11: sym_27247_0_rd = s_b_108_10, dominates: s_b_109_8 s_b_111_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_108_10);
        /* execute.simd:3257 [F] s_b_108_12: Jump b_107 (const) */
        {
          auto block = block_b_107;
          dynamic_block_queue.push(block_b_107);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_109) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_109);
        /* execute.simd:3255 [D] s_b_109_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_109_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_109_1 = constant u8 5 (const) */
        /* execute.simd:3255 [D] s_b_109_0[s_b_109_1] */
        auto s_b_109_2 = emitter.vector_extract(s_b_109_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3255 [D] s_b_109_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_109_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_109_4 = constant u8 5 (const) */
        /* execute.simd:3255 [D] s_b_109_3[s_b_109_4] */
        auto s_b_109_5 = emitter.vector_extract(s_b_109_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3255 [D] s_b_109_6 = -s_b_109_5 */
        auto s_b_109_6 = emitter.neg(s_b_109_5);
        /* execute.simd:3255 [D] s_b_109_7 = s_b_109_2->>s_b_109_6 */
        auto s_b_109_7 = emitter.sar(s_b_109_2, s_b_109_6);
        /* execute.simd:3255 [D] s_b_109_8 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_109_8 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3255 [D] s_b_109_9 = (u16)s_b_109_7 */
        auto s_b_109_9 = emitter.reinterpret(s_b_109_7, emitter.context().types().u16());
        /* execute.simd:3255 [F] s_b_109_10 = constant s32 5 (const) */
        /* execute.simd:3255 [D] s_b_109_11 = s_b_109_8[s_b_109_10] <= s_b_109_9 */
        auto s_b_109_11 = emitter.vector_insert(s_b_109_8, emitter.const_s32((int32_t)5ULL), s_b_109_9);
        /* execute.simd:3255 [D] s_b_109_12: sym_27247_0_rd = s_b_109_11, dominates: s_b_112_8 s_b_114_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_109_11);
        /* execute.simd:3255 [F] s_b_109_13: Jump b_110 (const) */
        {
          auto block = block_b_110;
          dynamic_block_queue.push(block_b_110);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_110) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_110);
        /* execute.simd:3254 [D] s_b_110_0 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_110_0 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_110_1 = constant u8 6 (const) */
        /* execute.simd:3254 [D] s_b_110_0[s_b_110_1] */
        auto s_b_110_2 = emitter.vector_extract(s_b_110_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3254 [F] s_b_110_3 = constant s32 0 (const) */
        /* execute.simd:3254 [D] s_b_110_4 = (s32)s_b_110_2 */
        auto s_b_110_4 = emitter.sx(s_b_110_2, emitter.context().types().s32());
        /* execute.simd:3254 [D] s_b_110_5 = s_b_110_4<s_b_110_3 */
        auto s_b_110_5 = emitter.cmp_lt(s_b_110_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3254 [D] s_b_110_6: If s_b_110_5: Jump b_112 else b_114 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_112;
            dynamic_block_queue.push(block_b_112);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_114;
            dynamic_block_queue.push(block_b_114);
            false_target = block;
          }
          emitter.branch(s_b_110_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_111) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_111);
        /* execute.simd:3257 [D] s_b_111_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_111_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_111_1 = constant u8 5 (const) */
        /* execute.simd:3257 [D] s_b_111_0[s_b_111_1] */
        auto s_b_111_2 = emitter.vector_extract(s_b_111_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3257 [D] s_b_111_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_111_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_111_4 = constant u8 5 (const) */
        /* execute.simd:3257 [D] s_b_111_3[s_b_111_4] */
        auto s_b_111_5 = emitter.vector_extract(s_b_111_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3257 [D] s_b_111_6 = s_b_111_2<<s_b_111_5 */
        auto s_b_111_6 = emitter.shl(s_b_111_2, s_b_111_5);
        /* execute.simd:3257 [D] s_b_111_7 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_111_7 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3257 [D] s_b_111_8 = (u16)s_b_111_6 */
        auto s_b_111_8 = emitter.reinterpret(s_b_111_6, emitter.context().types().u16());
        /* execute.simd:3257 [F] s_b_111_9 = constant s32 5 (const) */
        /* execute.simd:3257 [D] s_b_111_10 = s_b_111_7[s_b_111_9] <= s_b_111_8 */
        auto s_b_111_10 = emitter.vector_insert(s_b_111_7, emitter.const_s32((int32_t)5ULL), s_b_111_8);
        /* execute.simd:3257 [D] s_b_111_11: sym_27247_0_rd = s_b_111_10, dominates: s_b_112_8 s_b_114_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_111_10);
        /* execute.simd:3257 [F] s_b_111_12: Jump b_110 (const) */
        {
          auto block = block_b_110;
          dynamic_block_queue.push(block_b_110);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_112) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_112);
        /* execute.simd:3255 [D] s_b_112_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_112_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_112_1 = constant u8 6 (const) */
        /* execute.simd:3255 [D] s_b_112_0[s_b_112_1] */
        auto s_b_112_2 = emitter.vector_extract(s_b_112_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3255 [D] s_b_112_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_112_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_112_4 = constant u8 6 (const) */
        /* execute.simd:3255 [D] s_b_112_3[s_b_112_4] */
        auto s_b_112_5 = emitter.vector_extract(s_b_112_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3255 [D] s_b_112_6 = -s_b_112_5 */
        auto s_b_112_6 = emitter.neg(s_b_112_5);
        /* execute.simd:3255 [D] s_b_112_7 = s_b_112_2->>s_b_112_6 */
        auto s_b_112_7 = emitter.sar(s_b_112_2, s_b_112_6);
        /* execute.simd:3255 [D] s_b_112_8 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_112_8 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3255 [D] s_b_112_9 = (u16)s_b_112_7 */
        auto s_b_112_9 = emitter.reinterpret(s_b_112_7, emitter.context().types().u16());
        /* execute.simd:3255 [F] s_b_112_10 = constant s32 6 (const) */
        /* execute.simd:3255 [D] s_b_112_11 = s_b_112_8[s_b_112_10] <= s_b_112_9 */
        auto s_b_112_11 = emitter.vector_insert(s_b_112_8, emitter.const_s32((int32_t)6ULL), s_b_112_9);
        /* execute.simd:3255 [D] s_b_112_12: sym_27247_0_rd = s_b_112_11, dominates: s_b_115_8 s_b_117_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_112_11);
        /* execute.simd:3255 [F] s_b_112_13: Jump b_113 (const) */
        {
          auto block = block_b_113;
          dynamic_block_queue.push(block_b_113);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_113) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_113);
        /* execute.simd:3254 [D] s_b_113_0 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_113_0 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_113_1 = constant u8 7 (const) */
        /* execute.simd:3254 [D] s_b_113_0[s_b_113_1] */
        auto s_b_113_2 = emitter.vector_extract(s_b_113_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3254 [F] s_b_113_3 = constant s32 0 (const) */
        /* execute.simd:3254 [D] s_b_113_4 = (s32)s_b_113_2 */
        auto s_b_113_4 = emitter.sx(s_b_113_2, emitter.context().types().s32());
        /* execute.simd:3254 [D] s_b_113_5 = s_b_113_4<s_b_113_3 */
        auto s_b_113_5 = emitter.cmp_lt(s_b_113_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3254 [D] s_b_113_6: If s_b_113_5: Jump b_115 else b_117 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_115;
            dynamic_block_queue.push(block_b_115);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_117;
            dynamic_block_queue.push(block_b_117);
            false_target = block;
          }
          emitter.branch(s_b_113_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_114) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_114);
        /* execute.simd:3257 [D] s_b_114_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_114_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_114_1 = constant u8 6 (const) */
        /* execute.simd:3257 [D] s_b_114_0[s_b_114_1] */
        auto s_b_114_2 = emitter.vector_extract(s_b_114_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3257 [D] s_b_114_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_114_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_114_4 = constant u8 6 (const) */
        /* execute.simd:3257 [D] s_b_114_3[s_b_114_4] */
        auto s_b_114_5 = emitter.vector_extract(s_b_114_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3257 [D] s_b_114_6 = s_b_114_2<<s_b_114_5 */
        auto s_b_114_6 = emitter.shl(s_b_114_2, s_b_114_5);
        /* execute.simd:3257 [D] s_b_114_7 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_114_7 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3257 [D] s_b_114_8 = (u16)s_b_114_6 */
        auto s_b_114_8 = emitter.reinterpret(s_b_114_6, emitter.context().types().u16());
        /* execute.simd:3257 [F] s_b_114_9 = constant s32 6 (const) */
        /* execute.simd:3257 [D] s_b_114_10 = s_b_114_7[s_b_114_9] <= s_b_114_8 */
        auto s_b_114_10 = emitter.vector_insert(s_b_114_7, emitter.const_s32((int32_t)6ULL), s_b_114_8);
        /* execute.simd:3257 [D] s_b_114_11: sym_27247_0_rd = s_b_114_10, dominates: s_b_115_8 s_b_117_7  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_114_10);
        /* execute.simd:3257 [F] s_b_114_12: Jump b_113 (const) */
        {
          auto block = block_b_113;
          dynamic_block_queue.push(block_b_113);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_115) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_115);
        /* execute.simd:3255 [D] s_b_115_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_115_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_115_1 = constant u8 7 (const) */
        /* execute.simd:3255 [D] s_b_115_0[s_b_115_1] */
        auto s_b_115_2 = emitter.vector_extract(s_b_115_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3255 [D] s_b_115_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_115_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_115_4 = constant u8 7 (const) */
        /* execute.simd:3255 [D] s_b_115_3[s_b_115_4] */
        auto s_b_115_5 = emitter.vector_extract(s_b_115_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3255 [D] s_b_115_6 = -s_b_115_5 */
        auto s_b_115_6 = emitter.neg(s_b_115_5);
        /* execute.simd:3255 [D] s_b_115_7 = s_b_115_2->>s_b_115_6 */
        auto s_b_115_7 = emitter.sar(s_b_115_2, s_b_115_6);
        /* execute.simd:3255 [D] s_b_115_8 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_115_8 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3255 [D] s_b_115_9 = (u16)s_b_115_7 */
        auto s_b_115_9 = emitter.reinterpret(s_b_115_7, emitter.context().types().u16());
        /* execute.simd:3255 [F] s_b_115_10 = constant s32 7 (const) */
        /* execute.simd:3255 [D] s_b_115_11 = s_b_115_8[s_b_115_10] <= s_b_115_9 */
        auto s_b_115_11 = emitter.vector_insert(s_b_115_8, emitter.const_s32((int32_t)7ULL), s_b_115_9);
        /* execute.simd:3255 [D] s_b_115_12: sym_27247_0_rd = s_b_115_11, dominates: s_b_116_1  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_115_11);
        /* execute.simd:3255 [F] s_b_115_13: Jump b_116 (const) */
        {
          auto block = block_b_116;
          dynamic_block_queue.push(block_b_116);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_116) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_116);
        /* execute.simd:3261 [F] s_b_116_0=sym_25777_3_parameter_inst.rd (const) */
        /* execute.simd:3261 [D] s_b_116_1 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_116_1 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3261 [D] s_b_116_2: WriteRegBank 18:s_b_116_0 = s_b_116_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_116_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_116_1);
        /* execute.simd:0 [F] s_b_116_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_117) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_117);
        /* execute.simd:3257 [D] s_b_117_0 = sym_27237_0_rn wutils::Vector<int16_t, 8> */
        auto s_b_117_0 = emitter.load_local(DV_sym_27237_0_rn, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_117_1 = constant u8 7 (const) */
        /* execute.simd:3257 [D] s_b_117_0[s_b_117_1] */
        auto s_b_117_2 = emitter.vector_extract(s_b_117_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3257 [D] s_b_117_3 = sym_27242_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_117_3 = emitter.load_local(DV_sym_27242_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_117_4 = constant u8 7 (const) */
        /* execute.simd:3257 [D] s_b_117_3[s_b_117_4] */
        auto s_b_117_5 = emitter.vector_extract(s_b_117_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3257 [D] s_b_117_6 = s_b_117_2<<s_b_117_5 */
        auto s_b_117_6 = emitter.shl(s_b_117_2, s_b_117_5);
        /* execute.simd:3257 [D] s_b_117_7 = sym_27247_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_117_7 = emitter.load_local(DV_sym_27247_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3257 [D] s_b_117_8 = (u16)s_b_117_6 */
        auto s_b_117_8 = emitter.reinterpret(s_b_117_6, emitter.context().types().u16());
        /* execute.simd:3257 [F] s_b_117_9 = constant s32 7 (const) */
        /* execute.simd:3257 [D] s_b_117_10 = s_b_117_7[s_b_117_9] <= s_b_117_8 */
        auto s_b_117_10 = emitter.vector_insert(s_b_117_7, emitter.const_s32((int32_t)7ULL), s_b_117_8);
        /* execute.simd:3257 [D] s_b_117_11: sym_27247_0_rd = s_b_117_10, dominates: s_b_116_1  */
        emitter.store_local(DV_sym_27247_0_rd, s_b_117_10);
        /* execute.simd:3257 [F] s_b_117_12: Jump b_116 (const) */
        {
          auto block = block_b_116;
          dynamic_block_queue.push(block_b_116);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_119) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_119);
        /* execute.simd:3271 [D] s_b_119_0 = sym_27644_0_rn wutils::Vector<int32_t, 2> */
        auto s_b_119_0 = emitter.load_local(DV_sym_27644_0_rn, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_119_1 = constant u8 0 (const) */
        /* execute.simd:3271 [D] s_b_119_0[s_b_119_1] */
        auto s_b_119_2 = emitter.vector_extract(s_b_119_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3271 [D] s_b_119_3 = sym_27649_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_119_3 = emitter.load_local(DV_sym_27649_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_119_4 = constant u8 0 (const) */
        /* execute.simd:3271 [D] s_b_119_3[s_b_119_4] */
        auto s_b_119_5 = emitter.vector_extract(s_b_119_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3271 [D] s_b_119_6 = -s_b_119_5 */
        auto s_b_119_6 = emitter.neg(s_b_119_5);
        /* execute.simd:3271 [D] s_b_119_7 = s_b_119_2->>s_b_119_6 */
        auto s_b_119_7 = emitter.sar(s_b_119_2, s_b_119_6);
        /* execute.simd:3271 [F] s_b_119_8 = sym_27654_0_rd (const) wutils::Vector<uint32_t, 4> */
        wutils::Vector<uint32_t, 4> s_b_119_8 = CV_sym_27654_0_rd;
        /* execute.simd:3271 [D] s_b_119_9 = (u32)s_b_119_7 */
        auto s_b_119_9 = emitter.reinterpret(s_b_119_7, emitter.context().types().u32());
        /* execute.simd:3271 [F] s_b_119_10 = constant s32 0 (const) */
        /* execute.simd:3271 [D] s_b_119_11 = s_b_119_8[s_b_119_10] <= s_b_119_9 */
        auto s_b_119_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_119_8[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_119_9);
        /* execute.simd:3271 [D] s_b_119_12: sym_27654_0_rd = s_b_119_11, dominates: s_b_122_8 s_b_124_7  */
        emitter.store_local(DV_sym_27654_0_rd, s_b_119_11);
        /* execute.simd:3271 [F] s_b_119_13: Jump b_120 (const) */
        {
          auto block = block_b_120;
          dynamic_block_queue.push(block_b_120);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_120) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_120);
        /* execute.simd:3270 [D] s_b_120_0 = sym_27649_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_120_0 = emitter.load_local(DV_sym_27649_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_120_1 = constant u8 1 (const) */
        /* execute.simd:3270 [D] s_b_120_0[s_b_120_1] */
        auto s_b_120_2 = emitter.vector_extract(s_b_120_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3270 [F] s_b_120_3 = constant s32 0 (const) */
        /* execute.simd:3270 [D] s_b_120_4 = s_b_120_2<s_b_120_3 */
        auto s_b_120_4 = emitter.cmp_lt(s_b_120_2, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3270 [D] s_b_120_5: If s_b_120_4: Jump b_122 else b_124 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_122;
            dynamic_block_queue.push(block_b_122);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_124;
            dynamic_block_queue.push(block_b_124);
            false_target = block;
          }
          emitter.branch(s_b_120_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_121) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_121);
        /* execute.simd:3273 [D] s_b_121_0 = sym_27644_0_rn wutils::Vector<int32_t, 2> */
        auto s_b_121_0 = emitter.load_local(DV_sym_27644_0_rn, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_121_1 = constant u8 0 (const) */
        /* execute.simd:3273 [D] s_b_121_0[s_b_121_1] */
        auto s_b_121_2 = emitter.vector_extract(s_b_121_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3273 [D] s_b_121_3 = sym_27649_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_121_3 = emitter.load_local(DV_sym_27649_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_121_4 = constant u8 0 (const) */
        /* execute.simd:3273 [D] s_b_121_3[s_b_121_4] */
        auto s_b_121_5 = emitter.vector_extract(s_b_121_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3273 [D] s_b_121_6 = s_b_121_2<<s_b_121_5 */
        auto s_b_121_6 = emitter.shl(s_b_121_2, s_b_121_5);
        /* execute.simd:3273 [F] s_b_121_7 = sym_27654_0_rd (const) wutils::Vector<uint32_t, 4> */
        wutils::Vector<uint32_t, 4> s_b_121_7 = CV_sym_27654_0_rd;
        /* execute.simd:3273 [D] s_b_121_8 = (u32)s_b_121_6 */
        auto s_b_121_8 = emitter.reinterpret(s_b_121_6, emitter.context().types().u32());
        /* execute.simd:3273 [F] s_b_121_9 = constant s32 0 (const) */
        /* execute.simd:3273 [D] s_b_121_10 = s_b_121_7[s_b_121_9] <= s_b_121_8 */
        auto s_b_121_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_121_7[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_121_8);
        /* execute.simd:3273 [D] s_b_121_11: sym_27654_0_rd = s_b_121_10, dominates: s_b_122_8 s_b_124_7  */
        emitter.store_local(DV_sym_27654_0_rd, s_b_121_10);
        /* execute.simd:3273 [F] s_b_121_12: Jump b_120 (const) */
        {
          auto block = block_b_120;
          dynamic_block_queue.push(block_b_120);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_122) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_122);
        /* execute.simd:3271 [D] s_b_122_0 = sym_27644_0_rn wutils::Vector<int32_t, 2> */
        auto s_b_122_0 = emitter.load_local(DV_sym_27644_0_rn, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_122_1 = constant u8 1 (const) */
        /* execute.simd:3271 [D] s_b_122_0[s_b_122_1] */
        auto s_b_122_2 = emitter.vector_extract(s_b_122_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3271 [D] s_b_122_3 = sym_27649_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_122_3 = emitter.load_local(DV_sym_27649_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_122_4 = constant u8 1 (const) */
        /* execute.simd:3271 [D] s_b_122_3[s_b_122_4] */
        auto s_b_122_5 = emitter.vector_extract(s_b_122_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3271 [D] s_b_122_6 = -s_b_122_5 */
        auto s_b_122_6 = emitter.neg(s_b_122_5);
        /* execute.simd:3271 [D] s_b_122_7 = s_b_122_2->>s_b_122_6 */
        auto s_b_122_7 = emitter.sar(s_b_122_2, s_b_122_6);
        /* execute.simd:3271 [D] s_b_122_8 = sym_27654_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_122_8 = emitter.load_local(DV_sym_27654_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3271 [D] s_b_122_9 = (u32)s_b_122_7 */
        auto s_b_122_9 = emitter.reinterpret(s_b_122_7, emitter.context().types().u32());
        /* execute.simd:3271 [F] s_b_122_10 = constant s32 1 (const) */
        /* execute.simd:3271 [D] s_b_122_11 = s_b_122_8[s_b_122_10] <= s_b_122_9 */
        auto s_b_122_11 = emitter.vector_insert(s_b_122_8, emitter.const_s32((int32_t)1ULL), s_b_122_9);
        /* execute.simd:3271 [D] s_b_122_12: sym_27654_0_rd = s_b_122_11, dominates: s_b_123_1  */
        emitter.store_local(DV_sym_27654_0_rd, s_b_122_11);
        /* execute.simd:3271 [F] s_b_122_13: Jump b_123 (const) */
        {
          auto block = block_b_123;
          dynamic_block_queue.push(block_b_123);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_123) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_123);
        /* execute.simd:3277 [F] s_b_123_0=sym_25777_3_parameter_inst.rd (const) */
        /* execute.simd:3277 [D] s_b_123_1 = sym_27654_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_123_1 = emitter.load_local(DV_sym_27654_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3277 [D] s_b_123_2: WriteRegBank 20:s_b_123_0 = s_b_123_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_123_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_123_1);
        /* execute.simd:0 [F] s_b_123_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_124) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_124);
        /* execute.simd:3273 [D] s_b_124_0 = sym_27644_0_rn wutils::Vector<int32_t, 2> */
        auto s_b_124_0 = emitter.load_local(DV_sym_27644_0_rn, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_124_1 = constant u8 1 (const) */
        /* execute.simd:3273 [D] s_b_124_0[s_b_124_1] */
        auto s_b_124_2 = emitter.vector_extract(s_b_124_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3273 [D] s_b_124_3 = sym_27649_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_124_3 = emitter.load_local(DV_sym_27649_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_124_4 = constant u8 1 (const) */
        /* execute.simd:3273 [D] s_b_124_3[s_b_124_4] */
        auto s_b_124_5 = emitter.vector_extract(s_b_124_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3273 [D] s_b_124_6 = s_b_124_2<<s_b_124_5 */
        auto s_b_124_6 = emitter.shl(s_b_124_2, s_b_124_5);
        /* execute.simd:3273 [D] s_b_124_7 = sym_27654_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_124_7 = emitter.load_local(DV_sym_27654_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3273 [D] s_b_124_8 = (u32)s_b_124_6 */
        auto s_b_124_8 = emitter.reinterpret(s_b_124_6, emitter.context().types().u32());
        /* execute.simd:3273 [F] s_b_124_9 = constant s32 1 (const) */
        /* execute.simd:3273 [D] s_b_124_10 = s_b_124_7[s_b_124_9] <= s_b_124_8 */
        auto s_b_124_10 = emitter.vector_insert(s_b_124_7, emitter.const_s32((int32_t)1ULL), s_b_124_8);
        /* execute.simd:3273 [D] s_b_124_11: sym_27654_0_rd = s_b_124_10, dominates: s_b_123_1  */
        emitter.store_local(DV_sym_27654_0_rd, s_b_124_10);
        /* execute.simd:3273 [F] s_b_124_12: Jump b_123 (const) */
        {
          auto block = block_b_123;
          dynamic_block_queue.push(block_b_123);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_126) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_126);
        /* execute.simd:3287 [D] s_b_126_0 = sym_27761_0_rn wutils::Vector<int32_t, 4> */
        auto s_b_126_0 = emitter.load_local(DV_sym_27761_0_rn, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_126_1 = constant u8 0 (const) */
        /* execute.simd:3287 [D] s_b_126_0[s_b_126_1] */
        auto s_b_126_2 = emitter.vector_extract(s_b_126_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3287 [D] s_b_126_3 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_126_3 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_126_4 = constant u8 0 (const) */
        /* execute.simd:3287 [D] s_b_126_3[s_b_126_4] */
        auto s_b_126_5 = emitter.vector_extract(s_b_126_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3287 [D] s_b_126_6 = -s_b_126_5 */
        auto s_b_126_6 = emitter.neg(s_b_126_5);
        /* execute.simd:3287 [D] s_b_126_7 = s_b_126_2->>s_b_126_6 */
        auto s_b_126_7 = emitter.sar(s_b_126_2, s_b_126_6);
        /* execute.simd:3287 [F] s_b_126_8 = sym_27771_0_rd (const) wutils::Vector<uint32_t, 4> */
        wutils::Vector<uint32_t, 4> s_b_126_8 = CV_sym_27771_0_rd;
        /* execute.simd:3287 [D] s_b_126_9 = (u32)s_b_126_7 */
        auto s_b_126_9 = emitter.reinterpret(s_b_126_7, emitter.context().types().u32());
        /* execute.simd:3287 [F] s_b_126_10 = constant s32 0 (const) */
        /* execute.simd:3287 [D] s_b_126_11 = s_b_126_8[s_b_126_10] <= s_b_126_9 */
        auto s_b_126_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_126_8[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_126_9);
        /* execute.simd:3287 [D] s_b_126_12: sym_27771_0_rd = s_b_126_11, dominates: s_b_129_8 s_b_131_7  */
        emitter.store_local(DV_sym_27771_0_rd, s_b_126_11);
        /* execute.simd:3287 [F] s_b_126_13: Jump b_127 (const) */
        {
          auto block = block_b_127;
          dynamic_block_queue.push(block_b_127);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_127) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_127);
        /* execute.simd:3286 [D] s_b_127_0 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_127_0 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_127_1 = constant u8 1 (const) */
        /* execute.simd:3286 [D] s_b_127_0[s_b_127_1] */
        auto s_b_127_2 = emitter.vector_extract(s_b_127_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3286 [F] s_b_127_3 = constant s32 0 (const) */
        /* execute.simd:3286 [D] s_b_127_4 = s_b_127_2<s_b_127_3 */
        auto s_b_127_4 = emitter.cmp_lt(s_b_127_2, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3286 [D] s_b_127_5: If s_b_127_4: Jump b_129 else b_131 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_129;
            dynamic_block_queue.push(block_b_129);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_131;
            dynamic_block_queue.push(block_b_131);
            false_target = block;
          }
          emitter.branch(s_b_127_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_128) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_128);
        /* execute.simd:3289 [D] s_b_128_0 = sym_27761_0_rn wutils::Vector<int32_t, 4> */
        auto s_b_128_0 = emitter.load_local(DV_sym_27761_0_rn, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_128_1 = constant u8 0 (const) */
        /* execute.simd:3289 [D] s_b_128_0[s_b_128_1] */
        auto s_b_128_2 = emitter.vector_extract(s_b_128_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3289 [D] s_b_128_3 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_128_3 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_128_4 = constant u8 0 (const) */
        /* execute.simd:3289 [D] s_b_128_3[s_b_128_4] */
        auto s_b_128_5 = emitter.vector_extract(s_b_128_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3289 [D] s_b_128_6 = s_b_128_2<<s_b_128_5 */
        auto s_b_128_6 = emitter.shl(s_b_128_2, s_b_128_5);
        /* execute.simd:3289 [F] s_b_128_7 = sym_27771_0_rd (const) wutils::Vector<uint32_t, 4> */
        wutils::Vector<uint32_t, 4> s_b_128_7 = CV_sym_27771_0_rd;
        /* execute.simd:3289 [D] s_b_128_8 = (u32)s_b_128_6 */
        auto s_b_128_8 = emitter.reinterpret(s_b_128_6, emitter.context().types().u32());
        /* execute.simd:3289 [F] s_b_128_9 = constant s32 0 (const) */
        /* execute.simd:3289 [D] s_b_128_10 = s_b_128_7[s_b_128_9] <= s_b_128_8 */
        auto s_b_128_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_128_7[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_128_8);
        /* execute.simd:3289 [D] s_b_128_11: sym_27771_0_rd = s_b_128_10, dominates: s_b_129_8 s_b_131_7  */
        emitter.store_local(DV_sym_27771_0_rd, s_b_128_10);
        /* execute.simd:3289 [F] s_b_128_12: Jump b_127 (const) */
        {
          auto block = block_b_127;
          dynamic_block_queue.push(block_b_127);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_129) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_129);
        /* execute.simd:3287 [D] s_b_129_0 = sym_27761_0_rn wutils::Vector<int32_t, 4> */
        auto s_b_129_0 = emitter.load_local(DV_sym_27761_0_rn, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_129_1 = constant u8 1 (const) */
        /* execute.simd:3287 [D] s_b_129_0[s_b_129_1] */
        auto s_b_129_2 = emitter.vector_extract(s_b_129_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3287 [D] s_b_129_3 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_129_3 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_129_4 = constant u8 1 (const) */
        /* execute.simd:3287 [D] s_b_129_3[s_b_129_4] */
        auto s_b_129_5 = emitter.vector_extract(s_b_129_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3287 [D] s_b_129_6 = -s_b_129_5 */
        auto s_b_129_6 = emitter.neg(s_b_129_5);
        /* execute.simd:3287 [D] s_b_129_7 = s_b_129_2->>s_b_129_6 */
        auto s_b_129_7 = emitter.sar(s_b_129_2, s_b_129_6);
        /* execute.simd:3287 [D] s_b_129_8 = sym_27771_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_129_8 = emitter.load_local(DV_sym_27771_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3287 [D] s_b_129_9 = (u32)s_b_129_7 */
        auto s_b_129_9 = emitter.reinterpret(s_b_129_7, emitter.context().types().u32());
        /* execute.simd:3287 [F] s_b_129_10 = constant s32 1 (const) */
        /* execute.simd:3287 [D] s_b_129_11 = s_b_129_8[s_b_129_10] <= s_b_129_9 */
        auto s_b_129_11 = emitter.vector_insert(s_b_129_8, emitter.const_s32((int32_t)1ULL), s_b_129_9);
        /* execute.simd:3287 [D] s_b_129_12: sym_27771_0_rd = s_b_129_11, dominates: s_b_132_8 s_b_134_7  */
        emitter.store_local(DV_sym_27771_0_rd, s_b_129_11);
        /* execute.simd:3287 [F] s_b_129_13: Jump b_130 (const) */
        {
          auto block = block_b_130;
          dynamic_block_queue.push(block_b_130);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_130) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_130);
        /* execute.simd:3286 [D] s_b_130_0 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_130_0 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_130_1 = constant u8 2 (const) */
        /* execute.simd:3286 [D] s_b_130_0[s_b_130_1] */
        auto s_b_130_2 = emitter.vector_extract(s_b_130_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3286 [F] s_b_130_3 = constant s32 0 (const) */
        /* execute.simd:3286 [D] s_b_130_4 = s_b_130_2<s_b_130_3 */
        auto s_b_130_4 = emitter.cmp_lt(s_b_130_2, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3286 [D] s_b_130_5: If s_b_130_4: Jump b_132 else b_134 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_132;
            dynamic_block_queue.push(block_b_132);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_134;
            dynamic_block_queue.push(block_b_134);
            false_target = block;
          }
          emitter.branch(s_b_130_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_131) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_131);
        /* execute.simd:3289 [D] s_b_131_0 = sym_27761_0_rn wutils::Vector<int32_t, 4> */
        auto s_b_131_0 = emitter.load_local(DV_sym_27761_0_rn, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_131_1 = constant u8 1 (const) */
        /* execute.simd:3289 [D] s_b_131_0[s_b_131_1] */
        auto s_b_131_2 = emitter.vector_extract(s_b_131_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3289 [D] s_b_131_3 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_131_3 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_131_4 = constant u8 1 (const) */
        /* execute.simd:3289 [D] s_b_131_3[s_b_131_4] */
        auto s_b_131_5 = emitter.vector_extract(s_b_131_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3289 [D] s_b_131_6 = s_b_131_2<<s_b_131_5 */
        auto s_b_131_6 = emitter.shl(s_b_131_2, s_b_131_5);
        /* execute.simd:3289 [D] s_b_131_7 = sym_27771_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_131_7 = emitter.load_local(DV_sym_27771_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3289 [D] s_b_131_8 = (u32)s_b_131_6 */
        auto s_b_131_8 = emitter.reinterpret(s_b_131_6, emitter.context().types().u32());
        /* execute.simd:3289 [F] s_b_131_9 = constant s32 1 (const) */
        /* execute.simd:3289 [D] s_b_131_10 = s_b_131_7[s_b_131_9] <= s_b_131_8 */
        auto s_b_131_10 = emitter.vector_insert(s_b_131_7, emitter.const_s32((int32_t)1ULL), s_b_131_8);
        /* execute.simd:3289 [D] s_b_131_11: sym_27771_0_rd = s_b_131_10, dominates: s_b_132_8 s_b_134_7  */
        emitter.store_local(DV_sym_27771_0_rd, s_b_131_10);
        /* execute.simd:3289 [F] s_b_131_12: Jump b_130 (const) */
        {
          auto block = block_b_130;
          dynamic_block_queue.push(block_b_130);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_132) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_132);
        /* execute.simd:3287 [D] s_b_132_0 = sym_27761_0_rn wutils::Vector<int32_t, 4> */
        auto s_b_132_0 = emitter.load_local(DV_sym_27761_0_rn, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_132_1 = constant u8 2 (const) */
        /* execute.simd:3287 [D] s_b_132_0[s_b_132_1] */
        auto s_b_132_2 = emitter.vector_extract(s_b_132_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3287 [D] s_b_132_3 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_132_3 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_132_4 = constant u8 2 (const) */
        /* execute.simd:3287 [D] s_b_132_3[s_b_132_4] */
        auto s_b_132_5 = emitter.vector_extract(s_b_132_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3287 [D] s_b_132_6 = -s_b_132_5 */
        auto s_b_132_6 = emitter.neg(s_b_132_5);
        /* execute.simd:3287 [D] s_b_132_7 = s_b_132_2->>s_b_132_6 */
        auto s_b_132_7 = emitter.sar(s_b_132_2, s_b_132_6);
        /* execute.simd:3287 [D] s_b_132_8 = sym_27771_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_132_8 = emitter.load_local(DV_sym_27771_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3287 [D] s_b_132_9 = (u32)s_b_132_7 */
        auto s_b_132_9 = emitter.reinterpret(s_b_132_7, emitter.context().types().u32());
        /* execute.simd:3287 [F] s_b_132_10 = constant s32 2 (const) */
        /* execute.simd:3287 [D] s_b_132_11 = s_b_132_8[s_b_132_10] <= s_b_132_9 */
        auto s_b_132_11 = emitter.vector_insert(s_b_132_8, emitter.const_s32((int32_t)2ULL), s_b_132_9);
        /* execute.simd:3287 [D] s_b_132_12: sym_27771_0_rd = s_b_132_11, dominates: s_b_135_8 s_b_137_7  */
        emitter.store_local(DV_sym_27771_0_rd, s_b_132_11);
        /* execute.simd:3287 [F] s_b_132_13: Jump b_133 (const) */
        {
          auto block = block_b_133;
          dynamic_block_queue.push(block_b_133);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_133) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_133);
        /* execute.simd:3286 [D] s_b_133_0 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_133_0 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_133_1 = constant u8 3 (const) */
        /* execute.simd:3286 [D] s_b_133_0[s_b_133_1] */
        auto s_b_133_2 = emitter.vector_extract(s_b_133_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3286 [F] s_b_133_3 = constant s32 0 (const) */
        /* execute.simd:3286 [D] s_b_133_4 = s_b_133_2<s_b_133_3 */
        auto s_b_133_4 = emitter.cmp_lt(s_b_133_2, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3286 [D] s_b_133_5: If s_b_133_4: Jump b_135 else b_137 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_135;
            dynamic_block_queue.push(block_b_135);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_137;
            dynamic_block_queue.push(block_b_137);
            false_target = block;
          }
          emitter.branch(s_b_133_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_134) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_134);
        /* execute.simd:3289 [D] s_b_134_0 = sym_27761_0_rn wutils::Vector<int32_t, 4> */
        auto s_b_134_0 = emitter.load_local(DV_sym_27761_0_rn, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_134_1 = constant u8 2 (const) */
        /* execute.simd:3289 [D] s_b_134_0[s_b_134_1] */
        auto s_b_134_2 = emitter.vector_extract(s_b_134_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3289 [D] s_b_134_3 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_134_3 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_134_4 = constant u8 2 (const) */
        /* execute.simd:3289 [D] s_b_134_3[s_b_134_4] */
        auto s_b_134_5 = emitter.vector_extract(s_b_134_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3289 [D] s_b_134_6 = s_b_134_2<<s_b_134_5 */
        auto s_b_134_6 = emitter.shl(s_b_134_2, s_b_134_5);
        /* execute.simd:3289 [D] s_b_134_7 = sym_27771_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_134_7 = emitter.load_local(DV_sym_27771_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3289 [D] s_b_134_8 = (u32)s_b_134_6 */
        auto s_b_134_8 = emitter.reinterpret(s_b_134_6, emitter.context().types().u32());
        /* execute.simd:3289 [F] s_b_134_9 = constant s32 2 (const) */
        /* execute.simd:3289 [D] s_b_134_10 = s_b_134_7[s_b_134_9] <= s_b_134_8 */
        auto s_b_134_10 = emitter.vector_insert(s_b_134_7, emitter.const_s32((int32_t)2ULL), s_b_134_8);
        /* execute.simd:3289 [D] s_b_134_11: sym_27771_0_rd = s_b_134_10, dominates: s_b_135_8 s_b_137_7  */
        emitter.store_local(DV_sym_27771_0_rd, s_b_134_10);
        /* execute.simd:3289 [F] s_b_134_12: Jump b_133 (const) */
        {
          auto block = block_b_133;
          dynamic_block_queue.push(block_b_133);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_135) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_135);
        /* execute.simd:3287 [D] s_b_135_0 = sym_27761_0_rn wutils::Vector<int32_t, 4> */
        auto s_b_135_0 = emitter.load_local(DV_sym_27761_0_rn, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_135_1 = constant u8 3 (const) */
        /* execute.simd:3287 [D] s_b_135_0[s_b_135_1] */
        auto s_b_135_2 = emitter.vector_extract(s_b_135_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3287 [D] s_b_135_3 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_135_3 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_135_4 = constant u8 3 (const) */
        /* execute.simd:3287 [D] s_b_135_3[s_b_135_4] */
        auto s_b_135_5 = emitter.vector_extract(s_b_135_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3287 [D] s_b_135_6 = -s_b_135_5 */
        auto s_b_135_6 = emitter.neg(s_b_135_5);
        /* execute.simd:3287 [D] s_b_135_7 = s_b_135_2->>s_b_135_6 */
        auto s_b_135_7 = emitter.sar(s_b_135_2, s_b_135_6);
        /* execute.simd:3287 [D] s_b_135_8 = sym_27771_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_135_8 = emitter.load_local(DV_sym_27771_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3287 [D] s_b_135_9 = (u32)s_b_135_7 */
        auto s_b_135_9 = emitter.reinterpret(s_b_135_7, emitter.context().types().u32());
        /* execute.simd:3287 [F] s_b_135_10 = constant s32 3 (const) */
        /* execute.simd:3287 [D] s_b_135_11 = s_b_135_8[s_b_135_10] <= s_b_135_9 */
        auto s_b_135_11 = emitter.vector_insert(s_b_135_8, emitter.const_s32((int32_t)3ULL), s_b_135_9);
        /* execute.simd:3287 [D] s_b_135_12: sym_27771_0_rd = s_b_135_11, dominates: s_b_136_1  */
        emitter.store_local(DV_sym_27771_0_rd, s_b_135_11);
        /* execute.simd:3287 [F] s_b_135_13: Jump b_136 (const) */
        {
          auto block = block_b_136;
          dynamic_block_queue.push(block_b_136);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_136) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_136);
        /* execute.simd:3293 [F] s_b_136_0=sym_25777_3_parameter_inst.rd (const) */
        /* execute.simd:3293 [D] s_b_136_1 = sym_27771_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_136_1 = emitter.load_local(DV_sym_27771_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3293 [D] s_b_136_2: WriteRegBank 20:s_b_136_0 = s_b_136_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_136_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_136_1);
        /* execute.simd:0 [F] s_b_136_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_137) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_137);
        /* execute.simd:3289 [D] s_b_137_0 = sym_27761_0_rn wutils::Vector<int32_t, 4> */
        auto s_b_137_0 = emitter.load_local(DV_sym_27761_0_rn, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_137_1 = constant u8 3 (const) */
        /* execute.simd:3289 [D] s_b_137_0[s_b_137_1] */
        auto s_b_137_2 = emitter.vector_extract(s_b_137_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3289 [D] s_b_137_3 = sym_27766_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_137_3 = emitter.load_local(DV_sym_27766_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_137_4 = constant u8 3 (const) */
        /* execute.simd:3289 [D] s_b_137_3[s_b_137_4] */
        auto s_b_137_5 = emitter.vector_extract(s_b_137_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3289 [D] s_b_137_6 = s_b_137_2<<s_b_137_5 */
        auto s_b_137_6 = emitter.shl(s_b_137_2, s_b_137_5);
        /* execute.simd:3289 [D] s_b_137_7 = sym_27771_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_137_7 = emitter.load_local(DV_sym_27771_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3289 [D] s_b_137_8 = (u32)s_b_137_6 */
        auto s_b_137_8 = emitter.reinterpret(s_b_137_6, emitter.context().types().u32());
        /* execute.simd:3289 [F] s_b_137_9 = constant s32 3 (const) */
        /* execute.simd:3289 [D] s_b_137_10 = s_b_137_7[s_b_137_9] <= s_b_137_8 */
        auto s_b_137_10 = emitter.vector_insert(s_b_137_7, emitter.const_s32((int32_t)3ULL), s_b_137_8);
        /* execute.simd:3289 [D] s_b_137_11: sym_27771_0_rd = s_b_137_10, dominates: s_b_136_1  */
        emitter.store_local(DV_sym_27771_0_rd, s_b_137_10);
        /* execute.simd:3289 [F] s_b_137_12: Jump b_136 (const) */
        {
          auto block = block_b_136;
          dynamic_block_queue.push(block_b_136);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_139) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_139);
        /* execute.simd:3303 [D] s_b_139_0 = sym_27972_0_rn wutils::Vector<int64_t, 2> */
        auto s_b_139_0 = emitter.load_local(DV_sym_27972_0_rn, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_139_1 = constant u8 0 (const) */
        /* execute.simd:3303 [D] s_b_139_0[s_b_139_1] */
        auto s_b_139_2 = emitter.vector_extract(s_b_139_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3303 [D] s_b_139_3 = sym_27977_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_139_3 = emitter.load_local(DV_sym_27977_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_139_4 = constant u8 0 (const) */
        /* execute.simd:3303 [D] s_b_139_3[s_b_139_4] */
        auto s_b_139_5 = emitter.vector_extract(s_b_139_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3303 [D] s_b_139_6 = -s_b_139_5 */
        auto s_b_139_6 = emitter.neg(s_b_139_5);
        /* execute.simd:3303 [D] s_b_139_7 = s_b_139_2->>s_b_139_6 */
        auto s_b_139_7 = emitter.sar(s_b_139_2, s_b_139_6);
        /* execute.simd:3303 [F] s_b_139_8 = sym_27982_0_rd (const) wutils::Vector<uint64_t, 2> */
        wutils::Vector<uint64_t, 2> s_b_139_8 = CV_sym_27982_0_rd;
        /* execute.simd:3303 [D] s_b_139_9 = (u64)s_b_139_7 */
        auto s_b_139_9 = emitter.reinterpret(s_b_139_7, emitter.context().types().u64());
        /* execute.simd:3303 [F] s_b_139_10 = constant s32 0 (const) */
        /* execute.simd:3303 [D] s_b_139_11 = s_b_139_8[s_b_139_10] <= s_b_139_9 */
        auto s_b_139_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_139_8[0], emitter.context().types().v2u64()), emitter.const_s32((int32_t)0ULL), s_b_139_9);
        /* execute.simd:3303 [D] s_b_139_12: sym_27982_0_rd = s_b_139_11, dominates: s_b_142_8 s_b_144_7  */
        emitter.store_local(DV_sym_27982_0_rd, s_b_139_11);
        /* execute.simd:3303 [F] s_b_139_13: Jump b_140 (const) */
        {
          auto block = block_b_140;
          dynamic_block_queue.push(block_b_140);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_140) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_140);
        /* execute.simd:3302 [D] s_b_140_0 = sym_27977_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_140_0 = emitter.load_local(DV_sym_27977_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_140_1 = constant u8 1 (const) */
        /* execute.simd:3302 [D] s_b_140_0[s_b_140_1] */
        auto s_b_140_2 = emitter.vector_extract(s_b_140_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3302 [F] s_b_140_3 = constant s64 0 (const) */
        /* execute.simd:3302 [D] s_b_140_4 = s_b_140_2<s_b_140_3 */
        auto s_b_140_4 = emitter.cmp_lt(s_b_140_2, emitter.const_s64((int64_t)0ULL));
        /* execute.simd:3302 [D] s_b_140_5: If s_b_140_4: Jump b_142 else b_144 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_142;
            dynamic_block_queue.push(block_b_142);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_144;
            dynamic_block_queue.push(block_b_144);
            false_target = block;
          }
          emitter.branch(s_b_140_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_141) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_141);
        /* execute.simd:3305 [D] s_b_141_0 = sym_27972_0_rn wutils::Vector<int64_t, 2> */
        auto s_b_141_0 = emitter.load_local(DV_sym_27972_0_rn, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_141_1 = constant u8 0 (const) */
        /* execute.simd:3305 [D] s_b_141_0[s_b_141_1] */
        auto s_b_141_2 = emitter.vector_extract(s_b_141_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3305 [D] s_b_141_3 = sym_27977_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_141_3 = emitter.load_local(DV_sym_27977_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_141_4 = constant u8 0 (const) */
        /* execute.simd:3305 [D] s_b_141_3[s_b_141_4] */
        auto s_b_141_5 = emitter.vector_extract(s_b_141_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3305 [D] s_b_141_6 = s_b_141_2<<s_b_141_5 */
        auto s_b_141_6 = emitter.shl(s_b_141_2, s_b_141_5);
        /* execute.simd:3305 [F] s_b_141_7 = sym_27982_0_rd (const) wutils::Vector<uint64_t, 2> */
        wutils::Vector<uint64_t, 2> s_b_141_7 = CV_sym_27982_0_rd;
        /* execute.simd:3305 [D] s_b_141_8 = (u64)s_b_141_6 */
        auto s_b_141_8 = emitter.reinterpret(s_b_141_6, emitter.context().types().u64());
        /* execute.simd:3305 [F] s_b_141_9 = constant s32 0 (const) */
        /* execute.simd:3305 [D] s_b_141_10 = s_b_141_7[s_b_141_9] <= s_b_141_8 */
        auto s_b_141_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_141_7[0], emitter.context().types().v2u64()), emitter.const_s32((int32_t)0ULL), s_b_141_8);
        /* execute.simd:3305 [D] s_b_141_11: sym_27982_0_rd = s_b_141_10, dominates: s_b_142_8 s_b_144_7  */
        emitter.store_local(DV_sym_27982_0_rd, s_b_141_10);
        /* execute.simd:3305 [F] s_b_141_12: Jump b_140 (const) */
        {
          auto block = block_b_140;
          dynamic_block_queue.push(block_b_140);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_142) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_142);
        /* execute.simd:3303 [D] s_b_142_0 = sym_27972_0_rn wutils::Vector<int64_t, 2> */
        auto s_b_142_0 = emitter.load_local(DV_sym_27972_0_rn, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_142_1 = constant u8 1 (const) */
        /* execute.simd:3303 [D] s_b_142_0[s_b_142_1] */
        auto s_b_142_2 = emitter.vector_extract(s_b_142_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3303 [D] s_b_142_3 = sym_27977_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_142_3 = emitter.load_local(DV_sym_27977_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_142_4 = constant u8 1 (const) */
        /* execute.simd:3303 [D] s_b_142_3[s_b_142_4] */
        auto s_b_142_5 = emitter.vector_extract(s_b_142_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3303 [D] s_b_142_6 = -s_b_142_5 */
        auto s_b_142_6 = emitter.neg(s_b_142_5);
        /* execute.simd:3303 [D] s_b_142_7 = s_b_142_2->>s_b_142_6 */
        auto s_b_142_7 = emitter.sar(s_b_142_2, s_b_142_6);
        /* execute.simd:3303 [D] s_b_142_8 = sym_27982_0_rd wutils::Vector<uint64_t, 2> */
        auto s_b_142_8 = emitter.load_local(DV_sym_27982_0_rd, emitter.context().types().v2u64());
        /* execute.simd:3303 [D] s_b_142_9 = (u64)s_b_142_7 */
        auto s_b_142_9 = emitter.reinterpret(s_b_142_7, emitter.context().types().u64());
        /* execute.simd:3303 [F] s_b_142_10 = constant s32 1 (const) */
        /* execute.simd:3303 [D] s_b_142_11 = s_b_142_8[s_b_142_10] <= s_b_142_9 */
        auto s_b_142_11 = emitter.vector_insert(s_b_142_8, emitter.const_s32((int32_t)1ULL), s_b_142_9);
        /* execute.simd:3303 [D] s_b_142_12: sym_27982_0_rd = s_b_142_11, dominates: s_b_143_1  */
        emitter.store_local(DV_sym_27982_0_rd, s_b_142_11);
        /* execute.simd:3303 [F] s_b_142_13: Jump b_143 (const) */
        {
          auto block = block_b_143;
          dynamic_block_queue.push(block_b_143);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_143) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_143);
        /* execute.simd:3309 [F] s_b_143_0=sym_25777_3_parameter_inst.rd (const) */
        /* execute.simd:3309 [D] s_b_143_1 = sym_27982_0_rd wutils::Vector<uint64_t, 2> */
        auto s_b_143_1 = emitter.load_local(DV_sym_27982_0_rd, emitter.context().types().v2u64());
        /* execute.simd:3309 [D] s_b_143_2: WriteRegBank 21:s_b_143_0 = s_b_143_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_143_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_143_1);
        /* execute.simd:0 [F] s_b_143_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_144) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_144);
        /* execute.simd:3305 [D] s_b_144_0 = sym_27972_0_rn wutils::Vector<int64_t, 2> */
        auto s_b_144_0 = emitter.load_local(DV_sym_27972_0_rn, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_144_1 = constant u8 1 (const) */
        /* execute.simd:3305 [D] s_b_144_0[s_b_144_1] */
        auto s_b_144_2 = emitter.vector_extract(s_b_144_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3305 [D] s_b_144_3 = sym_27977_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_144_3 = emitter.load_local(DV_sym_27977_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_144_4 = constant u8 1 (const) */
        /* execute.simd:3305 [D] s_b_144_3[s_b_144_4] */
        auto s_b_144_5 = emitter.vector_extract(s_b_144_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3305 [D] s_b_144_6 = s_b_144_2<<s_b_144_5 */
        auto s_b_144_6 = emitter.shl(s_b_144_2, s_b_144_5);
        /* execute.simd:3305 [D] s_b_144_7 = sym_27982_0_rd wutils::Vector<uint64_t, 2> */
        auto s_b_144_7 = emitter.load_local(DV_sym_27982_0_rd, emitter.context().types().v2u64());
        /* execute.simd:3305 [D] s_b_144_8 = (u64)s_b_144_6 */
        auto s_b_144_8 = emitter.reinterpret(s_b_144_6, emitter.context().types().u64());
        /* execute.simd:3305 [F] s_b_144_9 = constant s32 1 (const) */
        /* execute.simd:3305 [D] s_b_144_10 = s_b_144_7[s_b_144_9] <= s_b_144_8 */
        auto s_b_144_10 = emitter.vector_insert(s_b_144_7, emitter.const_s32((int32_t)1ULL), s_b_144_8);
        /* execute.simd:3305 [D] s_b_144_11: sym_27982_0_rd = s_b_144_10, dominates: s_b_143_1  */
        emitter.store_local(DV_sym_27982_0_rd, s_b_144_10);
        /* execute.simd:3305 [F] s_b_144_12: Jump b_143 (const) */
        {
          auto block = block_b_143;
          dynamic_block_queue.push(block_b_143);
          emitter.jump(block);
        }
      }
    }
  }
  else 
  {
    emitter.jump(__exit_block);
  }
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_st1spi(const arm64_decode_a64_SIMD_LS_SINGLE_PI&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_135764_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_135752_1_tmp_s_b_49_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_135491_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_135615_1__R_s_b_3_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_135693_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_135508_1__R_s_b_3_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_135598_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_135725_1_temporary_value;
  auto DV_sym_135725_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_30760_0_addr = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:2866 [F] s_b_0_0=sym_30754_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_10 else b_11 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_11;
    }
  }
  /* b_2, b_3, b_5, b_6, b_7, b_12,  */
  fixed_block_b_1: 
  {
    /* execute.simd:2895 [F] s_b_1_0=sym_30754_3_parameter_inst.rm (const) */
    /* execute.simd:2895 [F] s_b_1_1 = (u32)s_b_1_0 (const) */
    /* execute.simd:2895 [F] s_b_1_2 = constant u32 1f (const) */
    /* execute.simd:2895 [F] s_b_1_3 = s_b_1_1!=s_b_1_2 (const) */
    uint8_t s_b_1_3 = ((uint8_t)(((uint32_t)insn.rm) != (uint32_t)31ULL));
    /* execute.simd:2895 [F] s_b_1_4: If s_b_1_3: Jump b_8 else b_9 (const) */
    if (s_b_1_3) 
    {
      goto fixed_block_b_8;
    }
    else 
    {
      goto fixed_block_b_9;
    }
  }
  /* b_12,  */
  fixed_block_b_2: 
  {
    /* execute.simd:2870 [F] s_b_2_0=sym_30754_3_parameter_inst.rt (const) */
    /* execute.simd:2870 [D] s_b_2_1 = ReadRegBank 16:s_b_2_0 (v16u8) */
    auto s_b_2_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_2_1,emitter.const_u8(16));
    }
    /* execute.simd:2871 [D] s_b_2_2 = sym_30760_0_addr uint64_t */
    auto s_b_2_2 = emitter.load_local(DV_sym_30760_0_addr, emitter.context().types().u64());
    /* execute.simd:2871 [F] s_b_2_3=sym_30754_3_parameter_inst.eindex (const) */
    /* execute.simd:2871 [D] s_b_2_1[s_b_2_3] */
    auto s_b_2_4 = emitter.vector_extract(s_b_2_1, emitter.const_u8(insn.eindex));
    /* ???:4294967295 [D] s_b_2_5: Store 1 s_b_2_2 <= s_b_2_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_2_2, s_b_2_4, emitter.const_u8(1));
    }
    emitter.store_memory(s_b_2_2, s_b_2_4);
    /* ???:4294967295 [F] s_b_2_6 = constant u64 1 (const) */
    /* ???:4294967295 [D] s_b_2_7 = s_b_2_2+s_b_2_6 */
    auto s_b_2_7 = emitter.add(s_b_2_2, emitter.const_u64((uint64_t)1ULL));
    /* execute.simd:2872 [D] s_b_2_8: sym_30760_0_addr = s_b_2_7, dominates: s_b_9_1  */
    emitter.store_local(DV_sym_30760_0_addr, s_b_2_7);
    /* execute.simd:0 [F] s_b_2_9: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_12,  */
  fixed_block_b_3: 
  {
    /* execute.simd:2876 [F] s_b_3_0=sym_30754_3_parameter_inst.rt (const) */
    /* execute.simd:2876 [D] s_b_3_1 = ReadRegBank 18:s_b_3_0 (v8u16) */
    auto s_b_3_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_3_1,emitter.const_u8(16));
    }
    /* execute.simd:2877 [D] s_b_3_2 = sym_30760_0_addr uint64_t */
    auto s_b_3_2 = emitter.load_local(DV_sym_30760_0_addr, emitter.context().types().u64());
    /* execute.simd:2877 [F] s_b_3_3=sym_30754_3_parameter_inst.eindex (const) */
    /* execute.simd:2877 [D] s_b_3_1[s_b_3_3] */
    auto s_b_3_4 = emitter.vector_extract(s_b_3_1, emitter.const_u8(insn.eindex));
    /* ???:4294967295 [D] s_b_3_5: Store 2 s_b_3_2 <= s_b_3_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_3_2, s_b_3_4, emitter.const_u8(2));
    }
    emitter.store_memory(s_b_3_2, s_b_3_4);
    /* ???:4294967295 [F] s_b_3_6 = constant u64 2 (const) */
    /* ???:4294967295 [D] s_b_3_7 = s_b_3_2+s_b_3_6 */
    auto s_b_3_7 = emitter.add(s_b_3_2, emitter.const_u64((uint64_t)2ULL));
    /* execute.simd:2878 [D] s_b_3_8: sym_30760_0_addr = s_b_3_7, dominates: s_b_9_1  */
    emitter.store_local(DV_sym_30760_0_addr, s_b_3_7);
    /* execute.simd:0 [F] s_b_3_9: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_12,  */
  fixed_block_b_4: 
  {
    /* execute.simd:2882 [F] s_b_4_0=sym_30754_3_parameter_inst.size (const) */
    /* execute.simd:2882 [F] s_b_4_1 = (u32)s_b_4_0 (const) */
    /* execute.simd:2882 [F] s_b_4_2 = constant u32 0 (const) */
    /* execute.simd:2882 [F] s_b_4_3 = s_b_4_1==s_b_4_2 (const) */
    uint8_t s_b_4_3 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)0ULL));
    /* execute.simd:2882 [F] s_b_4_4: If s_b_4_3: Jump b_5 else b_6 (const) */
    if (s_b_4_3) 
    {
      goto fixed_block_b_5;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_4,  */
  fixed_block_b_5: 
  {
    /* execute.simd:2883 [F] s_b_5_0=sym_30754_3_parameter_inst.rt (const) */
    /* execute.simd:2883 [D] s_b_5_1 = ReadRegBank 20:s_b_5_0 (v4u32) */
    auto s_b_5_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_5_1,emitter.const_u8(16));
    }
    /* execute.simd:2884 [D] s_b_5_2 = sym_30760_0_addr uint64_t */
    auto s_b_5_2 = emitter.load_local(DV_sym_30760_0_addr, emitter.context().types().u64());
    /* execute.simd:2884 [F] s_b_5_3=sym_30754_3_parameter_inst.eindex (const) */
    /* execute.simd:2884 [D] s_b_5_1[s_b_5_3] */
    auto s_b_5_4 = emitter.vector_extract(s_b_5_1, emitter.const_u8(insn.eindex));
    /* ???:4294967295 [D] s_b_5_5: Store 4 s_b_5_2 <= s_b_5_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_5_2, s_b_5_4, emitter.const_u8(4));
    }
    emitter.store_memory(s_b_5_2, s_b_5_4);
    /* ???:4294967295 [F] s_b_5_6 = constant u64 4 (const) */
    /* ???:4294967295 [D] s_b_5_7 = s_b_5_2+s_b_5_6 */
    auto s_b_5_7 = emitter.add(s_b_5_2, emitter.const_u64((uint64_t)4ULL));
    /* execute.simd:2885 [D] s_b_5_8: sym_30760_0_addr = s_b_5_7, dominates: s_b_9_1  */
    emitter.store_local(DV_sym_30760_0_addr, s_b_5_7);
    /* execute.simd:2883 [F] s_b_5_9: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_4,  */
  fixed_block_b_6: 
  {
    /* execute.simd:2886 [F] s_b_6_0=sym_30754_3_parameter_inst.size (const) */
    /* execute.simd:2886 [F] s_b_6_1 = (u32)s_b_6_0 (const) */
    /* execute.simd:2886 [F] s_b_6_2 = constant u32 1 (const) */
    /* execute.simd:2886 [F] s_b_6_3 = s_b_6_1==s_b_6_2 (const) */
    uint8_t s_b_6_3 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)1ULL));
    /* execute.simd:2886 [F] s_b_6_4: If s_b_6_3: Jump b_7 else b_1 (const) */
    if (s_b_6_3) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_1;
    }
  }
  /* b_6,  */
  fixed_block_b_7: 
  {
    /* execute.simd:2887 [F] s_b_7_0=sym_30754_3_parameter_inst.rt (const) */
    /* execute.simd:2887 [D] s_b_7_1 = ReadRegBank 21:s_b_7_0 (v2u64) */
    auto s_b_7_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_7_1,emitter.const_u8(16));
    }
    /* execute.simd:2888 [D] s_b_7_2 = sym_30760_0_addr uint64_t */
    auto s_b_7_2 = emitter.load_local(DV_sym_30760_0_addr, emitter.context().types().u64());
    /* execute.simd:2888 [F] s_b_7_3=sym_30754_3_parameter_inst.eindex (const) */
    /* execute.simd:2888 [D] s_b_7_1[s_b_7_3] */
    auto s_b_7_4 = emitter.vector_extract(s_b_7_1, emitter.const_u8(insn.eindex));
    /* ???:4294967295 [D] s_b_7_5: Store 8 s_b_7_2 <= s_b_7_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_7_2, s_b_7_4, emitter.const_u8(8));
    }
    emitter.store_memory(s_b_7_2, s_b_7_4);
    /* ???:4294967295 [F] s_b_7_6 = constant u64 8 (const) */
    /* ???:4294967295 [D] s_b_7_7 = s_b_7_2+s_b_7_6 */
    auto s_b_7_7 = emitter.add(s_b_7_2, emitter.const_u64((uint64_t)8ULL));
    /* execute.simd:2889 [D] s_b_7_8: sym_30760_0_addr = s_b_7_7, dominates: s_b_9_1  */
    emitter.store_local(DV_sym_30760_0_addr, s_b_7_7);
    /* execute.simd:2887 [F] s_b_7_9: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_1,  */
  fixed_block_b_8: 
  {
    /* execute.simd:2896 [F] s_b_8_0=sym_30754_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_8_1 = (u32)s_b_8_0 (const) */
    /* execute.a64:2793 [F] s_b_8_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_8_3 = s_b_8_1==s_b_8_2 (const) */
    uint8_t s_b_8_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_8_4: If s_b_8_3: Jump b_18 else b_19 (const) */
    if (s_b_8_3) 
    {
      goto fixed_block_b_18;
    }
    else 
    {
      goto fixed_block_b_19;
    }
  }
  /* b_1, b_32,  */
  fixed_block_b_9: 
  {
    /* execute.simd:2899 [F] s_b_9_0 = constant u8 1 (const) */
    /* execute.simd:2899 [D] s_b_9_1 = sym_30760_0_addr uint64_t */
    auto s_b_9_1 = emitter.load_local(DV_sym_30760_0_addr, emitter.context().types().u64());
    /* execute.simd:2899 [D] s_b_9_2: sym_135693_3_parameter_value = s_b_9_1, dominates: s_b_26_0 s_b_28_0 s_b_29_1  */
    emitter.store_local(DV_sym_135693_3_parameter_value, s_b_9_1);
    /* execute.a64:2809 [F] s_b_9_3 = !s_b_9_0 (const) */
    uint8_t s_b_9_3 = !(uint8_t)1ULL;
    /* execute.a64:2809 [F] s_b_9_4: If s_b_9_3: Jump b_26 else b_27 (const) */
    if (s_b_9_3) 
    {
      goto fixed_block_b_26;
    }
    else 
    {
      goto fixed_block_b_27;
    }
  }
  /* b_0,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2764 [F] s_b_10_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_10_1 = __builtin_get_feature */
    uint32_t s_b_10_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_10_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_10_3 = s_b_10_1==s_b_10_2 (const) */
    uint8_t s_b_10_3 = ((uint8_t)(s_b_10_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_10_4: If s_b_10_3: Jump b_13 else b_14 (const) */
    if (s_b_10_3) 
    {
      goto fixed_block_b_13;
    }
    else 
    {
      goto fixed_block_b_14;
    }
  }
  /* b_0,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2796 [F] s_b_11_0=sym_30754_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_11_1 = ReadRegBank 0:s_b_11_0 (u64) */
    auto s_b_11_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_11_1,emitter.const_u8(8));
    }
    /* ???:4294967295 [D] s_b_11_2: sym_135491_0_return_symbol = s_b_11_1, dominates: s_b_12_0  */
    emitter.store_local(DV_sym_135491_0_return_symbol, s_b_11_1);
    /* ???:4294967295 [F] s_b_11_3: Jump b_12 (const) */
    goto fixed_block_b_12;
  }
  /* b_11, b_15,  */
  fixed_block_b_12: 
  {
    /* ???:4294967295 [D] s_b_12_0 = sym_135491_0_return_symbol uint64_t */
    auto s_b_12_0 = emitter.load_local(DV_sym_135491_0_return_symbol, emitter.context().types().u64());
    /* execute.simd:2866 [D] s_b_12_1: sym_30760_0_addr = s_b_12_0, dominates: s_b_9_1 s_b_2_2 s_b_3_2 s_b_5_2 s_b_7_2  */
    emitter.store_local(DV_sym_30760_0_addr, s_b_12_0);
    /* execute.simd:2868 [F] s_b_12_2=sym_30754_3_parameter_inst.opcode (const) */
    /* execute.simd:2869 [F] s_b_12_3 = constant s32 0 (const) */
    /* execute.simd:2875 [F] s_b_12_4 = constant s32 2 (const) */
    /* execute.simd:2881 [F] s_b_12_5 = constant s32 4 (const) */
    /* execute.simd:2868 [F] s_b_12_6: Switch s_b_12_2: < <todo> > def b_1 (const) -> b_1, b_2, b_3, b_4,  */
    switch (insn.opcode) 
    {
    case (int32_t)0ULL:
      goto fixed_block_b_2;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_3;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_4;
      break;
    default:
      goto fixed_block_b_1;
    }
  }
  /* b_10,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2765 [D] s_b_13_0 = ReadReg 21 (u64) */
    auto s_b_13_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_13_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_13_1: sym_135508_1__R_s_b_3_0 = s_b_13_0, dominates: s_b_15_0  */
    emitter.store_local(DV_sym_135508_1__R_s_b_3_0, s_b_13_0);
    /* execute.a64:2765 [F] s_b_13_2: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_10,  */
  fixed_block_b_14: 
  {
    /* execute.a64:3075 [F] s_b_14_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_14_1 = __builtin_get_feature */
    uint32_t s_b_14_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_14_2 = (u8)s_b_14_1 (const) */
    /* execute.a64:2767 [F] s_b_14_3 = (u32)s_b_14_2 (const) */
    /* execute.a64:2767 [F] s_b_14_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_14_5 = s_b_14_3==s_b_14_4 (const) */
    uint8_t s_b_14_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_14_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_14_6: If s_b_14_5: Jump b_16 else b_17 (const) */
    if (s_b_14_5) 
    {
      goto fixed_block_b_16;
    }
    else 
    {
      goto fixed_block_b_17;
    }
  }
  /* b_13, b_16, b_17,  */
  fixed_block_b_15: 
  {
    /* execute.a64:2794 [D] s_b_15_0 = sym_135508_1__R_s_b_3_0 uint64_t */
    auto s_b_15_0 = emitter.load_local(DV_sym_135508_1__R_s_b_3_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_15_1: sym_135491_0_return_symbol = s_b_15_0, dominates: s_b_12_0  */
    emitter.store_local(DV_sym_135491_0_return_symbol, s_b_15_0);
    /* ???:4294967295 [F] s_b_15_2: Jump b_12 (const) */
    goto fixed_block_b_12;
  }
  /* b_14,  */
  fixed_block_b_16: 
  {
    /* execute.a64:2768 [D] s_b_16_0 = ReadReg 21 (u64) */
    auto s_b_16_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_16_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_16_1: sym_135508_1__R_s_b_3_0 = s_b_16_0, dominates: s_b_15_0  */
    emitter.store_local(DV_sym_135508_1__R_s_b_3_0, s_b_16_0);
    /* execute.a64:2768 [F] s_b_16_2: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_14,  */
  fixed_block_b_17: 
  {
    /* execute.a64:2770 [D] s_b_17_0 = ReadReg 22 (u64) */
    auto s_b_17_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_17_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_17_1: sym_135508_1__R_s_b_3_0 = s_b_17_0, dominates: s_b_15_0  */
    emitter.store_local(DV_sym_135508_1__R_s_b_3_0, s_b_17_0);
    /* execute.a64:2770 [F] s_b_17_2: Jump b_15 (const) */
    goto fixed_block_b_15;
  }
  /* b_8,  */
  fixed_block_b_18: 
  {
    /* execute.a64:2764 [F] s_b_18_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_18_1 = __builtin_get_feature */
    uint32_t s_b_18_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_18_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_18_3 = s_b_18_1==s_b_18_2 (const) */
    uint8_t s_b_18_3 = ((uint8_t)(s_b_18_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_18_4: If s_b_18_3: Jump b_21 else b_22 (const) */
    if (s_b_18_3) 
    {
      goto fixed_block_b_21;
    }
    else 
    {
      goto fixed_block_b_22;
    }
  }
  /* b_8,  */
  fixed_block_b_19: 
  {
    /* execute.a64:2796 [F] s_b_19_0=sym_30754_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_19_1 = ReadRegBank 0:s_b_19_0 (u64) */
    auto s_b_19_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_19_1,emitter.const_u8(8));
    }
    /* ???:4294967295 [D] s_b_19_2: sym_135598_0_return_symbol = s_b_19_1, dominates: s_b_20_0  */
    emitter.store_local(DV_sym_135598_0_return_symbol, s_b_19_1);
    /* ???:4294967295 [F] s_b_19_3: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_19, b_23,  */
  fixed_block_b_20: 
  {
    /* ???:4294967295 [D] s_b_20_0 = sym_135598_0_return_symbol uint64_t */
    auto s_b_20_0 = emitter.load_local(DV_sym_135598_0_return_symbol, emitter.context().types().u64());
    /* execute.simd:2896 [F] s_b_20_1=sym_30754_3_parameter_inst.rm (const) */
    /* ???:4294967295 [D] s_b_20_2: sym_135752_1_tmp_s_b_49_0 = s_b_20_0, dominates: s_b_32_1  */
    emitter.store_local(DV_sym_135752_1_tmp_s_b_49_0, s_b_20_0);
    /* execute.a64:2714 [F] s_b_20_3 = (u32)s_b_20_1 (const) */
    /* execute.a64:2714 [F] s_b_20_4 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_20_5 = s_b_20_3==s_b_20_4 (const) */
    uint8_t s_b_20_5 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_20_6: If s_b_20_5: Jump b_31 else b_33 (const) */
    if (s_b_20_5) 
    {
      goto fixed_block_b_31;
    }
    else 
    {
      goto fixed_block_b_33;
    }
  }
  /* b_18,  */
  fixed_block_b_21: 
  {
    /* execute.a64:2765 [D] s_b_21_0 = ReadReg 21 (u64) */
    auto s_b_21_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_21_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_21_1: sym_135615_1__R_s_b_3_0 = s_b_21_0, dominates: s_b_23_0  */
    emitter.store_local(DV_sym_135615_1__R_s_b_3_0, s_b_21_0);
    /* execute.a64:2765 [F] s_b_21_2: Jump b_23 (const) */
    goto fixed_block_b_23;
  }
  /* b_18,  */
  fixed_block_b_22: 
  {
    /* execute.a64:3075 [F] s_b_22_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_22_1 = __builtin_get_feature */
    uint32_t s_b_22_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_22_2 = (u8)s_b_22_1 (const) */
    /* execute.a64:2767 [F] s_b_22_3 = (u32)s_b_22_2 (const) */
    /* execute.a64:2767 [F] s_b_22_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_22_5 = s_b_22_3==s_b_22_4 (const) */
    uint8_t s_b_22_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_22_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_22_6: If s_b_22_5: Jump b_24 else b_25 (const) */
    if (s_b_22_5) 
    {
      goto fixed_block_b_24;
    }
    else 
    {
      goto fixed_block_b_25;
    }
  }
  /* b_21, b_24, b_25,  */
  fixed_block_b_23: 
  {
    /* execute.a64:2794 [D] s_b_23_0 = sym_135615_1__R_s_b_3_0 uint64_t */
    auto s_b_23_0 = emitter.load_local(DV_sym_135615_1__R_s_b_3_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_23_1: sym_135598_0_return_symbol = s_b_23_0, dominates: s_b_20_0  */
    emitter.store_local(DV_sym_135598_0_return_symbol, s_b_23_0);
    /* ???:4294967295 [F] s_b_23_2: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_22,  */
  fixed_block_b_24: 
  {
    /* execute.a64:2768 [D] s_b_24_0 = ReadReg 21 (u64) */
    auto s_b_24_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_24_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_24_1: sym_135615_1__R_s_b_3_0 = s_b_24_0, dominates: s_b_23_0  */
    emitter.store_local(DV_sym_135615_1__R_s_b_3_0, s_b_24_0);
    /* execute.a64:2768 [F] s_b_24_2: Jump b_23 (const) */
    goto fixed_block_b_23;
  }
  /* b_22,  */
  fixed_block_b_25: 
  {
    /* execute.a64:2770 [D] s_b_25_0 = ReadReg 22 (u64) */
    auto s_b_25_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_25_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_25_1: sym_135615_1__R_s_b_3_0 = s_b_25_0, dominates: s_b_23_0  */
    emitter.store_local(DV_sym_135615_1__R_s_b_3_0, s_b_25_0);
    /* execute.a64:2770 [F] s_b_25_2: Jump b_23 (const) */
    goto fixed_block_b_23;
  }
  /* b_9,  */
  fixed_block_b_26: 
  {
    /* execute.a64:2810 [D] s_b_26_0 = sym_135693_3_parameter_value uint64_t */
    auto s_b_26_0 = emitter.load_local(DV_sym_135693_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2810 [F] s_b_26_1 = constant u64 ffffffff (const) */
    /* ???:4294967295 [D] s_b_26_2 = s_b_26_0&s_b_26_1 */
    auto s_b_26_2 = emitter.bitwise_and(s_b_26_0, emitter.const_u64((uint64_t)4294967295ULL));
    /* execute.a64:2810 [D] s_b_26_3: sym_135693_3_parameter_value = s_b_26_2, dominates: s_b_28_0 s_b_29_1  */
    emitter.store_local(DV_sym_135693_3_parameter_value, s_b_26_2);
    /* execute.a64:2810 [F] s_b_26_4: Jump b_27 (const) */
    goto fixed_block_b_27;
  }
  /* b_9, b_26,  */
  fixed_block_b_27: 
  {
    /* execute.a64:2813 [F] s_b_27_0=sym_30754_3_parameter_inst.rn (const) */
    /* execute.a64:2813 [F] s_b_27_1 = (u32)s_b_27_0 (const) */
    /* execute.a64:2813 [F] s_b_27_2 = constant u32 1f (const) */
    /* execute.a64:2813 [F] s_b_27_3 = s_b_27_1==s_b_27_2 (const) */
    uint8_t s_b_27_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2813 [F] s_b_27_4: If s_b_27_3: Jump b_28 else b_29 (const) */
    if (s_b_27_3) 
    {
      goto fixed_block_b_28;
    }
    else 
    {
      goto fixed_block_b_29;
    }
  }
  /* b_27,  */
  fixed_block_b_28: 
  {
    /* execute.a64:2814 [D] s_b_28_0 = sym_135693_3_parameter_value uint64_t */
    auto s_b_28_0 = emitter.load_local(DV_sym_135693_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2814 [D] s_b_28_1: sym_135764_3_parameter_value = s_b_28_0, dominates: s_b_34_0 s_b_35_0 s_b_36_0  */
    emitter.store_local(DV_sym_135764_3_parameter_value, s_b_28_0);
    /* execute.a64:2777 [F] s_b_28_2 = constant u32 1 (const) */
    /* execute.a64:2777 [F] s_b_28_3 = __builtin_get_feature */
    uint32_t s_b_28_3 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2777 [F] s_b_28_4 = constant u32 0 (const) */
    /* execute.a64:2777 [F] s_b_28_5 = s_b_28_3==s_b_28_4 (const) */
    uint8_t s_b_28_5 = ((uint8_t)(s_b_28_3 == (uint32_t)0ULL));
    /* execute.a64:2777 [F] s_b_28_6: If s_b_28_5: Jump b_34 else b_37 (const) */
    if (s_b_28_5) 
    {
      goto fixed_block_b_34;
    }
    else 
    {
      goto fixed_block_b_37;
    }
  }
  /* b_27,  */
  fixed_block_b_29: 
  {
    /* execute.a64:2816 [F] s_b_29_0=sym_30754_3_parameter_inst.rn (const) */
    /* execute.a64:2816 [D] s_b_29_1 = sym_135693_3_parameter_value uint64_t */
    auto s_b_29_1 = emitter.load_local(DV_sym_135693_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2816 [D] s_b_29_2: WriteRegBank 0:s_b_29_0 = s_b_29_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_29_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_29_1);
    /* execute.a64:2816 [F] s_b_29_3: Jump b_30 (const) */
    goto fixed_block_b_30;
  }
  /* b_29, b_34, b_35, b_36,  */
  fixed_block_b_30: 
  {
    /* ???:4294967295 [F] s_b_30_0: Return */
    goto fixed_done;
  }
  /* b_20,  */
  fixed_block_b_31: 
  {
    /* execute.a64:2714 [F] s_b_31_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_31_1: sym_135725_1_temporary_value = s_b_31_0 (const), dominates: s_b_32_0  */
    CV_sym_135725_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_135725_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_31_2: Jump b_32 (const) */
    goto fixed_block_b_32;
  }
  /* b_31, b_33,  */
  fixed_block_b_32: 
  {
    /* execute.a64:2714 [D] s_b_32_0 = sym_135725_1_temporary_value uint64_t */
    auto s_b_32_0 = emitter.load_local(DV_sym_135725_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_32_1 = sym_135752_1_tmp_s_b_49_0 uint64_t */
    auto s_b_32_1 = emitter.load_local(DV_sym_135752_1_tmp_s_b_49_0, emitter.context().types().u64());
    /* execute.simd:2896 [D] s_b_32_2 = s_b_32_1+s_b_32_0 */
    auto s_b_32_2 = emitter.add(s_b_32_1, s_b_32_0);
    /* execute.simd:2896 [D] s_b_32_3: sym_30760_0_addr = s_b_32_2, dominates: s_b_9_1  */
    emitter.store_local(DV_sym_30760_0_addr, s_b_32_2);
    /* execute.simd:2896 [F] s_b_32_4: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_20,  */
  fixed_block_b_33: 
  {
    /* execute.a64:2714 [F] s_b_33_0=sym_30754_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_33_1 = ReadRegBank 0:s_b_33_0 (u64) */
    auto s_b_33_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_33_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_33_2: sym_135725_1_temporary_value = s_b_33_1, dominates: s_b_32_0  */
    emitter.store_local(DV_sym_135725_1_temporary_value, s_b_33_1);
    /* execute.a64:2714 [F] s_b_33_3: Jump b_32 (const) */
    goto fixed_block_b_32;
  }
  /* b_28,  */
  fixed_block_b_34: 
  {
    /* execute.a64:2778 [D] s_b_34_0 = sym_135764_3_parameter_value uint64_t */
    auto s_b_34_0 = emitter.load_local(DV_sym_135764_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2778 [D] s_b_34_1: WriteReg 21 = s_b_34_0 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER, emitter.const_u32(1408), s_b_34_0, emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32(1408), s_b_34_0);
    /* execute.a64:2778 [F] s_b_34_2: Jump b_30 (const) */
    goto fixed_block_b_30;
  }
  /* b_37,  */
  fixed_block_b_35: 
  {
    /* execute.a64:2781 [D] s_b_35_0 = sym_135764_3_parameter_value uint64_t */
    auto s_b_35_0 = emitter.load_local(DV_sym_135764_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2781 [D] s_b_35_1: WriteReg 21 = s_b_35_0 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER, emitter.const_u32(1408), s_b_35_0, emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32(1408), s_b_35_0);
    /* execute.a64:2781 [F] s_b_35_2: Jump b_30 (const) */
    goto fixed_block_b_30;
  }
  /* b_37,  */
  fixed_block_b_36: 
  {
    /* execute.a64:2783 [D] s_b_36_0 = sym_135764_3_parameter_value uint64_t */
    auto s_b_36_0 = emitter.load_local(DV_sym_135764_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2783 [D] s_b_36_1: WriteReg 22 = s_b_36_0 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER, emitter.const_u32(1416), s_b_36_0, emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32(1416), s_b_36_0);
    /* execute.a64:2783 [F] s_b_36_2: Jump b_30 (const) */
    goto fixed_block_b_30;
  }
  /* b_28,  */
  fixed_block_b_37: 
  {
    /* execute.a64:3075 [F] s_b_37_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_37_1 = __builtin_get_feature */
    uint32_t s_b_37_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_37_2 = (u8)s_b_37_1 (const) */
    /* execute.a64:2780 [F] s_b_37_3 = (u32)s_b_37_2 (const) */
    /* execute.a64:2780 [F] s_b_37_4 = constant u32 0 (const) */
    /* execute.a64:2780 [F] s_b_37_5 = s_b_37_3==s_b_37_4 (const) */
    uint8_t s_b_37_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_37_1)) == (uint32_t)0ULL));
    /* execute.a64:2780 [F] s_b_37_6: If s_b_37_5: Jump b_35 else b_36 (const) */
    if (s_b_37_5) 
    {
      goto fixed_block_b_35;
    }
    else 
    {
      goto fixed_block_b_36;
    }
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_stlrb(const arm64_decode_a64_LS_EX&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_138395_1__R_s_b_3_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_138378_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_138473_1_tmp_s_b_2_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_138541_1_temporary_value;
  auto DV_sym_138541_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:708 [F] s_b_0_0=sym_31315_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_1 else b_2 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_2;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2764 [F] s_b_1_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_1_1 = __builtin_get_feature */
    uint32_t s_b_1_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_1_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_1_3 = s_b_1_1==s_b_1_2 (const) */
    uint8_t s_b_1_3 = ((uint8_t)(s_b_1_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_1_4: If s_b_1_3: Jump b_4 else b_5 (const) */
    if (s_b_1_3) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_0,  */
  fixed_block_b_2: 
  {
    /* execute.a64:2796 [F] s_b_2_0=sym_31315_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_2_1 = ReadRegBank 0:s_b_2_0 (u64) */
    auto s_b_2_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_2_1,emitter.const_u8(8));
    }
    /* ???:4294967295 [D] s_b_2_2: sym_138378_0_return_symbol = s_b_2_1, dominates: s_b_3_0  */
    emitter.store_local(DV_sym_138378_0_return_symbol, s_b_2_1);
    /* ???:4294967295 [F] s_b_2_3: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  /* b_2, b_6,  */
  fixed_block_b_3: 
  {
    /* ???:4294967295 [D] s_b_3_0 = sym_138378_0_return_symbol uint64_t */
    auto s_b_3_0 = emitter.load_local(DV_sym_138378_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:709 [F] s_b_3_1=sym_31315_3_parameter_inst.rt (const) */
    /* ???:4294967295 [D] s_b_3_2: sym_138473_1_tmp_s_b_2_0 = s_b_3_0, dominates: s_b_11_2  */
    emitter.store_local(DV_sym_138473_1_tmp_s_b_2_0, s_b_3_0);
    /* execute.a64:2709 [F] s_b_3_3 = (u32)s_b_3_1 (const) */
    /* execute.a64:2709 [F] s_b_3_4 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_3_5 = s_b_3_3==s_b_3_4 (const) */
    uint8_t s_b_3_5 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_3_6: If s_b_3_5: Jump b_9 else b_10 (const) */
    if (s_b_3_5) 
    {
      goto fixed_block_b_9;
    }
    else 
    {
      goto fixed_block_b_10;
    }
  }
  /* b_1,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2765 [D] s_b_4_0 = ReadReg 21 (u64) */
    auto s_b_4_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_4_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_4_1: sym_138395_1__R_s_b_3_0 = s_b_4_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_138395_1__R_s_b_3_0, s_b_4_0);
    /* execute.a64:2765 [F] s_b_4_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_1,  */
  fixed_block_b_5: 
  {
    /* execute.a64:3075 [F] s_b_5_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_5_1 = __builtin_get_feature */
    uint32_t s_b_5_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_5_2 = (u8)s_b_5_1 (const) */
    /* execute.a64:2767 [F] s_b_5_3 = (u32)s_b_5_2 (const) */
    /* execute.a64:2767 [F] s_b_5_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_5_5 = s_b_5_3==s_b_5_4 (const) */
    uint8_t s_b_5_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_5_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_5_6: If s_b_5_5: Jump b_7 else b_8 (const) */
    if (s_b_5_5) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_8;
    }
  }
  /* b_4, b_7, b_8,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2794 [D] s_b_6_0 = sym_138395_1__R_s_b_3_0 uint64_t */
    auto s_b_6_0 = emitter.load_local(DV_sym_138395_1__R_s_b_3_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_6_1: sym_138378_0_return_symbol = s_b_6_0, dominates: s_b_3_0  */
    emitter.store_local(DV_sym_138378_0_return_symbol, s_b_6_0);
    /* ???:4294967295 [F] s_b_6_2: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  /* b_5,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2768 [D] s_b_7_0 = ReadReg 21 (u64) */
    auto s_b_7_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_7_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_7_1: sym_138395_1__R_s_b_3_0 = s_b_7_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_138395_1__R_s_b_3_0, s_b_7_0);
    /* execute.a64:2768 [F] s_b_7_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_5,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2770 [D] s_b_8_0 = ReadReg 22 (u64) */
    auto s_b_8_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_8_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_8_1: sym_138395_1__R_s_b_3_0 = s_b_8_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_138395_1__R_s_b_3_0, s_b_8_0);
    /* execute.a64:2770 [F] s_b_8_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_3,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2709 [F] s_b_9_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_9_1: sym_138541_1_temporary_value = s_b_9_0 (const), dominates: s_b_11_0  */
    CV_sym_138541_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_138541_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_9_2: Jump b_11 (const) */
    goto fixed_block_b_11;
  }
  /* b_3,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2709 [F] s_b_10_0=sym_31315_3_parameter_inst.rt (const) */
    /* execute.a64:2709 [D] s_b_10_1 = ReadRegBank 1:s_b_10_0 (u32) */
    auto s_b_10_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_10_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_10_2: sym_138541_1_temporary_value = s_b_10_1, dominates: s_b_11_0  */
    emitter.store_local(DV_sym_138541_1_temporary_value, s_b_10_1);
    /* execute.a64:2709 [F] s_b_10_3: Jump b_11 (const) */
    goto fixed_block_b_11;
  }
  /* b_9, b_10,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2709 [D] s_b_11_0 = sym_138541_1_temporary_value uint32_t */
    auto s_b_11_0 = emitter.load_local(DV_sym_138541_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_11_1 = (u64)s_b_11_0 */
    auto s_b_11_1 = emitter.zx(s_b_11_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_11_2 = sym_138473_1_tmp_s_b_2_0 uint64_t */
    auto s_b_11_2 = emitter.load_local(DV_sym_138473_1_tmp_s_b_2_0, emitter.context().types().u64());
    /* execute.a64:1845 [D] s_b_11_3 = (u8)s_b_11_1 */
    auto s_b_11_3 = emitter.truncate(s_b_11_1, emitter.context().types().u8());
    /* ???:4294967295 [D] s_b_11_4: Store 1 s_b_11_2 <= s_b_11_3 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_11_2, s_b_11_3, emitter.const_u8(1));
    }
    emitter.store_memory(s_b_11_2, s_b_11_3);
    /* ???:4294967295 [F] s_b_11_5: Return */
    goto fixed_done;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_stp_simd(const arm64_decode_a64_LS_REG_PAIR_OFF&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_142964_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_142981_1__R_s_b_3_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_143056_0_replaced_parameter_addr = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_143099_0_replaced_parameter_addr = emitter.alloc_local(emitter.context().types().u64(), false);
  uint8_t CV_sym_143093_1_tmp_s_b_0_1;
  uint8_t CV_sym_143091_1_tmp_s_b_0_5;
  auto DV_sym_143089_1_tmp_s_b_0_7 = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:781 [F] s_b_0_0=sym_31751_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_1 else b_2 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_2;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2764 [F] s_b_1_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_1_1 = __builtin_get_feature */
    uint32_t s_b_1_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_1_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_1_3 = s_b_1_1==s_b_1_2 (const) */
    uint8_t s_b_1_3 = ((uint8_t)(s_b_1_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_1_4: If s_b_1_3: Jump b_4 else b_5 (const) */
    if (s_b_1_3) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_0,  */
  fixed_block_b_2: 
  {
    /* execute.a64:2796 [F] s_b_2_0=sym_31751_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_2_1 = ReadRegBank 0:s_b_2_0 (u64) */
    auto s_b_2_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_2_1,emitter.const_u8(8));
    }
    /* ???:4294967295 [D] s_b_2_2: sym_142964_0_return_symbol = s_b_2_1, dominates: s_b_3_0  */
    emitter.store_local(DV_sym_142964_0_return_symbol, s_b_2_1);
    /* ???:4294967295 [F] s_b_2_3: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  /* b_2, b_6,  */
  fixed_block_b_3: 
  {
    /* ???:4294967295 [D] s_b_3_0 = sym_142964_0_return_symbol uint64_t */
    auto s_b_3_0 = emitter.load_local(DV_sym_142964_0_return_symbol, emitter.context().types().u64());
    /* execute.simd:782 [F] s_b_3_1=sym_31751_3_parameter_inst.imms64 (const) */
    /* ???:4294967295 [F] s_b_3_2 = (u64)s_b_3_1 (const) */
    /* ???:4294967295 [D] s_b_3_3 = s_b_3_0+s_b_3_2 */
    auto s_b_3_3 = emitter.add(s_b_3_0, emitter.const_u64(((uint64_t)insn.imms64)));
    /* execute.simd:784 [F] s_b_3_4=sym_31751_3_parameter_inst.opc (const) */
    /* execute.simd:784 [F] s_b_3_5 = (u32)s_b_3_4 (const) */
    /* execute.simd:784 [F] s_b_3_6 = constant u32 2 (const) */
    /* execute.simd:784 [F] s_b_3_7 = s_b_3_5+s_b_3_6 (const) */
    uint32_t s_b_3_7 = ((uint32_t)(((uint32_t)insn.opc) + (uint32_t)2ULL));
    /* execute.simd:784 [F] s_b_3_8 = (u8)s_b_3_7 (const) */
    /* execute.simd:765 [F] s_b_3_9 = constant u32 1 (const) */
    /* execute.simd:765 [F] s_b_3_10 = (u32)s_b_3_8 (const) */
    /* execute.simd:765 [F] s_b_3_11 = s_b_3_9<<s_b_3_10 (const) */
    uint32_t s_b_3_11 = ((uint32_t)((uint32_t)1ULL << ((uint32_t)((uint8_t)s_b_3_7))));
    /* execute.simd:765 [F] s_b_3_12 = (u8)s_b_3_11 (const) */
    /* ???:4294967295 [F] s_b_3_13: sym_143093_1_tmp_s_b_0_1 = s_b_3_8 (const), dominates: s_b_10_2  */
    CV_sym_143093_1_tmp_s_b_0_1 = ((uint8_t)s_b_3_7);
    /* ???:4294967295 [F] s_b_3_14: sym_143091_1_tmp_s_b_0_5 = s_b_3_12 (const), dominates: s_b_10_1  */
    CV_sym_143091_1_tmp_s_b_0_5 = ((uint8_t)s_b_3_11);
    /* ???:4294967295 [D] s_b_3_15: sym_143089_1_tmp_s_b_0_7 = s_b_3_3, dominates: s_b_10_0  */
    emitter.store_local(DV_sym_143089_1_tmp_s_b_0_7, s_b_3_3);
    /* ???:4294967295 [D] s_b_3_16: sym_143056_0_replaced_parameter_addr = s_b_3_3, dominates: s_b_11_2 s_b_9_2 s_b_12_2 s_b_14_3 s_b_13_2  */
    emitter.store_local(DV_sym_143056_0_replaced_parameter_addr, s_b_3_3);
    /* execute.simd:3723 [F] s_b_3_17 = constant s32 0 (const) */
    /* execute.simd:3729 [F] s_b_3_18 = constant s32 1 (const) */
    /* execute.simd:3735 [F] s_b_3_19 = constant s32 2 (const) */
    /* execute.simd:3741 [F] s_b_3_20 = constant s32 3 (const) */
    /* execute.simd:3747 [F] s_b_3_21 = constant s32 4 (const) */
    /* execute.simd:3722 [F] s_b_3_22: Switch s_b_3_8: < <todo> > def b_10 (const) -> b_11, b_10, b_9, b_12, b_14, b_13,  */
    switch (((uint8_t)s_b_3_7)) 
    {
    case (int32_t)1ULL:
      goto fixed_block_b_11;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_12;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_14;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_13;
      break;
    case (int32_t)0ULL:
      goto fixed_block_b_9;
      break;
    default:
      goto fixed_block_b_10;
    }
  }
  /* b_1,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2765 [D] s_b_4_0 = ReadReg 21 (u64) */
    auto s_b_4_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_4_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_4_1: sym_142981_1__R_s_b_3_0 = s_b_4_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_142981_1__R_s_b_3_0, s_b_4_0);
    /* execute.a64:2765 [F] s_b_4_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_1,  */
  fixed_block_b_5: 
  {
    /* execute.a64:3075 [F] s_b_5_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_5_1 = __builtin_get_feature */
    uint32_t s_b_5_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_5_2 = (u8)s_b_5_1 (const) */
    /* execute.a64:2767 [F] s_b_5_3 = (u32)s_b_5_2 (const) */
    /* execute.a64:2767 [F] s_b_5_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_5_5 = s_b_5_3==s_b_5_4 (const) */
    uint8_t s_b_5_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_5_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_5_6: If s_b_5_5: Jump b_7 else b_8 (const) */
    if (s_b_5_5) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_8;
    }
  }
  /* b_4, b_7, b_8,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2794 [D] s_b_6_0 = sym_142981_1__R_s_b_3_0 uint64_t */
    auto s_b_6_0 = emitter.load_local(DV_sym_142981_1__R_s_b_3_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_6_1: sym_142964_0_return_symbol = s_b_6_0, dominates: s_b_3_0  */
    emitter.store_local(DV_sym_142964_0_return_symbol, s_b_6_0);
    /* ???:4294967295 [F] s_b_6_2: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  /* b_5,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2768 [D] s_b_7_0 = ReadReg 21 (u64) */
    auto s_b_7_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_7_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_7_1: sym_142981_1__R_s_b_3_0 = s_b_7_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_142981_1__R_s_b_3_0, s_b_7_0);
    /* execute.a64:2768 [F] s_b_7_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_5,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2770 [D] s_b_8_0 = ReadReg 22 (u64) */
    auto s_b_8_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_8_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_8_1: sym_142981_1__R_s_b_3_0 = s_b_8_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_142981_1__R_s_b_3_0, s_b_8_0);
    /* execute.a64:2770 [F] s_b_8_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_3,  */
  fixed_block_b_9: 
  {
    /* execute.simd:3725 [F] s_b_9_0=sym_31751_3_parameter_inst.rt (const) */
    /* execute.simd:6340 [D] s_b_9_1 = ReadRegBank 4:s_b_9_0 (u8) */
    auto s_b_9_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_9_1,emitter.const_u8(1));
    }
    /* execute.simd:3726 [D] s_b_9_2 = sym_143056_0_replaced_parameter_addr uint64_t */
    auto s_b_9_2 = emitter.load_local(DV_sym_143056_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_9_3: Store 1 s_b_9_2 <= s_b_9_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_9_2, s_b_9_1, emitter.const_u8(1));
    }
    emitter.store_memory(s_b_9_2, s_b_9_1);
    /* execute.simd:0 [F] s_b_9_4: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_3, b_9, b_11, b_12, b_13, b_14,  */
  fixed_block_b_10: 
  {
    /* ???:4294967295 [D] s_b_10_0 = sym_143089_1_tmp_s_b_0_7 uint64_t */
    auto s_b_10_0 = emitter.load_local(DV_sym_143089_1_tmp_s_b_0_7, emitter.context().types().u64());
    /* ???:4294967295 [F] s_b_10_1 = sym_143091_1_tmp_s_b_0_5 (const) uint8_t */
    uint8_t s_b_10_1 = CV_sym_143091_1_tmp_s_b_0_5;
    /* ???:4294967295 [F] s_b_10_2 = sym_143093_1_tmp_s_b_0_1 (const) uint8_t */
    uint8_t s_b_10_2 = CV_sym_143093_1_tmp_s_b_0_1;
    /* execute.simd:767 [F] s_b_10_3 = (u64)s_b_10_1 (const) */
    /* execute.simd:767 [D] s_b_10_4 = s_b_10_0+s_b_10_3 */
    auto s_b_10_4 = emitter.add(s_b_10_0, emitter.const_u64(((uint64_t)s_b_10_1)));
    /* ???:4294967295 [D] s_b_10_5: sym_143099_0_replaced_parameter_addr = s_b_10_4, dominates: s_b_15_2 s_b_16_2 s_b_17_2 s_b_19_2 s_b_18_3  */
    emitter.store_local(DV_sym_143099_0_replaced_parameter_addr, s_b_10_4);
    /* execute.simd:3723 [F] s_b_10_6 = constant s32 0 (const) */
    /* execute.simd:3729 [F] s_b_10_7 = constant s32 1 (const) */
    /* execute.simd:3735 [F] s_b_10_8 = constant s32 2 (const) */
    /* execute.simd:3741 [F] s_b_10_9 = constant s32 3 (const) */
    /* execute.simd:3747 [F] s_b_10_10 = constant s32 4 (const) */
    /* execute.simd:3722 [F] s_b_10_11: Switch s_b_10_2: < <todo> > def b_20 (const) -> b_20, b_15, b_16, b_17, b_19, b_18,  */
    switch (s_b_10_2) 
    {
    case (int32_t)4ULL:
      goto fixed_block_b_18;
      break;
    case (int32_t)0ULL:
      goto fixed_block_b_19;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_17;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_16;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_15;
      break;
    default:
      goto fixed_block_b_20;
    }
  }
  /* b_3,  */
  fixed_block_b_11: 
  {
    /* execute.simd:3731 [F] s_b_11_0=sym_31751_3_parameter_inst.rt (const) */
    /* execute.simd:6345 [D] s_b_11_1 = ReadRegBank 5:s_b_11_0 (u16) */
    auto s_b_11_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_11_1,emitter.const_u8(2));
    }
    /* execute.simd:3732 [D] s_b_11_2 = sym_143056_0_replaced_parameter_addr uint64_t */
    auto s_b_11_2 = emitter.load_local(DV_sym_143056_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_11_3: Store 2 s_b_11_2 <= s_b_11_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_11_2, s_b_11_1, emitter.const_u8(2));
    }
    emitter.store_memory(s_b_11_2, s_b_11_1);
    /* execute.simd:0 [F] s_b_11_4: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_3,  */
  fixed_block_b_12: 
  {
    /* execute.simd:3737 [F] s_b_12_0=sym_31751_3_parameter_inst.rt (const) */
    /* execute.simd:6350 [D] s_b_12_1 = ReadRegBank 6:s_b_12_0 (u32) */
    auto s_b_12_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_12_1,emitter.const_u8(4));
    }
    /* execute.simd:3738 [D] s_b_12_2 = sym_143056_0_replaced_parameter_addr uint64_t */
    auto s_b_12_2 = emitter.load_local(DV_sym_143056_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_12_3: Store 4 s_b_12_2 <= s_b_12_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_12_2, s_b_12_1, emitter.const_u8(4));
    }
    emitter.store_memory(s_b_12_2, s_b_12_1);
    /* execute.simd:0 [F] s_b_12_4: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_3,  */
  fixed_block_b_13: 
  {
    /* execute.simd:3743 [F] s_b_13_0=sym_31751_3_parameter_inst.rt (const) */
    /* execute.simd:6355 [D] s_b_13_1 = ReadRegBank 7:s_b_13_0 (u64) */
    auto s_b_13_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_13_1,emitter.const_u8(8));
    }
    /* execute.simd:3744 [D] s_b_13_2 = sym_143056_0_replaced_parameter_addr uint64_t */
    auto s_b_13_2 = emitter.load_local(DV_sym_143056_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_13_3: Store 8 s_b_13_2 <= s_b_13_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_13_2, s_b_13_1, emitter.const_u8(8));
    }
    emitter.store_memory(s_b_13_2, s_b_13_1);
    /* execute.simd:0 [F] s_b_13_4: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_3,  */
  fixed_block_b_14: 
  {
    /* execute.simd:3751 [F] s_b_14_0=sym_31751_3_parameter_inst.rt (const) */
    /* execute.simd:6360 [D] s_b_14_1 = ReadRegBank 2:s_b_14_0 (u64) */
    auto s_b_14_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_14_1,emitter.const_u8(8));
    }
    /* execute.simd:6361 [D] s_b_14_2 = ReadRegBank 3:s_b_14_0 (u64) */
    auto s_b_14_2 = emitter.load_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),s_b_14_2,emitter.const_u8(8));
    }
    /* execute.simd:3752 [D] s_b_14_3 = sym_143056_0_replaced_parameter_addr uint64_t */
    auto s_b_14_3 = emitter.load_local(DV_sym_143056_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_14_4: Store 8 s_b_14_3 <= s_b_14_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_14_3, s_b_14_1, emitter.const_u8(8));
    }
    emitter.store_memory(s_b_14_3, s_b_14_1);
    /* execute.simd:3753 [F] s_b_14_5 = constant u64 8 (const) */
    /* execute.simd:3753 [D] s_b_14_6 = s_b_14_3+s_b_14_5 */
    auto s_b_14_6 = emitter.add(s_b_14_3, emitter.const_u64((uint64_t)8ULL));
    /* ???:4294967295 [D] s_b_14_7: Store 8 s_b_14_6 <= s_b_14_2 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_14_6, s_b_14_2, emitter.const_u8(8));
    }
    emitter.store_memory(s_b_14_6, s_b_14_2);
    /* execute.simd:0 [F] s_b_14_8: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_10,  */
  fixed_block_b_15: 
  {
    /* execute.simd:3743 [F] s_b_15_0=sym_31751_3_parameter_inst.rt2 (const) */
    /* execute.simd:6355 [D] s_b_15_1 = ReadRegBank 7:s_b_15_0 (u64) */
    auto s_b_15_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_15_1,emitter.const_u8(8));
    }
    /* execute.simd:3744 [D] s_b_15_2 = sym_143099_0_replaced_parameter_addr uint64_t */
    auto s_b_15_2 = emitter.load_local(DV_sym_143099_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_15_3: Store 8 s_b_15_2 <= s_b_15_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_15_2, s_b_15_1, emitter.const_u8(8));
    }
    emitter.store_memory(s_b_15_2, s_b_15_1);
    /* execute.simd:0 [F] s_b_15_4: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_10,  */
  fixed_block_b_16: 
  {
    /* execute.simd:3737 [F] s_b_16_0=sym_31751_3_parameter_inst.rt2 (const) */
    /* execute.simd:6350 [D] s_b_16_1 = ReadRegBank 6:s_b_16_0 (u32) */
    auto s_b_16_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_16_1,emitter.const_u8(4));
    }
    /* execute.simd:3738 [D] s_b_16_2 = sym_143099_0_replaced_parameter_addr uint64_t */
    auto s_b_16_2 = emitter.load_local(DV_sym_143099_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_16_3: Store 4 s_b_16_2 <= s_b_16_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_16_2, s_b_16_1, emitter.const_u8(4));
    }
    emitter.store_memory(s_b_16_2, s_b_16_1);
    /* execute.simd:0 [F] s_b_16_4: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_10,  */
  fixed_block_b_17: 
  {
    /* execute.simd:3731 [F] s_b_17_0=sym_31751_3_parameter_inst.rt2 (const) */
    /* execute.simd:6345 [D] s_b_17_1 = ReadRegBank 5:s_b_17_0 (u16) */
    auto s_b_17_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))), emitter.context().types().u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_17_1,emitter.const_u8(2));
    }
    /* execute.simd:3732 [D] s_b_17_2 = sym_143099_0_replaced_parameter_addr uint64_t */
    auto s_b_17_2 = emitter.load_local(DV_sym_143099_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_17_3: Store 2 s_b_17_2 <= s_b_17_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_17_2, s_b_17_1, emitter.const_u8(2));
    }
    emitter.store_memory(s_b_17_2, s_b_17_1);
    /* execute.simd:0 [F] s_b_17_4: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_10,  */
  fixed_block_b_18: 
  {
    /* execute.simd:3751 [F] s_b_18_0=sym_31751_3_parameter_inst.rt2 (const) */
    /* execute.simd:6360 [D] s_b_18_1 = ReadRegBank 2:s_b_18_0 (u64) */
    auto s_b_18_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_18_1,emitter.const_u8(8));
    }
    /* execute.simd:6361 [D] s_b_18_2 = ReadRegBank 3:s_b_18_0 (u64) */
    auto s_b_18_2 = emitter.load_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(264 + (16 * insn.rt2))),s_b_18_2,emitter.const_u8(8));
    }
    /* execute.simd:3752 [D] s_b_18_3 = sym_143099_0_replaced_parameter_addr uint64_t */
    auto s_b_18_3 = emitter.load_local(DV_sym_143099_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_18_4: Store 8 s_b_18_3 <= s_b_18_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_18_3, s_b_18_1, emitter.const_u8(8));
    }
    emitter.store_memory(s_b_18_3, s_b_18_1);
    /* execute.simd:3753 [F] s_b_18_5 = constant u64 8 (const) */
    /* execute.simd:3753 [D] s_b_18_6 = s_b_18_3+s_b_18_5 */
    auto s_b_18_6 = emitter.add(s_b_18_3, emitter.const_u64((uint64_t)8ULL));
    /* ???:4294967295 [D] s_b_18_7: Store 8 s_b_18_6 <= s_b_18_2 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_18_6, s_b_18_2, emitter.const_u8(8));
    }
    emitter.store_memory(s_b_18_6, s_b_18_2);
    /* execute.simd:0 [F] s_b_18_8: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_10,  */
  fixed_block_b_19: 
  {
    /* execute.simd:3725 [F] s_b_19_0=sym_31751_3_parameter_inst.rt2 (const) */
    /* execute.simd:6340 [D] s_b_19_1 = ReadRegBank 4:s_b_19_0 (u8) */
    auto s_b_19_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))), emitter.context().types().u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rt2))),s_b_19_1,emitter.const_u8(1));
    }
    /* execute.simd:3726 [D] s_b_19_2 = sym_143099_0_replaced_parameter_addr uint64_t */
    auto s_b_19_2 = emitter.load_local(DV_sym_143099_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_19_3: Store 1 s_b_19_2 <= s_b_19_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_19_2, s_b_19_1, emitter.const_u8(1));
    }
    emitter.store_memory(s_b_19_2, s_b_19_1);
    /* execute.simd:0 [F] s_b_19_4: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_10, b_15, b_16, b_17, b_18, b_19,  */
  fixed_block_b_20: 
  {
    /* ???:4294967295 [F] s_b_20_0: Return */
    goto fixed_done;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_strbi(const arm64_decode_a64_LS_REG_UIMM&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  uint32_t CV_sym_148125_1_temporary_value;
  auto DV_sym_148125_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_148154_1_tmp_s_b_19_2 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_148001_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_148018_1__R_s_b_3_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:1457 [F] s_b_0_0=sym_32658_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_1 else b_2 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_2;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2764 [F] s_b_1_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_1_1 = __builtin_get_feature */
    uint32_t s_b_1_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_1_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_1_3 = s_b_1_1==s_b_1_2 (const) */
    uint8_t s_b_1_3 = ((uint8_t)(s_b_1_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_1_4: If s_b_1_3: Jump b_4 else b_5 (const) */
    if (s_b_1_3) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_0,  */
  fixed_block_b_2: 
  {
    /* execute.a64:2796 [F] s_b_2_0=sym_32658_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_2_1 = ReadRegBank 0:s_b_2_0 (u64) */
    auto s_b_2_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_2_1,emitter.const_u8(8));
    }
    /* ???:4294967295 [D] s_b_2_2: sym_148001_0_return_symbol = s_b_2_1, dominates: s_b_3_0  */
    emitter.store_local(DV_sym_148001_0_return_symbol, s_b_2_1);
    /* ???:4294967295 [F] s_b_2_3: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  /* b_2, b_6,  */
  fixed_block_b_3: 
  {
    /* ???:4294967295 [D] s_b_3_0 = sym_148001_0_return_symbol uint64_t */
    auto s_b_3_0 = emitter.load_local(DV_sym_148001_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:1457 [F] s_b_3_1=sym_32658_3_parameter_inst.immu64 (const) */
    /* execute.a64:1457 [D] s_b_3_2 = s_b_3_0+s_b_3_1 */
    auto s_b_3_2 = emitter.add(s_b_3_0, emitter.const_u64(insn.immu64));
    /* execute.a64:1459 [F] s_b_3_3=sym_32658_3_parameter_inst.rt (const) */
    /* ???:4294967295 [D] s_b_3_4: sym_148154_1_tmp_s_b_19_2 = s_b_3_2, dominates: s_b_11_2  */
    emitter.store_local(DV_sym_148154_1_tmp_s_b_19_2, s_b_3_2);
    /* execute.a64:2709 [F] s_b_3_5 = (u32)s_b_3_3 (const) */
    /* execute.a64:2709 [F] s_b_3_6 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_3_7 = s_b_3_5==s_b_3_6 (const) */
    uint8_t s_b_3_7 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_3_8: If s_b_3_7: Jump b_9 else b_10 (const) */
    if (s_b_3_7) 
    {
      goto fixed_block_b_9;
    }
    else 
    {
      goto fixed_block_b_10;
    }
  }
  /* b_1,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2765 [D] s_b_4_0 = ReadReg 21 (u64) */
    auto s_b_4_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_4_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_4_1: sym_148018_1__R_s_b_3_0 = s_b_4_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_148018_1__R_s_b_3_0, s_b_4_0);
    /* execute.a64:2765 [F] s_b_4_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_1,  */
  fixed_block_b_5: 
  {
    /* execute.a64:3075 [F] s_b_5_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_5_1 = __builtin_get_feature */
    uint32_t s_b_5_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_5_2 = (u8)s_b_5_1 (const) */
    /* execute.a64:2767 [F] s_b_5_3 = (u32)s_b_5_2 (const) */
    /* execute.a64:2767 [F] s_b_5_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_5_5 = s_b_5_3==s_b_5_4 (const) */
    uint8_t s_b_5_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_5_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_5_6: If s_b_5_5: Jump b_7 else b_8 (const) */
    if (s_b_5_5) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_8;
    }
  }
  /* b_4, b_7, b_8,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2794 [D] s_b_6_0 = sym_148018_1__R_s_b_3_0 uint64_t */
    auto s_b_6_0 = emitter.load_local(DV_sym_148018_1__R_s_b_3_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_6_1: sym_148001_0_return_symbol = s_b_6_0, dominates: s_b_3_0  */
    emitter.store_local(DV_sym_148001_0_return_symbol, s_b_6_0);
    /* ???:4294967295 [F] s_b_6_2: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  /* b_5,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2768 [D] s_b_7_0 = ReadReg 21 (u64) */
    auto s_b_7_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_7_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_7_1: sym_148018_1__R_s_b_3_0 = s_b_7_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_148018_1__R_s_b_3_0, s_b_7_0);
    /* execute.a64:2768 [F] s_b_7_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_5,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2770 [D] s_b_8_0 = ReadReg 22 (u64) */
    auto s_b_8_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_8_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_8_1: sym_148018_1__R_s_b_3_0 = s_b_8_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_148018_1__R_s_b_3_0, s_b_8_0);
    /* execute.a64:2770 [F] s_b_8_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_3,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2709 [F] s_b_9_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_9_1: sym_148125_1_temporary_value = s_b_9_0 (const), dominates: s_b_11_0  */
    CV_sym_148125_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_148125_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_9_2: Jump b_11 (const) */
    goto fixed_block_b_11;
  }
  /* b_3,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2709 [F] s_b_10_0=sym_32658_3_parameter_inst.rt (const) */
    /* execute.a64:2709 [D] s_b_10_1 = ReadRegBank 1:s_b_10_0 (u32) */
    auto s_b_10_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_10_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_10_2: sym_148125_1_temporary_value = s_b_10_1, dominates: s_b_11_0  */
    emitter.store_local(DV_sym_148125_1_temporary_value, s_b_10_1);
    /* execute.a64:2709 [F] s_b_10_3: Jump b_11 (const) */
    goto fixed_block_b_11;
  }
  /* b_9, b_10,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2709 [D] s_b_11_0 = sym_148125_1_temporary_value uint32_t */
    auto s_b_11_0 = emitter.load_local(DV_sym_148125_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_11_1 = (u64)s_b_11_0 */
    auto s_b_11_1 = emitter.zx(s_b_11_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_11_2 = sym_148154_1_tmp_s_b_19_2 uint64_t */
    auto s_b_11_2 = emitter.load_local(DV_sym_148154_1_tmp_s_b_19_2, emitter.context().types().u64());
    /* execute.a64:1460 [D] s_b_11_3 = (u8)s_b_11_1 */
    auto s_b_11_3 = emitter.truncate(s_b_11_1, emitter.context().types().u8());
    /* ???:4294967295 [D] s_b_11_4: Store 1 s_b_11_2 <= s_b_11_3 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_11_2, s_b_11_3, emitter.const_u8(1));
    }
    emitter.store_memory(s_b_11_2, s_b_11_3);
    /* ???:4294967295 [F] s_b_11_5: Return */
    goto fixed_done;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_stur(const arm64_decode_a64_LS_REG_USIMM&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  uint32_t CV_sym_149865_1_temporary_value;
  auto DV_sym_149865_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_32953_0_address = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_32967_0_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_149741_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_149860_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_149851_1_temporary_value;
  auto DV_sym_149851_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_149758_1__R_s_b_3_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:1411 [F] s_b_0_0=sym_32947_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_4 else b_5 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_19,  */
  fixed_block_b_1: 
  {
    /* execute.a64:1417 [D] s_b_1_0 = sym_32953_0_address uint64_t */
    auto s_b_1_0 = emitter.load_local(DV_sym_32953_0_address, emitter.context().types().u64());
    /* execute.a64:1417 [D] s_b_1_1 = sym_32967_0_value uint64_t */
    auto s_b_1_1 = emitter.load_local(DV_sym_32967_0_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_1_2: Store 8 s_b_1_0 <= s_b_1_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_1_0, s_b_1_1, emitter.const_u8(8));
    }
    emitter.store_memory(s_b_1_0, s_b_1_1);
    /* execute.a64:1417 [F] s_b_1_3: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_1, b_3,  */
  fixed_block_b_2: 
  {
    /* ???:4294967295 [F] s_b_2_0: Return */
    goto fixed_done;
  }
  /* b_19,  */
  fixed_block_b_3: 
  {
    /* execute.a64:1419 [D] s_b_3_0 = sym_32953_0_address uint64_t */
    auto s_b_3_0 = emitter.load_local(DV_sym_32953_0_address, emitter.context().types().u64());
    /* execute.a64:1419 [D] s_b_3_1 = sym_32967_0_value uint64_t */
    auto s_b_3_1 = emitter.load_local(DV_sym_32967_0_value, emitter.context().types().u64());
    /* execute.a64:1419 [D] s_b_3_2 = (u32)s_b_3_1 */
    auto s_b_3_2 = emitter.truncate(s_b_3_1, emitter.context().types().u32());
    /* ???:4294967295 [D] s_b_3_3: Store 4 s_b_3_0 <= s_b_3_2 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_MEMORY, s_b_3_0, s_b_3_2, emitter.const_u8(4));
    }
    emitter.store_memory(s_b_3_0, s_b_3_2);
    /* execute.a64:1419 [F] s_b_3_4: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_0,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2764 [F] s_b_4_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_4_1 = __builtin_get_feature */
    uint32_t s_b_4_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_4_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_4_3 = s_b_4_1==s_b_4_2 (const) */
    uint8_t s_b_4_3 = ((uint8_t)(s_b_4_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_4_4: If s_b_4_3: Jump b_7 else b_8 (const) */
    if (s_b_4_3) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_8;
    }
  }
  /* b_0,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2796 [F] s_b_5_0=sym_32947_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_5_1 = ReadRegBank 0:s_b_5_0 (u64) */
    auto s_b_5_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_5_1,emitter.const_u8(8));
    }
    /* ???:4294967295 [D] s_b_5_2: sym_149741_0_return_symbol = s_b_5_1, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_149741_0_return_symbol, s_b_5_1);
    /* ???:4294967295 [F] s_b_5_3: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_5, b_9,  */
  fixed_block_b_6: 
  {
    /* ???:4294967295 [D] s_b_6_0 = sym_149741_0_return_symbol uint64_t */
    auto s_b_6_0 = emitter.load_local(DV_sym_149741_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:1411 [D] s_b_6_1: sym_32953_0_address = s_b_6_0, dominates:  */
    emitter.store_local(DV_sym_32953_0_address, s_b_6_0);
    /* execute.a64:1412 [F] s_b_6_2=sym_32947_3_parameter_inst.imms64 (const) */
    /* ???:4294967295 [F] s_b_6_3 = (u64)s_b_6_2 (const) */
    /* ???:4294967295 [D] s_b_6_4 = s_b_6_0+s_b_6_3 */
    auto s_b_6_4 = emitter.add(s_b_6_0, emitter.const_u64(((uint64_t)insn.imms64)));
    /* execute.a64:1412 [D] s_b_6_5: sym_32953_0_address = s_b_6_4, dominates: s_b_1_0 s_b_3_0  */
    emitter.store_local(DV_sym_32953_0_address, s_b_6_4);
    /* execute.a64:1414 [F] s_b_6_6=sym_32947_3_parameter_inst.size (const) */
    /* execute.a64:1414 [F] s_b_6_7 = (u32)s_b_6_6 (const) */
    /* execute.a64:1414 [F] s_b_6_8 = constant u32 3 (const) */
    /* execute.a64:1414 [F] s_b_6_9 = s_b_6_7==s_b_6_8 (const) */
    uint8_t s_b_6_9 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)3ULL));
    /* execute.a64:2719 [F] s_b_6_10: If s_b_6_9: Jump b_12 else b_15 (const) */
    if (s_b_6_9) 
    {
      goto fixed_block_b_12;
    }
    else 
    {
      goto fixed_block_b_15;
    }
  }
  /* b_4,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2765 [D] s_b_7_0 = ReadReg 21 (u64) */
    auto s_b_7_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_7_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_7_1: sym_149758_1__R_s_b_3_0 = s_b_7_0, dominates: s_b_9_0  */
    emitter.store_local(DV_sym_149758_1__R_s_b_3_0, s_b_7_0);
    /* execute.a64:2765 [F] s_b_7_2: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_4,  */
  fixed_block_b_8: 
  {
    /* execute.a64:3075 [F] s_b_8_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_8_1 = __builtin_get_feature */
    uint32_t s_b_8_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_8_2 = (u8)s_b_8_1 (const) */
    /* execute.a64:2767 [F] s_b_8_3 = (u32)s_b_8_2 (const) */
    /* execute.a64:2767 [F] s_b_8_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_8_5 = s_b_8_3==s_b_8_4 (const) */
    uint8_t s_b_8_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_8_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_8_6: If s_b_8_5: Jump b_10 else b_11 (const) */
    if (s_b_8_5) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_11;
    }
  }
  /* b_7, b_10, b_11,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2794 [D] s_b_9_0 = sym_149758_1__R_s_b_3_0 uint64_t */
    auto s_b_9_0 = emitter.load_local(DV_sym_149758_1__R_s_b_3_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_9_1: sym_149741_0_return_symbol = s_b_9_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_149741_0_return_symbol, s_b_9_0);
    /* ???:4294967295 [F] s_b_9_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_8,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2768 [D] s_b_10_0 = ReadReg 21 (u64) */
    auto s_b_10_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_10_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_10_1: sym_149758_1__R_s_b_3_0 = s_b_10_0, dominates: s_b_9_0  */
    emitter.store_local(DV_sym_149758_1__R_s_b_3_0, s_b_10_0);
    /* execute.a64:2768 [F] s_b_10_2: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_8,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2770 [D] s_b_11_0 = ReadReg 22 (u64) */
    auto s_b_11_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_11_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_11_1: sym_149758_1__R_s_b_3_0 = s_b_11_0, dominates: s_b_9_0  */
    emitter.store_local(DV_sym_149758_1__R_s_b_3_0, s_b_11_0);
    /* execute.a64:2770 [F] s_b_11_2: Jump b_9 (const) */
    goto fixed_block_b_9;
  }
  /* b_6,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2720 [F] s_b_12_0=sym_32947_3_parameter_inst.rt (const) */
    /* execute.a64:2714 [F] s_b_12_1 = (u32)s_b_12_0 (const) */
    /* execute.a64:2714 [F] s_b_12_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_12_3 = s_b_12_1==s_b_12_2 (const) */
    uint8_t s_b_12_3 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_12_4: If s_b_12_3: Jump b_13 else b_14 (const) */
    if (s_b_12_3) 
    {
      goto fixed_block_b_13;
    }
    else 
    {
      goto fixed_block_b_14;
    }
  }
  /* b_12,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2714 [F] s_b_13_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_13_1: sym_149851_1_temporary_value = s_b_13_0 (const), dominates: s_b_18_0  */
    CV_sym_149851_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_149851_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_13_2: Jump b_18 (const) */
    goto fixed_block_b_18;
  }
  /* b_12,  */
  fixed_block_b_14: 
  {
    /* execute.a64:2714 [F] s_b_14_0=sym_32947_3_parameter_inst.rt (const) */
    /* execute.a64:2714 [D] s_b_14_1 = ReadRegBank 0:s_b_14_0 (u64) */
    auto s_b_14_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_14_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_14_2: sym_149851_1_temporary_value = s_b_14_1, dominates: s_b_18_0  */
    emitter.store_local(DV_sym_149851_1_temporary_value, s_b_14_1);
    /* execute.a64:2714 [F] s_b_14_3: Jump b_18 (const) */
    goto fixed_block_b_18;
  }
  /* b_6,  */
  fixed_block_b_15: 
  {
    /* execute.a64:2722 [F] s_b_15_0=sym_32947_3_parameter_inst.rt (const) */
    /* execute.a64:2709 [F] s_b_15_1 = (u32)s_b_15_0 (const) */
    /* execute.a64:2709 [F] s_b_15_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_15_3 = s_b_15_1==s_b_15_2 (const) */
    uint8_t s_b_15_3 = ((uint8_t)(((uint32_t)insn.rt) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_15_4: If s_b_15_3: Jump b_16 else b_17 (const) */
    if (s_b_15_3) 
    {
      goto fixed_block_b_16;
    }
    else 
    {
      goto fixed_block_b_17;
    }
  }
  /* b_15,  */
  fixed_block_b_16: 
  {
    /* execute.a64:2709 [F] s_b_16_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_16_1: sym_149865_1_temporary_value = s_b_16_0 (const), dominates: s_b_20_0  */
    CV_sym_149865_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_149865_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_16_2: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_15,  */
  fixed_block_b_17: 
  {
    /* execute.a64:2709 [F] s_b_17_0=sym_32947_3_parameter_inst.rt (const) */
    /* execute.a64:2709 [D] s_b_17_1 = ReadRegBank 1:s_b_17_0 (u32) */
    auto s_b_17_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rt))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rt))),s_b_17_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_17_2: sym_149865_1_temporary_value = s_b_17_1, dominates: s_b_20_0  */
    emitter.store_local(DV_sym_149865_1_temporary_value, s_b_17_1);
    /* execute.a64:2709 [F] s_b_17_3: Jump b_20 (const) */
    goto fixed_block_b_20;
  }
  /* b_13, b_14,  */
  fixed_block_b_18: 
  {
    /* execute.a64:2714 [D] s_b_18_0 = sym_149851_1_temporary_value uint64_t */
    auto s_b_18_0 = emitter.load_local(DV_sym_149851_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_18_1: sym_149860_0_return_symbol = s_b_18_0, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_149860_0_return_symbol, s_b_18_0);
    /* ???:4294967295 [F] s_b_18_2: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_18, b_20,  */
  fixed_block_b_19: 
  {
    /* ???:4294967295 [D] s_b_19_0 = sym_149860_0_return_symbol uint64_t */
    auto s_b_19_0 = emitter.load_local(DV_sym_149860_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:1414 [D] s_b_19_1: sym_32967_0_value = s_b_19_0, dominates: s_b_1_1 s_b_3_1  */
    emitter.store_local(DV_sym_32967_0_value, s_b_19_0);
    /* execute.a64:1416 [F] s_b_19_2=sym_32947_3_parameter_inst.size (const) */
    /* execute.a64:1416 [F] s_b_19_3 = (u32)s_b_19_2 (const) */
    /* execute.a64:1416 [F] s_b_19_4 = constant u32 3 (const) */
    /* execute.a64:1416 [F] s_b_19_5 = s_b_19_3==s_b_19_4 (const) */
    uint8_t s_b_19_5 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)3ULL));
    /* execute.a64:1416 [F] s_b_19_6: If s_b_19_5: Jump b_1 else b_3 (const) */
    if (s_b_19_5) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_16, b_17,  */
  fixed_block_b_20: 
  {
    /* execute.a64:2709 [D] s_b_20_0 = sym_149865_1_temporary_value uint32_t */
    auto s_b_20_0 = emitter.load_local(DV_sym_149865_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_20_1 = (u64)s_b_20_0 */
    auto s_b_20_1 = emitter.zx(s_b_20_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_20_2: sym_149860_0_return_symbol = s_b_20_1, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_149860_0_return_symbol, s_b_20_1);
    /* ???:4294967295 [F] s_b_20_3: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_sub_sreg(const arm64_decode_a64_ADD_SUB_SREG&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  uint64_t CV_sym_153495_1_temporary_value;
  auto DV_sym_153495_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_153690_1_temporary_value;
  auto DV_sym_153690_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_153677_3_parameter_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_33346_0_op2 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_33364_0_result = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_33389_0_result = emitter.alloc_local(emitter.context().types().u32(), false);
  uint64_t CV_sym_153609_1_temporary_value;
  auto DV_sym_153609_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_153350_1_temporary_value;
  auto DV_sym_153350_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  int64_t CV_sym_153468_1_temporary_value;
  auto DV_sym_153468_1_temporary_value = emitter.alloc_local(emitter.context().types().s64(), false);
  uint64_t CV_sym_153302_1_temporary_value;
  auto DV_sym_153302_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_153329_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_153638_1_temporary_value;
  auto DV_sym_153638_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_153429_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  int64_t CV_sym_153451_1_temporary_value;
  auto DV_sym_153451_1_temporary_value = emitter.alloc_local(emitter.context().types().s64(), false);
  uint32_t CV_sym_153368_1_temporary_value;
  auto DV_sym_153368_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  uint64_t CV_sym_153245_0_return_symbol;
  auto DV_sym_153245_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_153402_1_temporary_value;
  auto DV_sym_153402_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_153377_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_153558_1_temporary_value;
  auto DV_sym_153558_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_153479_0_return_symbol = emitter.alloc_local(emitter.context().types().s64(), false);
  uint32_t CV_sym_153420_1_temporary_value;
  auto DV_sym_153420_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  uint32_t CV_sym_153320_1_temporary_value;
  auto DV_sym_153320_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  uint32_t CV_sym_153510_1_temporary_value;
  auto DV_sym_153510_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_153597_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:1994 [F] s_b_0_0=sym_33339_3_parameter_inst.imm6 (const) */
    /* execute.a64:2635 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2635 [F] s_b_0_2 = constant u32 0 (const) */
    /* execute.a64:2635 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.imm6) == (uint32_t)0ULL));
    /* execute.a64:2635 [F] s_b_0_4: If s_b_0_3: Jump b_10 else b_13 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_10;
    }
    else 
    {
      goto fixed_block_b_13;
    }
  }
  /* b_19,  */
  fixed_block_b_1: 
  {
    /* execute.a64:1999 [F] s_b_1_0=sym_33339_3_parameter_inst.S (const) */
    /* execute.a64:1999 [F] s_b_1_1: If s_b_1_0: Jump b_4 else b_6 (const) */
    if (insn.S) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_5, b_8, b_65, b_72,  */
  fixed_block_b_2: 
  {
    /* ???:4294967295 [F] s_b_2_0: Return */
    goto fixed_done;
  }
  /* b_19,  */
  fixed_block_b_3: 
  {
    /* execute.a64:2009 [F] s_b_3_0=sym_33339_3_parameter_inst.S (const) */
    /* execute.a64:2009 [F] s_b_3_1: If s_b_3_0: Jump b_7 else b_9 (const) */
    if (insn.S) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_9;
    }
  }
  /* b_1,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2000 [F] s_b_4_0=sym_33339_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [F] s_b_4_1 = (u32)s_b_4_0 (const) */
    /* execute.a64:2714 [F] s_b_4_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_4_3 = s_b_4_1==s_b_4_2 (const) */
    uint8_t s_b_4_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_4_4: If s_b_4_3: Jump b_62 else b_64 (const) */
    if (s_b_4_3) 
    {
      goto fixed_block_b_62;
    }
    else 
    {
      goto fixed_block_b_64;
    }
  }
  /* b_63, b_67,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2005 [F] s_b_5_0=sym_33339_3_parameter_inst.rd (const) */
    /* execute.a64:2005 [D] s_b_5_1 = sym_33364_0_result uint64_t */
    auto s_b_5_1 = emitter.load_local(DV_sym_33364_0_result, emitter.context().types().u64());
    /* execute.a64:2005 [D] s_b_5_2: sym_153597_3_parameter_value = s_b_5_1, dominates: s_b_65_1  */
    emitter.store_local(DV_sym_153597_3_parameter_value, s_b_5_1);
    /* execute.a64:2745 [F] s_b_5_3 = (u32)s_b_5_0 (const) */
    /* execute.a64:2745 [F] s_b_5_4 = constant u32 1f (const) */
    /* execute.a64:2745 [F] s_b_5_5 = s_b_5_3==s_b_5_4 (const) */
    uint8_t s_b_5_5 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2745 [F] s_b_5_6: If s_b_5_5: Jump b_2 else b_65 (const) */
    if (s_b_5_5) 
    {
      goto fixed_block_b_2;
    }
    else 
    {
      goto fixed_block_b_65;
    }
  }
  /* b_1,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2002 [F] s_b_6_0=sym_33339_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [F] s_b_6_1 = (u32)s_b_6_0 (const) */
    /* execute.a64:2714 [F] s_b_6_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_6_3 = s_b_6_1==s_b_6_2 (const) */
    uint8_t s_b_6_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_6_4: If s_b_6_3: Jump b_66 else b_68 (const) */
    if (s_b_6_3) 
    {
      goto fixed_block_b_66;
    }
    else 
    {
      goto fixed_block_b_68;
    }
  }
  /* b_3,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2010 [F] s_b_7_0=sym_33339_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [F] s_b_7_1 = (u32)s_b_7_0 (const) */
    /* execute.a64:2709 [F] s_b_7_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_7_3 = s_b_7_1==s_b_7_2 (const) */
    uint8_t s_b_7_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_7_4: If s_b_7_3: Jump b_69 else b_71 (const) */
    if (s_b_7_3) 
    {
      goto fixed_block_b_69;
    }
    else 
    {
      goto fixed_block_b_71;
    }
  }
  /* b_70, b_74,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2015 [F] s_b_8_0=sym_33339_3_parameter_inst.rd (const) */
    /* execute.a64:2015 [D] s_b_8_1 = sym_33389_0_result uint32_t */
    auto s_b_8_1 = emitter.load_local(DV_sym_33389_0_result, emitter.context().types().u32());
    /* execute.a64:2015 [D] s_b_8_2: sym_153677_3_parameter_value = s_b_8_1, dominates: s_b_72_1  */
    emitter.store_local(DV_sym_153677_3_parameter_value, s_b_8_1);
    /* execute.a64:2737 [F] s_b_8_3 = (u32)s_b_8_0 (const) */
    /* execute.a64:2737 [F] s_b_8_4 = constant u32 1f (const) */
    /* execute.a64:2737 [F] s_b_8_5 = s_b_8_3==s_b_8_4 (const) */
    uint8_t s_b_8_5 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
    /* execute.a64:2737 [F] s_b_8_6: If s_b_8_5: Jump b_2 else b_72 (const) */
    if (s_b_8_5) 
    {
      goto fixed_block_b_2;
    }
    else 
    {
      goto fixed_block_b_72;
    }
  }
  /* b_3,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2012 [F] s_b_9_0=sym_33339_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [F] s_b_9_1 = (u32)s_b_9_0 (const) */
    /* execute.a64:2709 [F] s_b_9_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_9_3 = s_b_9_1==s_b_9_2 (const) */
    uint8_t s_b_9_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_9_4: If s_b_9_3: Jump b_73 else b_75 (const) */
    if (s_b_9_3) 
    {
      goto fixed_block_b_73;
    }
    else 
    {
      goto fixed_block_b_75;
    }
  }
  /* b_0,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2635 [F] s_b_10_0=sym_33339_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_10_1: If s_b_10_0: Jump b_11 else b_12 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_11;
    }
    else 
    {
      goto fixed_block_b_12;
    }
  }
  /* b_10,  */
  fixed_block_b_11: 
  {
    /* execute.a64:2720 [F] s_b_11_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [F] s_b_11_1 = (u32)s_b_11_0 (const) */
    /* execute.a64:2714 [F] s_b_11_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_11_3 = s_b_11_1==s_b_11_2 (const) */
    uint8_t s_b_11_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_11_4: If s_b_11_3: Jump b_32 else b_33 (const) */
    if (s_b_11_3) 
    {
      goto fixed_block_b_32;
    }
    else 
    {
      goto fixed_block_b_33;
    }
  }
  /* b_10,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2722 [F] s_b_12_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [F] s_b_12_1 = (u32)s_b_12_0 (const) */
    /* execute.a64:2709 [F] s_b_12_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_12_3 = s_b_12_1==s_b_12_2 (const) */
    uint8_t s_b_12_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_12_4: If s_b_12_3: Jump b_35 else b_36 (const) */
    if (s_b_12_3) 
    {
      goto fixed_block_b_35;
    }
    else 
    {
      goto fixed_block_b_36;
    }
  }
  /* b_0,  */
  fixed_block_b_13: 
  {
    /* execute.a64:2637 [F] s_b_13_0=sym_33339_3_parameter_inst.shift (const) */
    /* execute.a64:2638 [F] s_b_13_1 = constant s32 0 (const) */
    /* execute.a64:2642 [F] s_b_13_2 = constant s32 1 (const) */
    /* execute.a64:2646 [F] s_b_13_3 = constant s32 2 (const) */
    /* execute.a64:2650 [F] s_b_13_4 = constant s32 3 (const) */
    /* execute.a64:2637 [F] s_b_13_5: Switch s_b_13_0: < <todo> > def b_14 (const) -> b_15, b_18, b_14, b_17, b_16,  */
    switch (insn.shift) 
    {
    case (int32_t)1ULL:
      goto fixed_block_b_16;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_18;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_17;
      break;
    case (int32_t)0ULL:
      goto fixed_block_b_15;
      break;
    default:
      goto fixed_block_b_14;
    }
  }
  /* b_13,  */
  fixed_block_b_14: 
  {
    /* execute.a64:2660 [D] s_b_14_0 = trap */
    emitter.raise(emitter.const_u8(0));
    /* execute.a64:2661 [F] s_b_14_1 = constant u64 0 (const) */
    /* ???:4294967295 [F] s_b_14_2: sym_153245_0_return_symbol = s_b_14_1 (const), dominates: s_b_19_0  */
    CV_sym_153245_0_return_symbol = (uint64_t)0ULL;
    emitter.store_local(DV_sym_153245_0_return_symbol, emitter.const_u64((uint64_t)0ULL));
    /* ???:4294967295 [F] s_b_14_3: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_13,  */
  fixed_block_b_15: 
  {
    /* execute.a64:2640 [F] s_b_15_0=sym_33339_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_15_1: If s_b_15_0: Jump b_20 else b_21 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_20;
    }
    else 
    {
      goto fixed_block_b_21;
    }
  }
  /* b_13,  */
  fixed_block_b_16: 
  {
    /* execute.a64:2644 [F] s_b_16_0=sym_33339_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_16_1: If s_b_16_0: Jump b_22 else b_23 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_22;
    }
    else 
    {
      goto fixed_block_b_23;
    }
  }
  /* b_13,  */
  fixed_block_b_17: 
  {
    /* execute.a64:2648 [F] s_b_17_0=sym_33339_3_parameter_inst.sf (const) */
    /* execute.a64:2728 [F] s_b_17_1: If s_b_17_0: Jump b_24 else b_25 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_24;
    }
    else 
    {
      goto fixed_block_b_25;
    }
  }
  /* b_13,  */
  fixed_block_b_18: 
  {
    /* execute.a64:2652 [F] s_b_18_0=sym_33339_3_parameter_inst.sf (const) */
    /* execute.a64:2652 [F] s_b_18_1: If s_b_18_0: Jump b_26 else b_27 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_26;
    }
    else 
    {
      goto fixed_block_b_27;
    }
  }
  /* b_14, b_38, b_45, b_52, b_59, b_60, b_61,  */
  fixed_block_b_19: 
  {
    /* ???:4294967295 [D] s_b_19_0 = sym_153245_0_return_symbol uint64_t */
    auto s_b_19_0 = emitter.load_local(DV_sym_153245_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:1994 [D] s_b_19_1: sym_33346_0_op2 = s_b_19_0, dominates: s_b_63_1 s_b_67_1 s_b_70_1 s_b_74_1  */
    emitter.store_local(DV_sym_33346_0_op2, s_b_19_0);
    /* execute.a64:1996 [F] s_b_19_2=sym_33339_3_parameter_inst.sf (const) */
    /* execute.a64:1996 [F] s_b_19_3: If s_b_19_2: Jump b_1 else b_3 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_15,  */
  fixed_block_b_20: 
  {
    /* execute.a64:2720 [F] s_b_20_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [F] s_b_20_1 = (u32)s_b_20_0 (const) */
    /* execute.a64:2714 [F] s_b_20_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_20_3 = s_b_20_1==s_b_20_2 (const) */
    uint8_t s_b_20_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_20_4: If s_b_20_3: Jump b_39 else b_40 (const) */
    if (s_b_20_3) 
    {
      goto fixed_block_b_39;
    }
    else 
    {
      goto fixed_block_b_40;
    }
  }
  /* b_15,  */
  fixed_block_b_21: 
  {
    /* execute.a64:2722 [F] s_b_21_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [F] s_b_21_1 = (u32)s_b_21_0 (const) */
    /* execute.a64:2709 [F] s_b_21_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_21_3 = s_b_21_1==s_b_21_2 (const) */
    uint8_t s_b_21_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_21_4: If s_b_21_3: Jump b_42 else b_43 (const) */
    if (s_b_21_3) 
    {
      goto fixed_block_b_42;
    }
    else 
    {
      goto fixed_block_b_43;
    }
  }
  /* b_16,  */
  fixed_block_b_22: 
  {
    /* execute.a64:2720 [F] s_b_22_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [F] s_b_22_1 = (u32)s_b_22_0 (const) */
    /* execute.a64:2714 [F] s_b_22_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_22_3 = s_b_22_1==s_b_22_2 (const) */
    uint8_t s_b_22_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_22_4: If s_b_22_3: Jump b_46 else b_47 (const) */
    if (s_b_22_3) 
    {
      goto fixed_block_b_46;
    }
    else 
    {
      goto fixed_block_b_47;
    }
  }
  /* b_16,  */
  fixed_block_b_23: 
  {
    /* execute.a64:2722 [F] s_b_23_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [F] s_b_23_1 = (u32)s_b_23_0 (const) */
    /* execute.a64:2709 [F] s_b_23_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_23_3 = s_b_23_1==s_b_23_2 (const) */
    uint8_t s_b_23_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_23_4: If s_b_23_3: Jump b_49 else b_50 (const) */
    if (s_b_23_3) 
    {
      goto fixed_block_b_49;
    }
    else 
    {
      goto fixed_block_b_50;
    }
  }
  /* b_17,  */
  fixed_block_b_24: 
  {
    /* execute.a64:2729 [F] s_b_24_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2729 [F] s_b_24_1 = (u32)s_b_24_0 (const) */
    /* execute.a64:2729 [F] s_b_24_2 = constant u32 1f (const) */
    /* execute.a64:2729 [F] s_b_24_3 = s_b_24_1==s_b_24_2 (const) */
    uint8_t s_b_24_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2729 [F] s_b_24_4: If s_b_24_3: Jump b_53 else b_54 (const) */
    if (s_b_24_3) 
    {
      goto fixed_block_b_53;
    }
    else 
    {
      goto fixed_block_b_54;
    }
  }
  /* b_17,  */
  fixed_block_b_25: 
  {
    /* execute.a64:2731 [F] s_b_25_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2731 [F] s_b_25_1 = (u32)s_b_25_0 (const) */
    /* execute.a64:2731 [F] s_b_25_2 = constant u32 1f (const) */
    /* execute.a64:2731 [F] s_b_25_3 = s_b_25_1==s_b_25_2 (const) */
    uint8_t s_b_25_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2731 [F] s_b_25_4: If s_b_25_3: Jump b_56 else b_57 (const) */
    if (s_b_25_3) 
    {
      goto fixed_block_b_56;
    }
    else 
    {
      goto fixed_block_b_57;
    }
  }
  /* b_18,  */
  fixed_block_b_26: 
  {
    /* execute.a64:2653 [F] s_b_26_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [F] s_b_26_1 = (u32)s_b_26_0 (const) */
    /* execute.a64:2714 [F] s_b_26_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_26_3 = s_b_26_1==s_b_26_2 (const) */
    uint8_t s_b_26_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_26_4: If s_b_26_3: Jump b_28 else b_29 (const) */
    if (s_b_26_3) 
    {
      goto fixed_block_b_28;
    }
    else 
    {
      goto fixed_block_b_29;
    }
  }
  /* b_18,  */
  fixed_block_b_27: 
  {
    /* execute.a64:2655 [F] s_b_27_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [F] s_b_27_1 = (u32)s_b_27_0 (const) */
    /* execute.a64:2709 [F] s_b_27_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_27_3 = s_b_27_1==s_b_27_2 (const) */
    uint8_t s_b_27_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_27_4: If s_b_27_3: Jump b_30 else b_31 (const) */
    if (s_b_27_3) 
    {
      goto fixed_block_b_30;
    }
    else 
    {
      goto fixed_block_b_31;
    }
  }
  /* b_26,  */
  fixed_block_b_28: 
  {
    /* execute.a64:2714 [F] s_b_28_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_28_1: sym_153495_1_temporary_value = s_b_28_0 (const), dominates: s_b_60_0  */
    CV_sym_153495_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_153495_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_28_2: Jump b_60 (const) */
    goto fixed_block_b_60;
  }
  /* b_26,  */
  fixed_block_b_29: 
  {
    /* execute.a64:2714 [F] s_b_29_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_29_1 = ReadRegBank 0:s_b_29_0 (u64) */
    auto s_b_29_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_29_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_29_2: sym_153495_1_temporary_value = s_b_29_1, dominates: s_b_60_0  */
    emitter.store_local(DV_sym_153495_1_temporary_value, s_b_29_1);
    /* execute.a64:2714 [F] s_b_29_3: Jump b_60 (const) */
    goto fixed_block_b_60;
  }
  /* b_27,  */
  fixed_block_b_30: 
  {
    /* execute.a64:2709 [F] s_b_30_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_30_1: sym_153510_1_temporary_value = s_b_30_0 (const), dominates: s_b_61_0  */
    CV_sym_153510_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_153510_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_30_2: Jump b_61 (const) */
    goto fixed_block_b_61;
  }
  /* b_27,  */
  fixed_block_b_31: 
  {
    /* execute.a64:2709 [F] s_b_31_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [D] s_b_31_1 = ReadRegBank 1:s_b_31_0 (u32) */
    auto s_b_31_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_31_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_31_2: sym_153510_1_temporary_value = s_b_31_1, dominates: s_b_61_0  */
    emitter.store_local(DV_sym_153510_1_temporary_value, s_b_31_1);
    /* execute.a64:2709 [F] s_b_31_3: Jump b_61 (const) */
    goto fixed_block_b_61;
  }
  /* b_11,  */
  fixed_block_b_32: 
  {
    /* execute.a64:2714 [F] s_b_32_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_32_1: sym_153302_1_temporary_value = s_b_32_0 (const), dominates: s_b_34_0  */
    CV_sym_153302_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_153302_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_32_2: Jump b_34 (const) */
    goto fixed_block_b_34;
  }
  /* b_11,  */
  fixed_block_b_33: 
  {
    /* execute.a64:2714 [F] s_b_33_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_33_1 = ReadRegBank 0:s_b_33_0 (u64) */
    auto s_b_33_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_33_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_33_2: sym_153302_1_temporary_value = s_b_33_1, dominates: s_b_34_0  */
    emitter.store_local(DV_sym_153302_1_temporary_value, s_b_33_1);
    /* execute.a64:2714 [F] s_b_33_3: Jump b_34 (const) */
    goto fixed_block_b_34;
  }
  /* b_32, b_33,  */
  fixed_block_b_34: 
  {
    /* execute.a64:2714 [D] s_b_34_0 = sym_153302_1_temporary_value uint64_t */
    auto s_b_34_0 = emitter.load_local(DV_sym_153302_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_34_1: sym_153329_0_return_symbol = s_b_34_0, dominates: s_b_38_0  */
    emitter.store_local(DV_sym_153329_0_return_symbol, s_b_34_0);
    /* ???:4294967295 [F] s_b_34_2: Jump b_38 (const) */
    goto fixed_block_b_38;
  }
  /* b_12,  */
  fixed_block_b_35: 
  {
    /* execute.a64:2709 [F] s_b_35_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_35_1: sym_153320_1_temporary_value = s_b_35_0 (const), dominates: s_b_37_0  */
    CV_sym_153320_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_153320_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_35_2: Jump b_37 (const) */
    goto fixed_block_b_37;
  }
  /* b_12,  */
  fixed_block_b_36: 
  {
    /* execute.a64:2709 [F] s_b_36_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [D] s_b_36_1 = ReadRegBank 1:s_b_36_0 (u32) */
    auto s_b_36_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_36_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_36_2: sym_153320_1_temporary_value = s_b_36_1, dominates: s_b_37_0  */
    emitter.store_local(DV_sym_153320_1_temporary_value, s_b_36_1);
    /* execute.a64:2709 [F] s_b_36_3: Jump b_37 (const) */
    goto fixed_block_b_37;
  }
  /* b_35, b_36,  */
  fixed_block_b_37: 
  {
    /* execute.a64:2709 [D] s_b_37_0 = sym_153320_1_temporary_value uint32_t */
    auto s_b_37_0 = emitter.load_local(DV_sym_153320_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_37_1 = (u64)s_b_37_0 */
    auto s_b_37_1 = emitter.zx(s_b_37_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_37_2: sym_153329_0_return_symbol = s_b_37_1, dominates: s_b_38_0  */
    emitter.store_local(DV_sym_153329_0_return_symbol, s_b_37_1);
    /* ???:4294967295 [F] s_b_37_3: Jump b_38 (const) */
    goto fixed_block_b_38;
  }
  /* b_34, b_37,  */
  fixed_block_b_38: 
  {
    /* ???:4294967295 [D] s_b_38_0 = sym_153329_0_return_symbol uint64_t */
    auto s_b_38_0 = emitter.load_local(DV_sym_153329_0_return_symbol, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_38_1: sym_153245_0_return_symbol = s_b_38_0, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_153245_0_return_symbol, s_b_38_0);
    /* ???:4294967295 [F] s_b_38_2: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_20,  */
  fixed_block_b_39: 
  {
    /* execute.a64:2714 [F] s_b_39_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_39_1: sym_153350_1_temporary_value = s_b_39_0 (const), dominates: s_b_41_0  */
    CV_sym_153350_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_153350_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_39_2: Jump b_41 (const) */
    goto fixed_block_b_41;
  }
  /* b_20,  */
  fixed_block_b_40: 
  {
    /* execute.a64:2714 [F] s_b_40_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_40_1 = ReadRegBank 0:s_b_40_0 (u64) */
    auto s_b_40_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_40_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_40_2: sym_153350_1_temporary_value = s_b_40_1, dominates: s_b_41_0  */
    emitter.store_local(DV_sym_153350_1_temporary_value, s_b_40_1);
    /* execute.a64:2714 [F] s_b_40_3: Jump b_41 (const) */
    goto fixed_block_b_41;
  }
  /* b_39, b_40,  */
  fixed_block_b_41: 
  {
    /* execute.a64:2714 [D] s_b_41_0 = sym_153350_1_temporary_value uint64_t */
    auto s_b_41_0 = emitter.load_local(DV_sym_153350_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_41_1: sym_153377_0_return_symbol = s_b_41_0, dominates: s_b_45_0  */
    emitter.store_local(DV_sym_153377_0_return_symbol, s_b_41_0);
    /* ???:4294967295 [F] s_b_41_2: Jump b_45 (const) */
    goto fixed_block_b_45;
  }
  /* b_21,  */
  fixed_block_b_42: 
  {
    /* execute.a64:2709 [F] s_b_42_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_42_1: sym_153368_1_temporary_value = s_b_42_0 (const), dominates: s_b_44_0  */
    CV_sym_153368_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_153368_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_42_2: Jump b_44 (const) */
    goto fixed_block_b_44;
  }
  /* b_21,  */
  fixed_block_b_43: 
  {
    /* execute.a64:2709 [F] s_b_43_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [D] s_b_43_1 = ReadRegBank 1:s_b_43_0 (u32) */
    auto s_b_43_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_43_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_43_2: sym_153368_1_temporary_value = s_b_43_1, dominates: s_b_44_0  */
    emitter.store_local(DV_sym_153368_1_temporary_value, s_b_43_1);
    /* execute.a64:2709 [F] s_b_43_3: Jump b_44 (const) */
    goto fixed_block_b_44;
  }
  /* b_42, b_43,  */
  fixed_block_b_44: 
  {
    /* execute.a64:2709 [D] s_b_44_0 = sym_153368_1_temporary_value uint32_t */
    auto s_b_44_0 = emitter.load_local(DV_sym_153368_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_44_1 = (u64)s_b_44_0 */
    auto s_b_44_1 = emitter.zx(s_b_44_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_44_2: sym_153377_0_return_symbol = s_b_44_1, dominates: s_b_45_0  */
    emitter.store_local(DV_sym_153377_0_return_symbol, s_b_44_1);
    /* ???:4294967295 [F] s_b_44_3: Jump b_45 (const) */
    goto fixed_block_b_45;
  }
  /* b_41, b_44,  */
  fixed_block_b_45: 
  {
    /* ???:4294967295 [D] s_b_45_0 = sym_153377_0_return_symbol uint64_t */
    auto s_b_45_0 = emitter.load_local(DV_sym_153377_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:2640 [F] s_b_45_1=sym_33339_3_parameter_inst.imm6 (const) */
    /* execute.a64:2640 [F] s_b_45_2 = (u64)s_b_45_1 (const) */
    /* execute.a64:2640 [D] s_b_45_3 = s_b_45_0<<s_b_45_2 */
    auto s_b_45_3 = emitter.shl(s_b_45_0, emitter.const_u64(((uint64_t)insn.imm6)));
    /* ???:4294967295 [D] s_b_45_4: sym_153245_0_return_symbol = s_b_45_3, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_153245_0_return_symbol, s_b_45_3);
    /* ???:4294967295 [F] s_b_45_5: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_22,  */
  fixed_block_b_46: 
  {
    /* execute.a64:2714 [F] s_b_46_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_46_1: sym_153402_1_temporary_value = s_b_46_0 (const), dominates: s_b_48_0  */
    CV_sym_153402_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_153402_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_46_2: Jump b_48 (const) */
    goto fixed_block_b_48;
  }
  /* b_22,  */
  fixed_block_b_47: 
  {
    /* execute.a64:2714 [F] s_b_47_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_47_1 = ReadRegBank 0:s_b_47_0 (u64) */
    auto s_b_47_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_47_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_47_2: sym_153402_1_temporary_value = s_b_47_1, dominates: s_b_48_0  */
    emitter.store_local(DV_sym_153402_1_temporary_value, s_b_47_1);
    /* execute.a64:2714 [F] s_b_47_3: Jump b_48 (const) */
    goto fixed_block_b_48;
  }
  /* b_46, b_47,  */
  fixed_block_b_48: 
  {
    /* execute.a64:2714 [D] s_b_48_0 = sym_153402_1_temporary_value uint64_t */
    auto s_b_48_0 = emitter.load_local(DV_sym_153402_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_48_1: sym_153429_0_return_symbol = s_b_48_0, dominates: s_b_52_0  */
    emitter.store_local(DV_sym_153429_0_return_symbol, s_b_48_0);
    /* ???:4294967295 [F] s_b_48_2: Jump b_52 (const) */
    goto fixed_block_b_52;
  }
  /* b_23,  */
  fixed_block_b_49: 
  {
    /* execute.a64:2709 [F] s_b_49_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_49_1: sym_153420_1_temporary_value = s_b_49_0 (const), dominates: s_b_51_0  */
    CV_sym_153420_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_153420_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_49_2: Jump b_51 (const) */
    goto fixed_block_b_51;
  }
  /* b_23,  */
  fixed_block_b_50: 
  {
    /* execute.a64:2709 [F] s_b_50_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [D] s_b_50_1 = ReadRegBank 1:s_b_50_0 (u32) */
    auto s_b_50_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_50_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_50_2: sym_153420_1_temporary_value = s_b_50_1, dominates: s_b_51_0  */
    emitter.store_local(DV_sym_153420_1_temporary_value, s_b_50_1);
    /* execute.a64:2709 [F] s_b_50_3: Jump b_51 (const) */
    goto fixed_block_b_51;
  }
  /* b_49, b_50,  */
  fixed_block_b_51: 
  {
    /* execute.a64:2709 [D] s_b_51_0 = sym_153420_1_temporary_value uint32_t */
    auto s_b_51_0 = emitter.load_local(DV_sym_153420_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_51_1 = (u64)s_b_51_0 */
    auto s_b_51_1 = emitter.zx(s_b_51_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_51_2: sym_153429_0_return_symbol = s_b_51_1, dominates: s_b_52_0  */
    emitter.store_local(DV_sym_153429_0_return_symbol, s_b_51_1);
    /* ???:4294967295 [F] s_b_51_3: Jump b_52 (const) */
    goto fixed_block_b_52;
  }
  /* b_48, b_51,  */
  fixed_block_b_52: 
  {
    /* ???:4294967295 [D] s_b_52_0 = sym_153429_0_return_symbol uint64_t */
    auto s_b_52_0 = emitter.load_local(DV_sym_153429_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:2644 [F] s_b_52_1=sym_33339_3_parameter_inst.imm6 (const) */
    /* execute.a64:2644 [F] s_b_52_2 = (u64)s_b_52_1 (const) */
    /* execute.a64:2644 [D] s_b_52_3 = s_b_52_0>>s_b_52_2 */
    auto s_b_52_3 = emitter.shr(s_b_52_0, emitter.const_u64(((uint64_t)insn.imm6)));
    /* ???:4294967295 [D] s_b_52_4: sym_153245_0_return_symbol = s_b_52_3, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_153245_0_return_symbol, s_b_52_3);
    /* ???:4294967295 [F] s_b_52_5: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_24,  */
  fixed_block_b_53: 
  {
    /* execute.a64:2729 [F] s_b_53_0 = constant s64 0 (const) */
    /* execute.a64:2729 [F] s_b_53_1: sym_153451_1_temporary_value = s_b_53_0 (const), dominates: s_b_55_0  */
    CV_sym_153451_1_temporary_value = (int64_t)0ULL;
    emitter.store_local(DV_sym_153451_1_temporary_value, emitter.const_s64((int64_t)0ULL));
    /* execute.a64:2729 [F] s_b_53_2: Jump b_55 (const) */
    goto fixed_block_b_55;
  }
  /* b_24,  */
  fixed_block_b_54: 
  {
    /* execute.a64:2729 [F] s_b_54_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2729 [D] s_b_54_1 = ReadRegBank 0:s_b_54_0 (u64) */
    auto s_b_54_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_54_1,emitter.const_u8(8));
    }
    /* execute.a64:2729 [D] s_b_54_2 = (s64)s_b_54_1 */
    auto s_b_54_2 = emitter.reinterpret(s_b_54_1, emitter.context().types().s64());
    /* execute.a64:2729 [D] s_b_54_3: sym_153451_1_temporary_value = s_b_54_2, dominates: s_b_55_0  */
    emitter.store_local(DV_sym_153451_1_temporary_value, s_b_54_2);
    /* execute.a64:2729 [F] s_b_54_4: Jump b_55 (const) */
    goto fixed_block_b_55;
  }
  /* b_53, b_54,  */
  fixed_block_b_55: 
  {
    /* execute.a64:2729 [D] s_b_55_0 = sym_153451_1_temporary_value int64_t */
    auto s_b_55_0 = emitter.load_local(DV_sym_153451_1_temporary_value, emitter.context().types().s64());
    /* ???:4294967295 [D] s_b_55_1: sym_153479_0_return_symbol = s_b_55_0, dominates: s_b_59_0  */
    emitter.store_local(DV_sym_153479_0_return_symbol, s_b_55_0);
    /* ???:4294967295 [F] s_b_55_2: Jump b_59 (const) */
    goto fixed_block_b_59;
  }
  /* b_25,  */
  fixed_block_b_56: 
  {
    /* execute.a64:2731 [F] s_b_56_0 = constant s64 0 (const) */
    /* execute.a64:2731 [F] s_b_56_1: sym_153468_1_temporary_value = s_b_56_0 (const), dominates: s_b_58_0  */
    CV_sym_153468_1_temporary_value = (int64_t)0ULL;
    emitter.store_local(DV_sym_153468_1_temporary_value, emitter.const_s64((int64_t)0ULL));
    /* execute.a64:2731 [F] s_b_56_2: Jump b_58 (const) */
    goto fixed_block_b_58;
  }
  /* b_25,  */
  fixed_block_b_57: 
  {
    /* execute.a64:2731 [F] s_b_57_0=sym_33339_3_parameter_inst.rm (const) */
    /* execute.a64:2731 [D] s_b_57_1 = ReadRegBank 1:s_b_57_0 (u32) */
    auto s_b_57_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_57_1,emitter.const_u8(4));
    }
    /* execute.a64:2731 [D] s_b_57_2 = (s32)s_b_57_1 */
    auto s_b_57_2 = emitter.reinterpret(s_b_57_1, emitter.context().types().s32());
    /* execute.a64:2731 [D] s_b_57_3 = (s64)s_b_57_2 */
    auto s_b_57_3 = emitter.sx(s_b_57_2, emitter.context().types().s64());
    /* execute.a64:2731 [D] s_b_57_4: sym_153468_1_temporary_value = s_b_57_3, dominates: s_b_58_0  */
    emitter.store_local(DV_sym_153468_1_temporary_value, s_b_57_3);
    /* execute.a64:2731 [F] s_b_57_5: Jump b_58 (const) */
    goto fixed_block_b_58;
  }
  /* b_56, b_57,  */
  fixed_block_b_58: 
  {
    /* execute.a64:2731 [D] s_b_58_0 = sym_153468_1_temporary_value int64_t */
    auto s_b_58_0 = emitter.load_local(DV_sym_153468_1_temporary_value, emitter.context().types().s64());
    /* ???:4294967295 [D] s_b_58_1: sym_153479_0_return_symbol = s_b_58_0, dominates: s_b_59_0  */
    emitter.store_local(DV_sym_153479_0_return_symbol, s_b_58_0);
    /* ???:4294967295 [F] s_b_58_2: Jump b_59 (const) */
    goto fixed_block_b_59;
  }
  /* b_55, b_58,  */
  fixed_block_b_59: 
  {
    /* ???:4294967295 [D] s_b_59_0 = sym_153479_0_return_symbol int64_t */
    auto s_b_59_0 = emitter.load_local(DV_sym_153479_0_return_symbol, emitter.context().types().s64());
    /* execute.a64:2648 [F] s_b_59_1=sym_33339_3_parameter_inst.imm6 (const) */
    /* execute.a64:2648 [D] s_b_59_2 = (u64)s_b_59_0 */
    auto s_b_59_2 = emitter.reinterpret(s_b_59_0, emitter.context().types().u64());
    /* execute.a64:2648 [F] s_b_59_3 = (u64)s_b_59_1 (const) */
    /* execute.a64:2648 [D] s_b_59_4 = s_b_59_2->>s_b_59_3 */
    auto s_b_59_4 = emitter.sar(s_b_59_2, emitter.const_u64(((uint64_t)insn.imm6)));
    /* execute.a64:2648 [D] s_b_59_5 = (u64)s_b_59_4 */
    auto s_b_59_5 = (captive::arch::dbt::el::Value *)s_b_59_4;
    /* ???:4294967295 [D] s_b_59_6: sym_153245_0_return_symbol = s_b_59_5, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_153245_0_return_symbol, s_b_59_5);
    /* ???:4294967295 [F] s_b_59_7: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_28, b_29,  */
  fixed_block_b_60: 
  {
    /* execute.a64:2714 [D] s_b_60_0 = sym_153495_1_temporary_value uint64_t */
    auto s_b_60_0 = emitter.load_local(DV_sym_153495_1_temporary_value, emitter.context().types().u64());
    /* execute.a64:2653 [F] s_b_60_1=sym_33339_3_parameter_inst.imm6 (const) */
    /* execute.a64:2653 [F] s_b_60_2 = (u64)s_b_60_1 (const) */
    /* execute.a64:2653 [D] s_b_60_3 = s_b_60_0>>>s_b_60_2 */
    auto s_b_60_3 = emitter.ror(s_b_60_0, emitter.const_u64(((uint64_t)insn.imm6)));
    /* ???:4294967295 [D] s_b_60_4: sym_153245_0_return_symbol = s_b_60_3, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_153245_0_return_symbol, s_b_60_3);
    /* ???:4294967295 [F] s_b_60_5: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_30, b_31,  */
  fixed_block_b_61: 
  {
    /* execute.a64:2709 [D] s_b_61_0 = sym_153510_1_temporary_value uint32_t */
    auto s_b_61_0 = emitter.load_local(DV_sym_153510_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_61_1 = (u64)s_b_61_0 */
    auto s_b_61_1 = emitter.zx(s_b_61_0, emitter.context().types().u64());
    /* execute.a64:2655 [D] s_b_61_2 = (u32)s_b_61_1 */
    auto s_b_61_2 = emitter.truncate(s_b_61_1, emitter.context().types().u32());
    /* execute.a64:2655 [F] s_b_61_3=sym_33339_3_parameter_inst.imm6 (const) */
    /* execute.a64:2655 [F] s_b_61_4 = (u32)s_b_61_3 (const) */
    /* execute.a64:2655 [D] s_b_61_5 = s_b_61_2>>>s_b_61_4 */
    auto s_b_61_5 = emitter.ror(s_b_61_2, emitter.const_u32(((uint32_t)insn.imm6)));
    /* execute.a64:2655 [D] s_b_61_6 = (u64)s_b_61_5 */
    auto s_b_61_6 = emitter.zx(s_b_61_5, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_61_7: sym_153245_0_return_symbol = s_b_61_6, dominates: s_b_19_0  */
    emitter.store_local(DV_sym_153245_0_return_symbol, s_b_61_6);
    /* ???:4294967295 [F] s_b_61_8: Jump b_19 (const) */
    goto fixed_block_b_19;
  }
  /* b_4,  */
  fixed_block_b_62: 
  {
    /* execute.a64:2714 [F] s_b_62_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_62_1: sym_153558_1_temporary_value = s_b_62_0 (const), dominates: s_b_63_0  */
    CV_sym_153558_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_153558_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_62_2: Jump b_63 (const) */
    goto fixed_block_b_63;
  }
  /* b_62, b_64,  */
  fixed_block_b_63: 
  {
    /* execute.a64:2714 [D] s_b_63_0 = sym_153558_1_temporary_value uint64_t */
    auto s_b_63_0 = emitter.load_local(DV_sym_153558_1_temporary_value, emitter.context().types().u64());
    /* execute.a64:2000 [D] s_b_63_1 = sym_33346_0_op2 uint64_t */
    auto s_b_63_1 = emitter.load_local(DV_sym_33346_0_op2, emitter.context().types().u64());
    /* execute.a64:2000 [F] s_b_63_2 = constant u8 0 (const) */
    /* execute.a64:2000 [D] s_b_63_3 = __builtin_sbc64_flags */
    auto s_b_63_3 = emitter.sbcf(s_b_63_0, s_b_63_1, emitter.const_u8((uint8_t)0ULL));
    /* execute.a64:2000 [D] s_b_63_4: sym_33364_0_result = s_b_63_3, dominates: s_b_5_1  */
    emitter.store_local(DV_sym_33364_0_result, s_b_63_3);
    /* execute.a64:2000 [F] s_b_63_5: Jump b_5 (const) */
    goto fixed_block_b_5;
  }
  /* b_4,  */
  fixed_block_b_64: 
  {
    /* execute.a64:2714 [F] s_b_64_0=sym_33339_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [D] s_b_64_1 = ReadRegBank 0:s_b_64_0 (u64) */
    auto s_b_64_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_64_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_64_2: sym_153558_1_temporary_value = s_b_64_1, dominates: s_b_63_0  */
    emitter.store_local(DV_sym_153558_1_temporary_value, s_b_64_1);
    /* execute.a64:2714 [F] s_b_64_3: Jump b_63 (const) */
    goto fixed_block_b_63;
  }
  /* b_5,  */
  fixed_block_b_65: 
  {
    /* execute.a64:2747 [F] s_b_65_0=sym_33339_3_parameter_inst.rd (const) */
    /* execute.a64:2747 [D] s_b_65_1 = sym_153597_3_parameter_value uint64_t */
    auto s_b_65_1 = emitter.load_local(DV_sym_153597_3_parameter_value, emitter.context().types().u64());
    /* execute.a64:2747 [D] s_b_65_2: WriteRegBank 0:s_b_65_0 = s_b_65_1 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_65_1,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_65_1);
    /* execute.a64:0 [F] s_b_65_3: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_6,  */
  fixed_block_b_66: 
  {
    /* execute.a64:2714 [F] s_b_66_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_66_1: sym_153609_1_temporary_value = s_b_66_0 (const), dominates: s_b_67_0  */
    CV_sym_153609_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_153609_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_66_2: Jump b_67 (const) */
    goto fixed_block_b_67;
  }
  /* b_66, b_68,  */
  fixed_block_b_67: 
  {
    /* execute.a64:2714 [D] s_b_67_0 = sym_153609_1_temporary_value uint64_t */
    auto s_b_67_0 = emitter.load_local(DV_sym_153609_1_temporary_value, emitter.context().types().u64());
    /* execute.a64:2002 [D] s_b_67_1 = sym_33346_0_op2 uint64_t */
    auto s_b_67_1 = emitter.load_local(DV_sym_33346_0_op2, emitter.context().types().u64());
    /* execute.a64:2002 [D] s_b_67_2 = s_b_67_0-s_b_67_1 */
    auto s_b_67_2 = emitter.sub(s_b_67_0, s_b_67_1);
    /* execute.a64:2002 [D] s_b_67_3: sym_33364_0_result = s_b_67_2, dominates: s_b_5_1  */
    emitter.store_local(DV_sym_33364_0_result, s_b_67_2);
    /* execute.a64:2002 [F] s_b_67_4: Jump b_5 (const) */
    goto fixed_block_b_5;
  }
  /* b_6,  */
  fixed_block_b_68: 
  {
    /* execute.a64:2714 [F] s_b_68_0=sym_33339_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [D] s_b_68_1 = ReadRegBank 0:s_b_68_0 (u64) */
    auto s_b_68_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_68_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_68_2: sym_153609_1_temporary_value = s_b_68_1, dominates: s_b_67_0  */
    emitter.store_local(DV_sym_153609_1_temporary_value, s_b_68_1);
    /* execute.a64:2714 [F] s_b_68_3: Jump b_67 (const) */
    goto fixed_block_b_67;
  }
  /* b_7,  */
  fixed_block_b_69: 
  {
    /* execute.a64:2709 [F] s_b_69_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_69_1: sym_153638_1_temporary_value = s_b_69_0 (const), dominates: s_b_70_0  */
    CV_sym_153638_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_153638_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_69_2: Jump b_70 (const) */
    goto fixed_block_b_70;
  }
  /* b_69, b_71,  */
  fixed_block_b_70: 
  {
    /* execute.a64:2709 [D] s_b_70_0 = sym_153638_1_temporary_value uint32_t */
    auto s_b_70_0 = emitter.load_local(DV_sym_153638_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2010 [D] s_b_70_1 = sym_33346_0_op2 uint64_t */
    auto s_b_70_1 = emitter.load_local(DV_sym_33346_0_op2, emitter.context().types().u64());
    /* execute.a64:2010 [D] s_b_70_2 = (u32)s_b_70_1 */
    auto s_b_70_2 = emitter.truncate(s_b_70_1, emitter.context().types().u32());
    /* execute.a64:2010 [F] s_b_70_3 = constant u8 0 (const) */
    /* execute.a64:2010 [D] s_b_70_4 = __builtin_sbc32_flags */
    auto s_b_70_4 = emitter.sbcf(s_b_70_0, s_b_70_2, emitter.const_u8((uint8_t)0ULL));
    /* execute.a64:2010 [D] s_b_70_5: sym_33389_0_result = s_b_70_4, dominates: s_b_8_1  */
    emitter.store_local(DV_sym_33389_0_result, s_b_70_4);
    /* execute.a64:2010 [F] s_b_70_6: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_7,  */
  fixed_block_b_71: 
  {
    /* execute.a64:2709 [F] s_b_71_0=sym_33339_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [D] s_b_71_1 = ReadRegBank 1:s_b_71_0 (u32) */
    auto s_b_71_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_71_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_71_2: sym_153638_1_temporary_value = s_b_71_1, dominates: s_b_70_0  */
    emitter.store_local(DV_sym_153638_1_temporary_value, s_b_71_1);
    /* execute.a64:2709 [F] s_b_71_3: Jump b_70 (const) */
    goto fixed_block_b_70;
  }
  /* b_8,  */
  fixed_block_b_72: 
  {
    /* execute.a64:2739 [F] s_b_72_0=sym_33339_3_parameter_inst.rd (const) */
    /* execute.a64:2739 [D] s_b_72_1 = sym_153677_3_parameter_value uint32_t */
    auto s_b_72_1 = emitter.load_local(DV_sym_153677_3_parameter_value, emitter.context().types().u32());
    /* execute.a64:2739 [D] s_b_72_2 = (u64)s_b_72_1 */
    auto s_b_72_2 = emitter.zx(s_b_72_1, emitter.context().types().u64());
    /* execute.a64:2739 [D] s_b_72_3: WriteRegBank 0:s_b_72_0 = s_b_72_2 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_72_2,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_72_2);
    /* execute.a64:0 [F] s_b_72_4: Jump b_2 (const) */
    goto fixed_block_b_2;
  }
  /* b_9,  */
  fixed_block_b_73: 
  {
    /* execute.a64:2709 [F] s_b_73_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_73_1: sym_153690_1_temporary_value = s_b_73_0 (const), dominates: s_b_74_0  */
    CV_sym_153690_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_153690_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_73_2: Jump b_74 (const) */
    goto fixed_block_b_74;
  }
  /* b_73, b_75,  */
  fixed_block_b_74: 
  {
    /* execute.a64:2709 [D] s_b_74_0 = sym_153690_1_temporary_value uint32_t */
    auto s_b_74_0 = emitter.load_local(DV_sym_153690_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2012 [D] s_b_74_1 = sym_33346_0_op2 uint64_t */
    auto s_b_74_1 = emitter.load_local(DV_sym_33346_0_op2, emitter.context().types().u64());
    /* execute.a64:2012 [D] s_b_74_2 = (u32)s_b_74_1 */
    auto s_b_74_2 = emitter.truncate(s_b_74_1, emitter.context().types().u32());
    /* execute.a64:2012 [D] s_b_74_3 = s_b_74_0-s_b_74_2 */
    auto s_b_74_3 = emitter.sub(s_b_74_0, s_b_74_2);
    /* execute.a64:2012 [D] s_b_74_4: sym_33389_0_result = s_b_74_3, dominates: s_b_8_1  */
    emitter.store_local(DV_sym_33389_0_result, s_b_74_3);
    /* execute.a64:2012 [F] s_b_74_5: Jump b_8 (const) */
    goto fixed_block_b_8;
  }
  /* b_9,  */
  fixed_block_b_75: 
  {
    /* execute.a64:2709 [F] s_b_75_0=sym_33339_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [D] s_b_75_1 = ReadRegBank 1:s_b_75_0 (u32) */
    auto s_b_75_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_75_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_75_2: sym_153690_1_temporary_value = s_b_75_1, dominates: s_b_74_0  */
    emitter.store_local(DV_sym_153690_1_temporary_value, s_b_75_1);
    /* execute.a64:2709 [F] s_b_75_3: Jump b_74 (const) */
    goto fixed_block_b_74;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_uaddl(const arm64_decode_a64_SIMD_THREE_DIFF&insn, captive::arch::dbt::el::Emitter& emitter)
{
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:5606 [F] s_b_0_0=sym_37265_3_parameter_inst.tb (const) */
    /* execute.simd:5607 [F] s_b_0_1 = constant s32 0 (const) */
    /* execute.simd:5619 [F] s_b_0_2 = constant s32 1 (const) */
    /* execute.simd:5631 [F] s_b_0_3 = constant s32 2 (const) */
    /* execute.simd:5643 [F] s_b_0_4 = constant s32 3 (const) */
    /* execute.simd:5655 [F] s_b_0_5 = constant s32 4 (const) */
    /* execute.simd:5667 [F] s_b_0_6 = constant s32 5 (const) */
    /* execute.simd:5606 [F] s_b_0_7: Switch s_b_0_0: < <todo> > def b_8 (const) -> b_2, b_3, b_4, b_5, b_6, b_7, b_8,  */
    switch (insn.tb) 
    {
    case (int32_t)0ULL:
      goto fixed_block_b_2;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_3;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_4;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_5;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_6;
      break;
    case (int32_t)5ULL:
      goto fixed_block_b_7;
      break;
    default:
      goto fixed_block_b_8;
    }
  }
  /* b_2, b_3, b_4, b_5, b_6, b_7, b_8,  */
  fixed_block_b_1: 
  {
    /* ???:4294967295 [F] s_b_1_0: Return */
    goto fixed_done;
  }
  /* b_0,  */
  fixed_block_b_2: 
  {
    /* execute.simd:5608 [F] s_b_2_0=sym_37265_3_parameter_inst.rn (const) */
    /* execute.simd:5608 [D] s_b_2_1 = ReadRegBank 15:s_b_2_0 (v8u8) */
    auto s_b_2_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_2_1,emitter.const_u8(8));
    }
    /* execute.simd:5608 [D] s_b_2_2 = (v8u8)s_b_2_1 */
    auto s_b_2_2 = (captive::arch::dbt::el::Value *)s_b_2_1;
    /* execute.simd:5609 [F] s_b_2_3=sym_37265_3_parameter_inst.rm (const) */
    /* execute.simd:5609 [D] s_b_2_4 = ReadRegBank 15:s_b_2_3 (v8u8) */
    auto s_b_2_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_2_4,emitter.const_u8(8));
    }
    /* execute.simd:5609 [D] s_b_2_5 = (v8u8)s_b_2_4 */
    auto s_b_2_5 = (captive::arch::dbt::el::Value *)s_b_2_4;
    /* ???:4294967295 [F] s_b_2_6 = constant v8u16 
    {
    }
    (const) */
    /* ???:4294967295 [F] s_b_2_7 = constant u8 0 (const) */
    /* execute.simd:5613 [D] s_b_2_2[s_b_2_7] */
    auto s_b_2_8 = emitter.vector_extract(s_b_2_2, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:5613 [D] s_b_2_9 = (u16)s_b_2_8 */
    auto s_b_2_9 = emitter.zx(s_b_2_8, emitter.context().types().u16());
    /* ???:4294967295 [F] s_b_2_10 = constant u8 0 (const) */
    /* execute.simd:5613 [D] s_b_2_5[s_b_2_10] */
    auto s_b_2_11 = emitter.vector_extract(s_b_2_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:5613 [D] s_b_2_12 = (u16)s_b_2_11 */
    auto s_b_2_12 = emitter.zx(s_b_2_11, emitter.context().types().u16());
    /* execute.simd:5613 [D] s_b_2_13 = s_b_2_9+s_b_2_12 */
    auto s_b_2_13 = emitter.add(s_b_2_9, s_b_2_12);
    /* execute.simd:5613 [F] s_b_2_14 = constant s32 0 (const) */
    /* execute.simd:5613 [D] s_b_2_15 = s_b_2_6[s_b_2_14] <= s_b_2_13 */
    auto s_b_2_15 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint16_t, 8>(0)[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_2_13);
    /* ???:4294967295 [F] s_b_2_16 = constant u8 1 (const) */
    /* execute.simd:5613 [D] s_b_2_2[s_b_2_16] */
    auto s_b_2_17 = emitter.vector_extract(s_b_2_2, emitter.const_u8((uint8_t)1ULL));
    /* execute.simd:5613 [D] s_b_2_18 = (u16)s_b_2_17 */
    auto s_b_2_18 = emitter.zx(s_b_2_17, emitter.context().types().u16());
    /* ???:4294967295 [F] s_b_2_19 = constant u8 1 (const) */
    /* execute.simd:5613 [D] s_b_2_5[s_b_2_19] */
    auto s_b_2_20 = emitter.vector_extract(s_b_2_5, emitter.const_u8((uint8_t)1ULL));
    /* execute.simd:5613 [D] s_b_2_21 = (u16)s_b_2_20 */
    auto s_b_2_21 = emitter.zx(s_b_2_20, emitter.context().types().u16());
    /* execute.simd:5613 [D] s_b_2_22 = s_b_2_18+s_b_2_21 */
    auto s_b_2_22 = emitter.add(s_b_2_18, s_b_2_21);
    /* execute.simd:5613 [F] s_b_2_23 = constant s32 1 (const) */
    /* execute.simd:5613 [D] s_b_2_24 = s_b_2_15[s_b_2_23] <= s_b_2_22 */
    auto s_b_2_24 = emitter.vector_insert(s_b_2_15, emitter.const_s32((int32_t)1ULL), s_b_2_22);
    /* ???:4294967295 [F] s_b_2_25 = constant u8 2 (const) */
    /* execute.simd:5613 [D] s_b_2_2[s_b_2_25] */
    auto s_b_2_26 = emitter.vector_extract(s_b_2_2, emitter.const_u8((uint8_t)2ULL));
    /* execute.simd:5613 [D] s_b_2_27 = (u16)s_b_2_26 */
    auto s_b_2_27 = emitter.zx(s_b_2_26, emitter.context().types().u16());
    /* ???:4294967295 [F] s_b_2_28 = constant u8 2 (const) */
    /* execute.simd:5613 [D] s_b_2_5[s_b_2_28] */
    auto s_b_2_29 = emitter.vector_extract(s_b_2_5, emitter.const_u8((uint8_t)2ULL));
    /* execute.simd:5613 [D] s_b_2_30 = (u16)s_b_2_29 */
    auto s_b_2_30 = emitter.zx(s_b_2_29, emitter.context().types().u16());
    /* execute.simd:5613 [D] s_b_2_31 = s_b_2_27+s_b_2_30 */
    auto s_b_2_31 = emitter.add(s_b_2_27, s_b_2_30);
    /* execute.simd:5613 [F] s_b_2_32 = constant s32 2 (const) */
    /* execute.simd:5613 [D] s_b_2_33 = s_b_2_24[s_b_2_32] <= s_b_2_31 */
    auto s_b_2_33 = emitter.vector_insert(s_b_2_24, emitter.const_s32((int32_t)2ULL), s_b_2_31);
    /* ???:4294967295 [F] s_b_2_34 = constant u8 3 (const) */
    /* execute.simd:5613 [D] s_b_2_2[s_b_2_34] */
    auto s_b_2_35 = emitter.vector_extract(s_b_2_2, emitter.const_u8((uint8_t)3ULL));
    /* execute.simd:5613 [D] s_b_2_36 = (u16)s_b_2_35 */
    auto s_b_2_36 = emitter.zx(s_b_2_35, emitter.context().types().u16());
    /* ???:4294967295 [F] s_b_2_37 = constant u8 3 (const) */
    /* execute.simd:5613 [D] s_b_2_5[s_b_2_37] */
    auto s_b_2_38 = emitter.vector_extract(s_b_2_5, emitter.const_u8((uint8_t)3ULL));
    /* execute.simd:5613 [D] s_b_2_39 = (u16)s_b_2_38 */
    auto s_b_2_39 = emitter.zx(s_b_2_38, emitter.context().types().u16());
    /* execute.simd:5613 [D] s_b_2_40 = s_b_2_36+s_b_2_39 */
    auto s_b_2_40 = emitter.add(s_b_2_36, s_b_2_39);
    /* execute.simd:5613 [F] s_b_2_41 = constant s32 3 (const) */
    /* execute.simd:5613 [D] s_b_2_42 = s_b_2_33[s_b_2_41] <= s_b_2_40 */
    auto s_b_2_42 = emitter.vector_insert(s_b_2_33, emitter.const_s32((int32_t)3ULL), s_b_2_40);
    /* ???:4294967295 [F] s_b_2_43 = constant u8 4 (const) */
    /* execute.simd:5613 [D] s_b_2_2[s_b_2_43] */
    auto s_b_2_44 = emitter.vector_extract(s_b_2_2, emitter.const_u8((uint8_t)4ULL));
    /* execute.simd:5613 [D] s_b_2_45 = (u16)s_b_2_44 */
    auto s_b_2_45 = emitter.zx(s_b_2_44, emitter.context().types().u16());
    /* ???:4294967295 [F] s_b_2_46 = constant u8 4 (const) */
    /* execute.simd:5613 [D] s_b_2_5[s_b_2_46] */
    auto s_b_2_47 = emitter.vector_extract(s_b_2_5, emitter.const_u8((uint8_t)4ULL));
    /* execute.simd:5613 [D] s_b_2_48 = (u16)s_b_2_47 */
    auto s_b_2_48 = emitter.zx(s_b_2_47, emitter.context().types().u16());
    /* execute.simd:5613 [D] s_b_2_49 = s_b_2_45+s_b_2_48 */
    auto s_b_2_49 = emitter.add(s_b_2_45, s_b_2_48);
    /* execute.simd:5613 [F] s_b_2_50 = constant s32 4 (const) */
    /* execute.simd:5613 [D] s_b_2_51 = s_b_2_42[s_b_2_50] <= s_b_2_49 */
    auto s_b_2_51 = emitter.vector_insert(s_b_2_42, emitter.const_s32((int32_t)4ULL), s_b_2_49);
    /* ???:4294967295 [F] s_b_2_52 = constant u8 5 (const) */
    /* execute.simd:5613 [D] s_b_2_2[s_b_2_52] */
    auto s_b_2_53 = emitter.vector_extract(s_b_2_2, emitter.const_u8((uint8_t)5ULL));
    /* execute.simd:5613 [D] s_b_2_54 = (u16)s_b_2_53 */
    auto s_b_2_54 = emitter.zx(s_b_2_53, emitter.context().types().u16());
    /* ???:4294967295 [F] s_b_2_55 = constant u8 5 (const) */
    /* execute.simd:5613 [D] s_b_2_5[s_b_2_55] */
    auto s_b_2_56 = emitter.vector_extract(s_b_2_5, emitter.const_u8((uint8_t)5ULL));
    /* execute.simd:5613 [D] s_b_2_57 = (u16)s_b_2_56 */
    auto s_b_2_57 = emitter.zx(s_b_2_56, emitter.context().types().u16());
    /* execute.simd:5613 [D] s_b_2_58 = s_b_2_54+s_b_2_57 */
    auto s_b_2_58 = emitter.add(s_b_2_54, s_b_2_57);
    /* execute.simd:5613 [F] s_b_2_59 = constant s32 5 (const) */
    /* execute.simd:5613 [D] s_b_2_60 = s_b_2_51[s_b_2_59] <= s_b_2_58 */
    auto s_b_2_60 = emitter.vector_insert(s_b_2_51, emitter.const_s32((int32_t)5ULL), s_b_2_58);
    /* ???:4294967295 [F] s_b_2_61 = constant u8 6 (const) */
    /* execute.simd:5613 [D] s_b_2_2[s_b_2_61] */
    auto s_b_2_62 = emitter.vector_extract(s_b_2_2, emitter.const_u8((uint8_t)6ULL));
    /* execute.simd:5613 [D] s_b_2_63 = (u16)s_b_2_62 */
    auto s_b_2_63 = emitter.zx(s_b_2_62, emitter.context().types().u16());
    /* ???:4294967295 [F] s_b_2_64 = constant u8 6 (const) */
    /* execute.simd:5613 [D] s_b_2_5[s_b_2_64] */
    auto s_b_2_65 = emitter.vector_extract(s_b_2_5, emitter.const_u8((uint8_t)6ULL));
    /* execute.simd:5613 [D] s_b_2_66 = (u16)s_b_2_65 */
    auto s_b_2_66 = emitter.zx(s_b_2_65, emitter.context().types().u16());
    /* execute.simd:5613 [D] s_b_2_67 = s_b_2_63+s_b_2_66 */
    auto s_b_2_67 = emitter.add(s_b_2_63, s_b_2_66);
    /* execute.simd:5613 [F] s_b_2_68 = constant s32 6 (const) */
    /* execute.simd:5613 [D] s_b_2_69 = s_b_2_60[s_b_2_68] <= s_b_2_67 */
    auto s_b_2_69 = emitter.vector_insert(s_b_2_60, emitter.const_s32((int32_t)6ULL), s_b_2_67);
    /* ???:4294967295 [F] s_b_2_70 = constant u8 7 (const) */
    /* execute.simd:5613 [D] s_b_2_2[s_b_2_70] */
    auto s_b_2_71 = emitter.vector_extract(s_b_2_2, emitter.const_u8((uint8_t)7ULL));
    /* execute.simd:5613 [D] s_b_2_72 = (u16)s_b_2_71 */
    auto s_b_2_72 = emitter.zx(s_b_2_71, emitter.context().types().u16());
    /* ???:4294967295 [F] s_b_2_73 = constant u8 7 (const) */
    /* execute.simd:5613 [D] s_b_2_5[s_b_2_73] */
    auto s_b_2_74 = emitter.vector_extract(s_b_2_5, emitter.const_u8((uint8_t)7ULL));
    /* execute.simd:5613 [D] s_b_2_75 = (u16)s_b_2_74 */
    auto s_b_2_75 = emitter.zx(s_b_2_74, emitter.context().types().u16());
    /* execute.simd:5613 [D] s_b_2_76 = s_b_2_72+s_b_2_75 */
    auto s_b_2_76 = emitter.add(s_b_2_72, s_b_2_75);
    /* execute.simd:5613 [F] s_b_2_77 = constant s32 7 (const) */
    /* execute.simd:5613 [D] s_b_2_78 = s_b_2_69[s_b_2_77] <= s_b_2_76 */
    auto s_b_2_78 = emitter.vector_insert(s_b_2_69, emitter.const_s32((int32_t)7ULL), s_b_2_76);
    /* execute.simd:5616 [F] s_b_2_79=sym_37265_3_parameter_inst.rd (const) */
    /* execute.simd:5616 [D] s_b_2_80: WriteRegBank 18:s_b_2_79 = s_b_2_78 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_2_78,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_2_78);
    /* execute.simd:0 [F] s_b_2_81: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:5620 [F] s_b_3_0=sym_37265_3_parameter_inst.rn (const) */
    /* execute.simd:5620 [D] s_b_3_1 = ReadRegBank 16:s_b_3_0 (v16u8) */
    auto s_b_3_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_3_1,emitter.const_u8(16));
    }
    /* execute.simd:5620 [D] s_b_3_2 = (v16u8)s_b_3_1 */
    auto s_b_3_2 = (captive::arch::dbt::el::Value *)s_b_3_1;
    /* execute.simd:5621 [F] s_b_3_3=sym_37265_3_parameter_inst.rm (const) */
    /* execute.simd:5621 [D] s_b_3_4 = ReadRegBank 16:s_b_3_3 (v16u8) */
    auto s_b_3_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_3_4,emitter.const_u8(16));
    }
    /* execute.simd:5621 [D] s_b_3_5 = (v16u8)s_b_3_4 */
    auto s_b_3_5 = (captive::arch::dbt::el::Value *)s_b_3_4;
    /* ???:4294967295 [F] s_b_3_6 = constant v8u16 
    {
    }
    (const) */
    /* execute.simd:5625 [F] s_b_3_7 = constant u32 8 (const) */
    /* execute.simd:5625 [D] s_b_3_2[s_b_3_7] */
    auto s_b_3_8 = emitter.vector_extract(s_b_3_2, emitter.const_u32((uint32_t)8ULL));
    /* execute.simd:5625 [D] s_b_3_9 = (u16)s_b_3_8 */
    auto s_b_3_9 = emitter.zx(s_b_3_8, emitter.context().types().u16());
    /* execute.simd:5625 [F] s_b_3_10 = constant u32 8 (const) */
    /* execute.simd:5625 [D] s_b_3_5[s_b_3_10] */
    auto s_b_3_11 = emitter.vector_extract(s_b_3_5, emitter.const_u32((uint32_t)8ULL));
    /* execute.simd:5625 [D] s_b_3_12 = (u16)s_b_3_11 */
    auto s_b_3_12 = emitter.zx(s_b_3_11, emitter.context().types().u16());
    /* execute.simd:5625 [D] s_b_3_13 = s_b_3_9+s_b_3_12 */
    auto s_b_3_13 = emitter.add(s_b_3_9, s_b_3_12);
    /* execute.simd:5625 [F] s_b_3_14 = constant s32 0 (const) */
    /* execute.simd:5625 [D] s_b_3_15 = s_b_3_6[s_b_3_14] <= s_b_3_13 */
    auto s_b_3_15 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint16_t, 8>(0)[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_3_13);
    /* execute.simd:5625 [F] s_b_3_16 = constant u32 9 (const) */
    /* execute.simd:5625 [D] s_b_3_2[s_b_3_16] */
    auto s_b_3_17 = emitter.vector_extract(s_b_3_2, emitter.const_u32((uint32_t)9ULL));
    /* execute.simd:5625 [D] s_b_3_18 = (u16)s_b_3_17 */
    auto s_b_3_18 = emitter.zx(s_b_3_17, emitter.context().types().u16());
    /* execute.simd:5625 [F] s_b_3_19 = constant u32 9 (const) */
    /* execute.simd:5625 [D] s_b_3_5[s_b_3_19] */
    auto s_b_3_20 = emitter.vector_extract(s_b_3_5, emitter.const_u32((uint32_t)9ULL));
    /* execute.simd:5625 [D] s_b_3_21 = (u16)s_b_3_20 */
    auto s_b_3_21 = emitter.zx(s_b_3_20, emitter.context().types().u16());
    /* execute.simd:5625 [D] s_b_3_22 = s_b_3_18+s_b_3_21 */
    auto s_b_3_22 = emitter.add(s_b_3_18, s_b_3_21);
    /* execute.simd:5625 [F] s_b_3_23 = constant s32 1 (const) */
    /* execute.simd:5625 [D] s_b_3_24 = s_b_3_15[s_b_3_23] <= s_b_3_22 */
    auto s_b_3_24 = emitter.vector_insert(s_b_3_15, emitter.const_s32((int32_t)1ULL), s_b_3_22);
    /* execute.simd:5625 [F] s_b_3_25 = constant u32 a (const) */
    /* execute.simd:5625 [D] s_b_3_2[s_b_3_25] */
    auto s_b_3_26 = emitter.vector_extract(s_b_3_2, emitter.const_u32((uint32_t)10ULL));
    /* execute.simd:5625 [D] s_b_3_27 = (u16)s_b_3_26 */
    auto s_b_3_27 = emitter.zx(s_b_3_26, emitter.context().types().u16());
    /* execute.simd:5625 [F] s_b_3_28 = constant u32 a (const) */
    /* execute.simd:5625 [D] s_b_3_5[s_b_3_28] */
    auto s_b_3_29 = emitter.vector_extract(s_b_3_5, emitter.const_u32((uint32_t)10ULL));
    /* execute.simd:5625 [D] s_b_3_30 = (u16)s_b_3_29 */
    auto s_b_3_30 = emitter.zx(s_b_3_29, emitter.context().types().u16());
    /* execute.simd:5625 [D] s_b_3_31 = s_b_3_27+s_b_3_30 */
    auto s_b_3_31 = emitter.add(s_b_3_27, s_b_3_30);
    /* execute.simd:5625 [F] s_b_3_32 = constant s32 2 (const) */
    /* execute.simd:5625 [D] s_b_3_33 = s_b_3_24[s_b_3_32] <= s_b_3_31 */
    auto s_b_3_33 = emitter.vector_insert(s_b_3_24, emitter.const_s32((int32_t)2ULL), s_b_3_31);
    /* execute.simd:5625 [F] s_b_3_34 = constant u32 b (const) */
    /* execute.simd:5625 [D] s_b_3_2[s_b_3_34] */
    auto s_b_3_35 = emitter.vector_extract(s_b_3_2, emitter.const_u32((uint32_t)11ULL));
    /* execute.simd:5625 [D] s_b_3_36 = (u16)s_b_3_35 */
    auto s_b_3_36 = emitter.zx(s_b_3_35, emitter.context().types().u16());
    /* execute.simd:5625 [F] s_b_3_37 = constant u32 b (const) */
    /* execute.simd:5625 [D] s_b_3_5[s_b_3_37] */
    auto s_b_3_38 = emitter.vector_extract(s_b_3_5, emitter.const_u32((uint32_t)11ULL));
    /* execute.simd:5625 [D] s_b_3_39 = (u16)s_b_3_38 */
    auto s_b_3_39 = emitter.zx(s_b_3_38, emitter.context().types().u16());
    /* execute.simd:5625 [D] s_b_3_40 = s_b_3_36+s_b_3_39 */
    auto s_b_3_40 = emitter.add(s_b_3_36, s_b_3_39);
    /* execute.simd:5625 [F] s_b_3_41 = constant s32 3 (const) */
    /* execute.simd:5625 [D] s_b_3_42 = s_b_3_33[s_b_3_41] <= s_b_3_40 */
    auto s_b_3_42 = emitter.vector_insert(s_b_3_33, emitter.const_s32((int32_t)3ULL), s_b_3_40);
    /* execute.simd:5625 [F] s_b_3_43 = constant u32 c (const) */
    /* execute.simd:5625 [D] s_b_3_2[s_b_3_43] */
    auto s_b_3_44 = emitter.vector_extract(s_b_3_2, emitter.const_u32((uint32_t)12ULL));
    /* execute.simd:5625 [D] s_b_3_45 = (u16)s_b_3_44 */
    auto s_b_3_45 = emitter.zx(s_b_3_44, emitter.context().types().u16());
    /* execute.simd:5625 [F] s_b_3_46 = constant u32 c (const) */
    /* execute.simd:5625 [D] s_b_3_5[s_b_3_46] */
    auto s_b_3_47 = emitter.vector_extract(s_b_3_5, emitter.const_u32((uint32_t)12ULL));
    /* execute.simd:5625 [D] s_b_3_48 = (u16)s_b_3_47 */
    auto s_b_3_48 = emitter.zx(s_b_3_47, emitter.context().types().u16());
    /* execute.simd:5625 [D] s_b_3_49 = s_b_3_45+s_b_3_48 */
    auto s_b_3_49 = emitter.add(s_b_3_45, s_b_3_48);
    /* execute.simd:5625 [F] s_b_3_50 = constant s32 4 (const) */
    /* execute.simd:5625 [D] s_b_3_51 = s_b_3_42[s_b_3_50] <= s_b_3_49 */
    auto s_b_3_51 = emitter.vector_insert(s_b_3_42, emitter.const_s32((int32_t)4ULL), s_b_3_49);
    /* execute.simd:5625 [F] s_b_3_52 = constant u32 d (const) */
    /* execute.simd:5625 [D] s_b_3_2[s_b_3_52] */
    auto s_b_3_53 = emitter.vector_extract(s_b_3_2, emitter.const_u32((uint32_t)13ULL));
    /* execute.simd:5625 [D] s_b_3_54 = (u16)s_b_3_53 */
    auto s_b_3_54 = emitter.zx(s_b_3_53, emitter.context().types().u16());
    /* execute.simd:5625 [F] s_b_3_55 = constant u32 d (const) */
    /* execute.simd:5625 [D] s_b_3_5[s_b_3_55] */
    auto s_b_3_56 = emitter.vector_extract(s_b_3_5, emitter.const_u32((uint32_t)13ULL));
    /* execute.simd:5625 [D] s_b_3_57 = (u16)s_b_3_56 */
    auto s_b_3_57 = emitter.zx(s_b_3_56, emitter.context().types().u16());
    /* execute.simd:5625 [D] s_b_3_58 = s_b_3_54+s_b_3_57 */
    auto s_b_3_58 = emitter.add(s_b_3_54, s_b_3_57);
    /* execute.simd:5625 [F] s_b_3_59 = constant s32 5 (const) */
    /* execute.simd:5625 [D] s_b_3_60 = s_b_3_51[s_b_3_59] <= s_b_3_58 */
    auto s_b_3_60 = emitter.vector_insert(s_b_3_51, emitter.const_s32((int32_t)5ULL), s_b_3_58);
    /* execute.simd:5625 [F] s_b_3_61 = constant u32 e (const) */
    /* execute.simd:5625 [D] s_b_3_2[s_b_3_61] */
    auto s_b_3_62 = emitter.vector_extract(s_b_3_2, emitter.const_u32((uint32_t)14ULL));
    /* execute.simd:5625 [D] s_b_3_63 = (u16)s_b_3_62 */
    auto s_b_3_63 = emitter.zx(s_b_3_62, emitter.context().types().u16());
    /* execute.simd:5625 [F] s_b_3_64 = constant u32 e (const) */
    /* execute.simd:5625 [D] s_b_3_5[s_b_3_64] */
    auto s_b_3_65 = emitter.vector_extract(s_b_3_5, emitter.const_u32((uint32_t)14ULL));
    /* execute.simd:5625 [D] s_b_3_66 = (u16)s_b_3_65 */
    auto s_b_3_66 = emitter.zx(s_b_3_65, emitter.context().types().u16());
    /* execute.simd:5625 [D] s_b_3_67 = s_b_3_63+s_b_3_66 */
    auto s_b_3_67 = emitter.add(s_b_3_63, s_b_3_66);
    /* execute.simd:5625 [F] s_b_3_68 = constant s32 6 (const) */
    /* execute.simd:5625 [D] s_b_3_69 = s_b_3_60[s_b_3_68] <= s_b_3_67 */
    auto s_b_3_69 = emitter.vector_insert(s_b_3_60, emitter.const_s32((int32_t)6ULL), s_b_3_67);
    /* execute.simd:5625 [F] s_b_3_70 = constant u32 f (const) */
    /* execute.simd:5625 [D] s_b_3_2[s_b_3_70] */
    auto s_b_3_71 = emitter.vector_extract(s_b_3_2, emitter.const_u32((uint32_t)15ULL));
    /* execute.simd:5625 [D] s_b_3_72 = (u16)s_b_3_71 */
    auto s_b_3_72 = emitter.zx(s_b_3_71, emitter.context().types().u16());
    /* execute.simd:5625 [F] s_b_3_73 = constant u32 f (const) */
    /* execute.simd:5625 [D] s_b_3_5[s_b_3_73] */
    auto s_b_3_74 = emitter.vector_extract(s_b_3_5, emitter.const_u32((uint32_t)15ULL));
    /* execute.simd:5625 [D] s_b_3_75 = (u16)s_b_3_74 */
    auto s_b_3_75 = emitter.zx(s_b_3_74, emitter.context().types().u16());
    /* execute.simd:5625 [D] s_b_3_76 = s_b_3_72+s_b_3_75 */
    auto s_b_3_76 = emitter.add(s_b_3_72, s_b_3_75);
    /* execute.simd:5625 [F] s_b_3_77 = constant s32 7 (const) */
    /* execute.simd:5625 [D] s_b_3_78 = s_b_3_69[s_b_3_77] <= s_b_3_76 */
    auto s_b_3_78 = emitter.vector_insert(s_b_3_69, emitter.const_s32((int32_t)7ULL), s_b_3_76);
    /* execute.simd:5628 [F] s_b_3_79=sym_37265_3_parameter_inst.rd (const) */
    /* execute.simd:5628 [D] s_b_3_80: WriteRegBank 18:s_b_3_79 = s_b_3_78 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_3_78,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_3_78);
    /* execute.simd:0 [F] s_b_3_81: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_4: 
  {
    /* execute.simd:5632 [F] s_b_4_0=sym_37265_3_parameter_inst.rn (const) */
    /* execute.simd:5632 [D] s_b_4_1 = ReadRegBank 17:s_b_4_0 (v4u16) */
    auto s_b_4_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_4_1,emitter.const_u8(8));
    }
    /* execute.simd:5632 [D] s_b_4_2 = (v4u16)s_b_4_1 */
    auto s_b_4_2 = (captive::arch::dbt::el::Value *)s_b_4_1;
    /* execute.simd:5633 [F] s_b_4_3=sym_37265_3_parameter_inst.rm (const) */
    /* execute.simd:5633 [D] s_b_4_4 = ReadRegBank 17:s_b_4_3 (v4u16) */
    auto s_b_4_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_4_4,emitter.const_u8(8));
    }
    /* execute.simd:5633 [D] s_b_4_5 = (v4u16)s_b_4_4 */
    auto s_b_4_5 = (captive::arch::dbt::el::Value *)s_b_4_4;
    /* ???:4294967295 [F] s_b_4_6 = constant v4u32 
    {
    }
    (const) */
    /* ???:4294967295 [F] s_b_4_7 = constant u8 0 (const) */
    /* execute.simd:5637 [D] s_b_4_2[s_b_4_7] */
    auto s_b_4_8 = emitter.vector_extract(s_b_4_2, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:5637 [D] s_b_4_9 = (u32)s_b_4_8 */
    auto s_b_4_9 = emitter.zx(s_b_4_8, emitter.context().types().u32());
    /* ???:4294967295 [F] s_b_4_10 = constant u8 0 (const) */
    /* execute.simd:5637 [D] s_b_4_5[s_b_4_10] */
    auto s_b_4_11 = emitter.vector_extract(s_b_4_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:5637 [D] s_b_4_12 = (u32)s_b_4_11 */
    auto s_b_4_12 = emitter.zx(s_b_4_11, emitter.context().types().u32());
    /* execute.simd:5637 [D] s_b_4_13 = s_b_4_9+s_b_4_12 */
    auto s_b_4_13 = emitter.add(s_b_4_9, s_b_4_12);
    /* execute.simd:5637 [F] s_b_4_14 = constant s32 0 (const) */
    /* execute.simd:5637 [D] s_b_4_15 = s_b_4_6[s_b_4_14] <= s_b_4_13 */
    auto s_b_4_15 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint32_t, 4>(0)[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_4_13);
    /* ???:4294967295 [F] s_b_4_16 = constant u8 1 (const) */
    /* execute.simd:5637 [D] s_b_4_2[s_b_4_16] */
    auto s_b_4_17 = emitter.vector_extract(s_b_4_2, emitter.const_u8((uint8_t)1ULL));
    /* execute.simd:5637 [D] s_b_4_18 = (u32)s_b_4_17 */
    auto s_b_4_18 = emitter.zx(s_b_4_17, emitter.context().types().u32());
    /* ???:4294967295 [F] s_b_4_19 = constant u8 1 (const) */
    /* execute.simd:5637 [D] s_b_4_5[s_b_4_19] */
    auto s_b_4_20 = emitter.vector_extract(s_b_4_5, emitter.const_u8((uint8_t)1ULL));
    /* execute.simd:5637 [D] s_b_4_21 = (u32)s_b_4_20 */
    auto s_b_4_21 = emitter.zx(s_b_4_20, emitter.context().types().u32());
    /* execute.simd:5637 [D] s_b_4_22 = s_b_4_18+s_b_4_21 */
    auto s_b_4_22 = emitter.add(s_b_4_18, s_b_4_21);
    /* execute.simd:5637 [F] s_b_4_23 = constant s32 1 (const) */
    /* execute.simd:5637 [D] s_b_4_24 = s_b_4_15[s_b_4_23] <= s_b_4_22 */
    auto s_b_4_24 = emitter.vector_insert(s_b_4_15, emitter.const_s32((int32_t)1ULL), s_b_4_22);
    /* ???:4294967295 [F] s_b_4_25 = constant u8 2 (const) */
    /* execute.simd:5637 [D] s_b_4_2[s_b_4_25] */
    auto s_b_4_26 = emitter.vector_extract(s_b_4_2, emitter.const_u8((uint8_t)2ULL));
    /* execute.simd:5637 [D] s_b_4_27 = (u32)s_b_4_26 */
    auto s_b_4_27 = emitter.zx(s_b_4_26, emitter.context().types().u32());
    /* ???:4294967295 [F] s_b_4_28 = constant u8 2 (const) */
    /* execute.simd:5637 [D] s_b_4_5[s_b_4_28] */
    auto s_b_4_29 = emitter.vector_extract(s_b_4_5, emitter.const_u8((uint8_t)2ULL));
    /* execute.simd:5637 [D] s_b_4_30 = (u32)s_b_4_29 */
    auto s_b_4_30 = emitter.zx(s_b_4_29, emitter.context().types().u32());
    /* execute.simd:5637 [D] s_b_4_31 = s_b_4_27+s_b_4_30 */
    auto s_b_4_31 = emitter.add(s_b_4_27, s_b_4_30);
    /* execute.simd:5637 [F] s_b_4_32 = constant s32 2 (const) */
    /* execute.simd:5637 [D] s_b_4_33 = s_b_4_24[s_b_4_32] <= s_b_4_31 */
    auto s_b_4_33 = emitter.vector_insert(s_b_4_24, emitter.const_s32((int32_t)2ULL), s_b_4_31);
    /* ???:4294967295 [F] s_b_4_34 = constant u8 3 (const) */
    /* execute.simd:5637 [D] s_b_4_2[s_b_4_34] */
    auto s_b_4_35 = emitter.vector_extract(s_b_4_2, emitter.const_u8((uint8_t)3ULL));
    /* execute.simd:5637 [D] s_b_4_36 = (u32)s_b_4_35 */
    auto s_b_4_36 = emitter.zx(s_b_4_35, emitter.context().types().u32());
    /* ???:4294967295 [F] s_b_4_37 = constant u8 3 (const) */
    /* execute.simd:5637 [D] s_b_4_5[s_b_4_37] */
    auto s_b_4_38 = emitter.vector_extract(s_b_4_5, emitter.const_u8((uint8_t)3ULL));
    /* execute.simd:5637 [D] s_b_4_39 = (u32)s_b_4_38 */
    auto s_b_4_39 = emitter.zx(s_b_4_38, emitter.context().types().u32());
    /* execute.simd:5637 [D] s_b_4_40 = s_b_4_36+s_b_4_39 */
    auto s_b_4_40 = emitter.add(s_b_4_36, s_b_4_39);
    /* execute.simd:5637 [F] s_b_4_41 = constant s32 3 (const) */
    /* execute.simd:5637 [D] s_b_4_42 = s_b_4_33[s_b_4_41] <= s_b_4_40 */
    auto s_b_4_42 = emitter.vector_insert(s_b_4_33, emitter.const_s32((int32_t)3ULL), s_b_4_40);
    /* execute.simd:5640 [F] s_b_4_43=sym_37265_3_parameter_inst.rd (const) */
    /* execute.simd:5640 [D] s_b_4_44: WriteRegBank 20:s_b_4_43 = s_b_4_42 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_42,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_4_42);
    /* execute.simd:0 [F] s_b_4_45: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_5: 
  {
    /* execute.simd:5644 [F] s_b_5_0=sym_37265_3_parameter_inst.rn (const) */
    /* execute.simd:5644 [D] s_b_5_1 = ReadRegBank 18:s_b_5_0 (v8u16) */
    auto s_b_5_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_5_1,emitter.const_u8(16));
    }
    /* execute.simd:5644 [D] s_b_5_2 = (v8u16)s_b_5_1 */
    auto s_b_5_2 = (captive::arch::dbt::el::Value *)s_b_5_1;
    /* execute.simd:5645 [F] s_b_5_3=sym_37265_3_parameter_inst.rm (const) */
    /* execute.simd:5645 [D] s_b_5_4 = ReadRegBank 18:s_b_5_3 (v8u16) */
    auto s_b_5_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_5_4,emitter.const_u8(16));
    }
    /* execute.simd:5645 [D] s_b_5_5 = (v8u16)s_b_5_4 */
    auto s_b_5_5 = (captive::arch::dbt::el::Value *)s_b_5_4;
    /* ???:4294967295 [F] s_b_5_6 = constant v4u32 
    {
    }
    (const) */
    /* execute.simd:5649 [F] s_b_5_7 = constant u32 4 (const) */
    /* execute.simd:5649 [D] s_b_5_2[s_b_5_7] */
    auto s_b_5_8 = emitter.vector_extract(s_b_5_2, emitter.const_u32((uint32_t)4ULL));
    /* execute.simd:5649 [D] s_b_5_9 = (u32)s_b_5_8 */
    auto s_b_5_9 = emitter.zx(s_b_5_8, emitter.context().types().u32());
    /* execute.simd:5649 [F] s_b_5_10 = constant u32 4 (const) */
    /* execute.simd:5649 [D] s_b_5_5[s_b_5_10] */
    auto s_b_5_11 = emitter.vector_extract(s_b_5_5, emitter.const_u32((uint32_t)4ULL));
    /* execute.simd:5649 [D] s_b_5_12 = (u32)s_b_5_11 */
    auto s_b_5_12 = emitter.zx(s_b_5_11, emitter.context().types().u32());
    /* execute.simd:5649 [D] s_b_5_13 = s_b_5_9+s_b_5_12 */
    auto s_b_5_13 = emitter.add(s_b_5_9, s_b_5_12);
    /* execute.simd:5649 [F] s_b_5_14 = constant s32 0 (const) */
    /* execute.simd:5649 [D] s_b_5_15 = s_b_5_6[s_b_5_14] <= s_b_5_13 */
    auto s_b_5_15 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint32_t, 4>(0)[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_5_13);
    /* execute.simd:5649 [F] s_b_5_16 = constant u32 5 (const) */
    /* execute.simd:5649 [D] s_b_5_2[s_b_5_16] */
    auto s_b_5_17 = emitter.vector_extract(s_b_5_2, emitter.const_u32((uint32_t)5ULL));
    /* execute.simd:5649 [D] s_b_5_18 = (u32)s_b_5_17 */
    auto s_b_5_18 = emitter.zx(s_b_5_17, emitter.context().types().u32());
    /* execute.simd:5649 [F] s_b_5_19 = constant u32 5 (const) */
    /* execute.simd:5649 [D] s_b_5_5[s_b_5_19] */
    auto s_b_5_20 = emitter.vector_extract(s_b_5_5, emitter.const_u32((uint32_t)5ULL));
    /* execute.simd:5649 [D] s_b_5_21 = (u32)s_b_5_20 */
    auto s_b_5_21 = emitter.zx(s_b_5_20, emitter.context().types().u32());
    /* execute.simd:5649 [D] s_b_5_22 = s_b_5_18+s_b_5_21 */
    auto s_b_5_22 = emitter.add(s_b_5_18, s_b_5_21);
    /* execute.simd:5649 [F] s_b_5_23 = constant s32 1 (const) */
    /* execute.simd:5649 [D] s_b_5_24 = s_b_5_15[s_b_5_23] <= s_b_5_22 */
    auto s_b_5_24 = emitter.vector_insert(s_b_5_15, emitter.const_s32((int32_t)1ULL), s_b_5_22);
    /* execute.simd:5649 [F] s_b_5_25 = constant u32 6 (const) */
    /* execute.simd:5649 [D] s_b_5_2[s_b_5_25] */
    auto s_b_5_26 = emitter.vector_extract(s_b_5_2, emitter.const_u32((uint32_t)6ULL));
    /* execute.simd:5649 [D] s_b_5_27 = (u32)s_b_5_26 */
    auto s_b_5_27 = emitter.zx(s_b_5_26, emitter.context().types().u32());
    /* execute.simd:5649 [F] s_b_5_28 = constant u32 6 (const) */
    /* execute.simd:5649 [D] s_b_5_5[s_b_5_28] */
    auto s_b_5_29 = emitter.vector_extract(s_b_5_5, emitter.const_u32((uint32_t)6ULL));
    /* execute.simd:5649 [D] s_b_5_30 = (u32)s_b_5_29 */
    auto s_b_5_30 = emitter.zx(s_b_5_29, emitter.context().types().u32());
    /* execute.simd:5649 [D] s_b_5_31 = s_b_5_27+s_b_5_30 */
    auto s_b_5_31 = emitter.add(s_b_5_27, s_b_5_30);
    /* execute.simd:5649 [F] s_b_5_32 = constant s32 2 (const) */
    /* execute.simd:5649 [D] s_b_5_33 = s_b_5_24[s_b_5_32] <= s_b_5_31 */
    auto s_b_5_33 = emitter.vector_insert(s_b_5_24, emitter.const_s32((int32_t)2ULL), s_b_5_31);
    /* execute.simd:5649 [F] s_b_5_34 = constant u32 7 (const) */
    /* execute.simd:5649 [D] s_b_5_2[s_b_5_34] */
    auto s_b_5_35 = emitter.vector_extract(s_b_5_2, emitter.const_u32((uint32_t)7ULL));
    /* execute.simd:5649 [D] s_b_5_36 = (u32)s_b_5_35 */
    auto s_b_5_36 = emitter.zx(s_b_5_35, emitter.context().types().u32());
    /* execute.simd:5649 [F] s_b_5_37 = constant u32 7 (const) */
    /* execute.simd:5649 [D] s_b_5_5[s_b_5_37] */
    auto s_b_5_38 = emitter.vector_extract(s_b_5_5, emitter.const_u32((uint32_t)7ULL));
    /* execute.simd:5649 [D] s_b_5_39 = (u32)s_b_5_38 */
    auto s_b_5_39 = emitter.zx(s_b_5_38, emitter.context().types().u32());
    /* execute.simd:5649 [D] s_b_5_40 = s_b_5_36+s_b_5_39 */
    auto s_b_5_40 = emitter.add(s_b_5_36, s_b_5_39);
    /* execute.simd:5649 [F] s_b_5_41 = constant s32 3 (const) */
    /* execute.simd:5649 [D] s_b_5_42 = s_b_5_33[s_b_5_41] <= s_b_5_40 */
    auto s_b_5_42 = emitter.vector_insert(s_b_5_33, emitter.const_s32((int32_t)3ULL), s_b_5_40);
    /* execute.simd:5652 [F] s_b_5_43=sym_37265_3_parameter_inst.rd (const) */
    /* execute.simd:5652 [D] s_b_5_44: WriteRegBank 20:s_b_5_43 = s_b_5_42 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_42,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_5_42);
    /* execute.simd:0 [F] s_b_5_45: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_6: 
  {
    /* execute.simd:5656 [F] s_b_6_0=sym_37265_3_parameter_inst.rn (const) */
    /* execute.simd:5656 [D] s_b_6_1 = ReadRegBank 19:s_b_6_0 (v2u32) */
    auto s_b_6_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_6_1,emitter.const_u8(8));
    }
    /* execute.simd:5656 [D] s_b_6_2 = (v2u32)s_b_6_1 */
    auto s_b_6_2 = (captive::arch::dbt::el::Value *)s_b_6_1;
    /* execute.simd:5657 [F] s_b_6_3=sym_37265_3_parameter_inst.rm (const) */
    /* execute.simd:5657 [D] s_b_6_4 = ReadRegBank 19:s_b_6_3 (v2u32) */
    auto s_b_6_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_6_4,emitter.const_u8(8));
    }
    /* execute.simd:5657 [D] s_b_6_5 = (v2u32)s_b_6_4 */
    auto s_b_6_5 = (captive::arch::dbt::el::Value *)s_b_6_4;
    /* ???:4294967295 [F] s_b_6_6 = constant v2u64 
    {
    }
    (const) */
    /* ???:4294967295 [F] s_b_6_7 = constant u8 0 (const) */
    /* execute.simd:5661 [D] s_b_6_2[s_b_6_7] */
    auto s_b_6_8 = emitter.vector_extract(s_b_6_2, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:5661 [D] s_b_6_9 = (u64)s_b_6_8 */
    auto s_b_6_9 = emitter.zx(s_b_6_8, emitter.context().types().u64());
    /* ???:4294967295 [F] s_b_6_10 = constant u8 0 (const) */
    /* execute.simd:5661 [D] s_b_6_5[s_b_6_10] */
    auto s_b_6_11 = emitter.vector_extract(s_b_6_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:5661 [D] s_b_6_12 = (u64)s_b_6_11 */
    auto s_b_6_12 = emitter.zx(s_b_6_11, emitter.context().types().u64());
    /* execute.simd:5661 [D] s_b_6_13 = s_b_6_9+s_b_6_12 */
    auto s_b_6_13 = emitter.add(s_b_6_9, s_b_6_12);
    /* execute.simd:5661 [F] s_b_6_14 = constant s32 0 (const) */
    /* execute.simd:5661 [D] s_b_6_15 = s_b_6_6[s_b_6_14] <= s_b_6_13 */
    auto s_b_6_15 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint64_t, 2>(0)[0], emitter.context().types().v2u64()), emitter.const_s32((int32_t)0ULL), s_b_6_13);
    /* ???:4294967295 [F] s_b_6_16 = constant u8 1 (const) */
    /* execute.simd:5661 [D] s_b_6_2[s_b_6_16] */
    auto s_b_6_17 = emitter.vector_extract(s_b_6_2, emitter.const_u8((uint8_t)1ULL));
    /* execute.simd:5661 [D] s_b_6_18 = (u64)s_b_6_17 */
    auto s_b_6_18 = emitter.zx(s_b_6_17, emitter.context().types().u64());
    /* ???:4294967295 [F] s_b_6_19 = constant u8 1 (const) */
    /* execute.simd:5661 [D] s_b_6_5[s_b_6_19] */
    auto s_b_6_20 = emitter.vector_extract(s_b_6_5, emitter.const_u8((uint8_t)1ULL));
    /* execute.simd:5661 [D] s_b_6_21 = (u64)s_b_6_20 */
    auto s_b_6_21 = emitter.zx(s_b_6_20, emitter.context().types().u64());
    /* execute.simd:5661 [D] s_b_6_22 = s_b_6_18+s_b_6_21 */
    auto s_b_6_22 = emitter.add(s_b_6_18, s_b_6_21);
    /* execute.simd:5661 [F] s_b_6_23 = constant s32 1 (const) */
    /* execute.simd:5661 [D] s_b_6_24 = s_b_6_15[s_b_6_23] <= s_b_6_22 */
    auto s_b_6_24 = emitter.vector_insert(s_b_6_15, emitter.const_s32((int32_t)1ULL), s_b_6_22);
    /* execute.simd:5664 [F] s_b_6_25=sym_37265_3_parameter_inst.rd (const) */
    /* execute.simd:5664 [D] s_b_6_26: WriteRegBank 21:s_b_6_25 = s_b_6_24 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_24,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_24);
    /* execute.simd:0 [F] s_b_6_27: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_7: 
  {
    /* execute.simd:5668 [F] s_b_7_0=sym_37265_3_parameter_inst.rn (const) */
    /* execute.simd:5668 [D] s_b_7_1 = ReadRegBank 20:s_b_7_0 (v4u32) */
    auto s_b_7_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_7_1,emitter.const_u8(16));
    }
    /* execute.simd:5668 [D] s_b_7_2 = (v4u32)s_b_7_1 */
    auto s_b_7_2 = (captive::arch::dbt::el::Value *)s_b_7_1;
    /* execute.simd:5669 [F] s_b_7_3=sym_37265_3_parameter_inst.rm (const) */
    /* execute.simd:5669 [D] s_b_7_4 = ReadRegBank 20:s_b_7_3 (v4u32) */
    auto s_b_7_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_7_4,emitter.const_u8(16));
    }
    /* execute.simd:5669 [D] s_b_7_5 = (v4u32)s_b_7_4 */
    auto s_b_7_5 = (captive::arch::dbt::el::Value *)s_b_7_4;
    /* ???:4294967295 [F] s_b_7_6 = constant v2u64 
    {
    }
    (const) */
    /* execute.simd:5673 [F] s_b_7_7 = constant u32 2 (const) */
    /* execute.simd:5673 [D] s_b_7_2[s_b_7_7] */
    auto s_b_7_8 = emitter.vector_extract(s_b_7_2, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:5673 [D] s_b_7_9 = (u64)s_b_7_8 */
    auto s_b_7_9 = emitter.zx(s_b_7_8, emitter.context().types().u64());
    /* execute.simd:5673 [F] s_b_7_10 = constant u32 2 (const) */
    /* execute.simd:5673 [D] s_b_7_5[s_b_7_10] */
    auto s_b_7_11 = emitter.vector_extract(s_b_7_5, emitter.const_u32((uint32_t)2ULL));
    /* execute.simd:5673 [D] s_b_7_12 = (u64)s_b_7_11 */
    auto s_b_7_12 = emitter.zx(s_b_7_11, emitter.context().types().u64());
    /* execute.simd:5673 [D] s_b_7_13 = s_b_7_9+s_b_7_12 */
    auto s_b_7_13 = emitter.add(s_b_7_9, s_b_7_12);
    /* execute.simd:5673 [F] s_b_7_14 = constant s32 0 (const) */
    /* execute.simd:5673 [D] s_b_7_15 = s_b_7_6[s_b_7_14] <= s_b_7_13 */
    auto s_b_7_15 = emitter.vector_insert(emitter.constant_vector_splat(wutils::Vector<uint64_t, 2>(0)[0], emitter.context().types().v2u64()), emitter.const_s32((int32_t)0ULL), s_b_7_13);
    /* execute.simd:5673 [F] s_b_7_16 = constant u32 3 (const) */
    /* execute.simd:5673 [D] s_b_7_2[s_b_7_16] */
    auto s_b_7_17 = emitter.vector_extract(s_b_7_2, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:5673 [D] s_b_7_18 = (u64)s_b_7_17 */
    auto s_b_7_18 = emitter.zx(s_b_7_17, emitter.context().types().u64());
    /* execute.simd:5673 [F] s_b_7_19 = constant u32 3 (const) */
    /* execute.simd:5673 [D] s_b_7_5[s_b_7_19] */
    auto s_b_7_20 = emitter.vector_extract(s_b_7_5, emitter.const_u32((uint32_t)3ULL));
    /* execute.simd:5673 [D] s_b_7_21 = (u64)s_b_7_20 */
    auto s_b_7_21 = emitter.zx(s_b_7_20, emitter.context().types().u64());
    /* execute.simd:5673 [D] s_b_7_22 = s_b_7_18+s_b_7_21 */
    auto s_b_7_22 = emitter.add(s_b_7_18, s_b_7_21);
    /* execute.simd:5673 [F] s_b_7_23 = constant s32 1 (const) */
    /* execute.simd:5673 [D] s_b_7_24 = s_b_7_15[s_b_7_23] <= s_b_7_22 */
    auto s_b_7_24 = emitter.vector_insert(s_b_7_15, emitter.const_s32((int32_t)1ULL), s_b_7_22);
    /* execute.simd:5676 [F] s_b_7_25=sym_37265_3_parameter_inst.rd (const) */
    /* execute.simd:5676 [D] s_b_7_26: WriteRegBank 21:s_b_7_25 = s_b_7_24 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_24,emitter.const_u8(16));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_7_24);
    /* execute.simd:0 [F] s_b_7_27: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  /* b_0,  */
  fixed_block_b_8: 
  {
    /* execute.simd:5680 [D] s_b_8_0 = trap */
    emitter.raise(emitter.const_u8(0));
    /* execute.simd:5606 [F] s_b_8_1: Jump b_1 (const) */
    goto fixed_block_b_1;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_udiv(const arm64_decode_a64_DP_2S&insn, captive::arch::dbt::el::Emitter& emitter)
{
  std::queue<captive::arch::dbt::el::Block *> dynamic_block_queue;
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto block_b_1 = emitter.context().create_block();
  auto block_b_2 = emitter.context().create_block();
  auto block_b_3 = emitter.context().create_block();
  auto block_b_13 = emitter.context().create_block();
  auto block_b_14 = emitter.context().create_block();
  auto block_b_15 = emitter.context().create_block();
  auto block_b_25 = emitter.context().create_block();
  auto block_b_26 = emitter.context().create_block();
  uint64_t CV_sym_157072_1_temporary_value;
  auto DV_sym_157072_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_157127_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), true);
  uint32_t CV_sym_156995_1_temporary_value;
  auto DV_sym_156995_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_156990_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  uint64_t CV_sym_156981_1_temporary_value;
  auto DV_sym_156981_1_temporary_value = emitter.alloc_local(emitter.context().types().u64(), false);
  uint32_t CV_sym_157086_1_temporary_value;
  auto DV_sym_157086_1_temporary_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_157081_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_157032_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), true);
  auto DV_sym_157149_3_parameter_value = emitter.alloc_local(emitter.context().types().u64(), true);
  auto DV_sym_40147_0_rn = emitter.alloc_local(emitter.context().types().u64(), true);
  auto DV_sym_40152_0_rm = emitter.alloc_local(emitter.context().types().u64(), true);
  auto DV_sym_40163_0_result = emitter.alloc_local(emitter.context().types().u64(), true);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.a64:2310 [F] s_b_0_0=sym_40142_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_0_1: If s_b_0_0: Jump b_4 else b_7 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_7;
    }
  }
  // BLOCK b_1 not fully fixed
  // BLOCK b_2 not fully fixed
  // BLOCK b_3 not fully fixed
  /* b_0,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2720 [F] s_b_4_0=sym_40142_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [F] s_b_4_1 = (u32)s_b_4_0 (const) */
    /* execute.a64:2714 [F] s_b_4_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_4_3 = s_b_4_1==s_b_4_2 (const) */
    uint8_t s_b_4_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_4_4: If s_b_4_3: Jump b_5 else b_6 (const) */
    if (s_b_4_3) 
    {
      goto fixed_block_b_5;
    }
    else 
    {
      goto fixed_block_b_6;
    }
  }
  /* b_4,  */
  fixed_block_b_5: 
  {
    /* execute.a64:2714 [F] s_b_5_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_5_1: sym_156981_1_temporary_value = s_b_5_0 (const), dominates: s_b_10_0  */
    CV_sym_156981_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_156981_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_5_2: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_4,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2714 [F] s_b_6_0=sym_40142_3_parameter_inst.rn (const) */
    /* execute.a64:2714 [D] s_b_6_1 = ReadRegBank 0:s_b_6_0 (u64) */
    auto s_b_6_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_6_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_6_2: sym_156981_1_temporary_value = s_b_6_1, dominates: s_b_10_0  */
    emitter.store_local(DV_sym_156981_1_temporary_value, s_b_6_1);
    /* execute.a64:2714 [F] s_b_6_3: Jump b_10 (const) */
    goto fixed_block_b_10;
  }
  /* b_0,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2722 [F] s_b_7_0=sym_40142_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [F] s_b_7_1 = (u32)s_b_7_0 (const) */
    /* execute.a64:2709 [F] s_b_7_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_7_3 = s_b_7_1==s_b_7_2 (const) */
    uint8_t s_b_7_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_7_4: If s_b_7_3: Jump b_8 else b_9 (const) */
    if (s_b_7_3) 
    {
      goto fixed_block_b_8;
    }
    else 
    {
      goto fixed_block_b_9;
    }
  }
  /* b_7,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2709 [F] s_b_8_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_8_1: sym_156995_1_temporary_value = s_b_8_0 (const), dominates: s_b_12_0  */
    CV_sym_156995_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_156995_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_8_2: Jump b_12 (const) */
    goto fixed_block_b_12;
  }
  /* b_7,  */
  fixed_block_b_9: 
  {
    /* execute.a64:2709 [F] s_b_9_0=sym_40142_3_parameter_inst.rn (const) */
    /* execute.a64:2709 [D] s_b_9_1 = ReadRegBank 1:s_b_9_0 (u32) */
    auto s_b_9_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_9_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_9_2: sym_156995_1_temporary_value = s_b_9_1, dominates: s_b_12_0  */
    emitter.store_local(DV_sym_156995_1_temporary_value, s_b_9_1);
    /* execute.a64:2709 [F] s_b_9_3: Jump b_12 (const) */
    goto fixed_block_b_12;
  }
  /* b_5, b_6,  */
  fixed_block_b_10: 
  {
    /* execute.a64:2714 [D] s_b_10_0 = sym_156981_1_temporary_value uint64_t */
    auto s_b_10_0 = emitter.load_local(DV_sym_156981_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_10_1: sym_156990_0_return_symbol = s_b_10_0, dominates: s_b_11_0  */
    emitter.store_local(DV_sym_156990_0_return_symbol, s_b_10_0);
    /* ???:4294967295 [F] s_b_10_2: Jump b_11 (const) */
    goto fixed_block_b_11;
  }
  /* b_10, b_12,  */
  fixed_block_b_11: 
  {
    /* ???:4294967295 [D] s_b_11_0 = sym_156990_0_return_symbol uint64_t */
    auto s_b_11_0 = emitter.load_local(DV_sym_156990_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:2310 [D] s_b_11_1: sym_40147_0_rn = s_b_11_0, dominates: s_b_3_0  */
    emitter.store_local(DV_sym_40147_0_rn, s_b_11_0);
    /* execute.a64:2311 [F] s_b_11_2=sym_40142_3_parameter_inst.sf (const) */
    /* execute.a64:2719 [F] s_b_11_3: If s_b_11_2: Jump b_16 else b_19 (const) */
    if (insn.sf) 
    {
      goto fixed_block_b_16;
    }
    else 
    {
      goto fixed_block_b_19;
    }
  }
  /* b_8, b_9,  */
  fixed_block_b_12: 
  {
    /* execute.a64:2709 [D] s_b_12_0 = sym_156995_1_temporary_value uint32_t */
    auto s_b_12_0 = emitter.load_local(DV_sym_156995_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_12_1 = (u64)s_b_12_0 */
    auto s_b_12_1 = emitter.zx(s_b_12_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_12_2: sym_156990_0_return_symbol = s_b_12_1, dominates: s_b_11_0  */
    emitter.store_local(DV_sym_156990_0_return_symbol, s_b_12_1);
    /* ???:4294967295 [F] s_b_12_3: Jump b_11 (const) */
    goto fixed_block_b_11;
  }
  // BLOCK b_13 not fully fixed
  // BLOCK b_14 not fully fixed
  // BLOCK b_15 not fully fixed
  /* b_11,  */
  fixed_block_b_16: 
  {
    /* execute.a64:2720 [F] s_b_16_0=sym_40142_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [F] s_b_16_1 = (u32)s_b_16_0 (const) */
    /* execute.a64:2714 [F] s_b_16_2 = constant u32 1f (const) */
    /* execute.a64:2714 [F] s_b_16_3 = s_b_16_1==s_b_16_2 (const) */
    uint8_t s_b_16_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2714 [F] s_b_16_4: If s_b_16_3: Jump b_17 else b_18 (const) */
    if (s_b_16_3) 
    {
      goto fixed_block_b_17;
    }
    else 
    {
      goto fixed_block_b_18;
    }
  }
  /* b_16,  */
  fixed_block_b_17: 
  {
    /* execute.a64:2714 [F] s_b_17_0 = constant u64 0 (const) */
    /* execute.a64:2714 [F] s_b_17_1: sym_157072_1_temporary_value = s_b_17_0 (const), dominates: s_b_22_0  */
    CV_sym_157072_1_temporary_value = (uint64_t)0ULL;
    emitter.store_local(DV_sym_157072_1_temporary_value, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2714 [F] s_b_17_2: Jump b_22 (const) */
    goto fixed_block_b_22;
  }
  /* b_16,  */
  fixed_block_b_18: 
  {
    /* execute.a64:2714 [F] s_b_18_0=sym_40142_3_parameter_inst.rm (const) */
    /* execute.a64:2714 [D] s_b_18_1 = ReadRegBank 0:s_b_18_0 (u64) */
    auto s_b_18_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_18_1,emitter.const_u8(8));
    }
    /* execute.a64:2714 [D] s_b_18_2: sym_157072_1_temporary_value = s_b_18_1, dominates: s_b_22_0  */
    emitter.store_local(DV_sym_157072_1_temporary_value, s_b_18_1);
    /* execute.a64:2714 [F] s_b_18_3: Jump b_22 (const) */
    goto fixed_block_b_22;
  }
  /* b_11,  */
  fixed_block_b_19: 
  {
    /* execute.a64:2722 [F] s_b_19_0=sym_40142_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [F] s_b_19_1 = (u32)s_b_19_0 (const) */
    /* execute.a64:2709 [F] s_b_19_2 = constant u32 1f (const) */
    /* execute.a64:2709 [F] s_b_19_3 = s_b_19_1==s_b_19_2 (const) */
    uint8_t s_b_19_3 = ((uint8_t)(((uint32_t)insn.rm) == (uint32_t)31ULL));
    /* execute.a64:2709 [F] s_b_19_4: If s_b_19_3: Jump b_20 else b_21 (const) */
    if (s_b_19_3) 
    {
      goto fixed_block_b_20;
    }
    else 
    {
      goto fixed_block_b_21;
    }
  }
  /* b_19,  */
  fixed_block_b_20: 
  {
    /* execute.a64:2709 [F] s_b_20_0 = constant u32 0 (const) */
    /* execute.a64:2709 [F] s_b_20_1: sym_157086_1_temporary_value = s_b_20_0 (const), dominates: s_b_24_0  */
    CV_sym_157086_1_temporary_value = (uint32_t)0ULL;
    emitter.store_local(DV_sym_157086_1_temporary_value, emitter.const_u32((uint32_t)0ULL));
    /* execute.a64:2709 [F] s_b_20_2: Jump b_24 (const) */
    goto fixed_block_b_24;
  }
  /* b_19,  */
  fixed_block_b_21: 
  {
    /* execute.a64:2709 [F] s_b_21_0=sym_40142_3_parameter_inst.rm (const) */
    /* execute.a64:2709 [D] s_b_21_1 = ReadRegBank 1:s_b_21_0 (u32) */
    auto s_b_21_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rm))), emitter.context().types().u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rm))),s_b_21_1,emitter.const_u8(4));
    }
    /* execute.a64:2709 [D] s_b_21_2: sym_157086_1_temporary_value = s_b_21_1, dominates: s_b_24_0  */
    emitter.store_local(DV_sym_157086_1_temporary_value, s_b_21_1);
    /* execute.a64:2709 [F] s_b_21_3: Jump b_24 (const) */
    goto fixed_block_b_24;
  }
  /* b_17, b_18,  */
  fixed_block_b_22: 
  {
    /* execute.a64:2714 [D] s_b_22_0 = sym_157072_1_temporary_value uint64_t */
    auto s_b_22_0 = emitter.load_local(DV_sym_157072_1_temporary_value, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_22_1: sym_157081_0_return_symbol = s_b_22_0, dominates: s_b_23_0  */
    emitter.store_local(DV_sym_157081_0_return_symbol, s_b_22_0);
    /* ???:4294967295 [F] s_b_22_2: Jump b_23 (const) */
    goto fixed_block_b_23;
  }
  /* b_22, b_24,  */
  fixed_block_b_23: 
  {
    /* ???:4294967295 [D] s_b_23_0 = sym_157081_0_return_symbol uint64_t */
    auto s_b_23_0 = emitter.load_local(DV_sym_157081_0_return_symbol, emitter.context().types().u64());
    /* execute.a64:2311 [D] s_b_23_1: sym_40152_0_rm = s_b_23_0, dominates: s_b_3_1  */
    emitter.store_local(DV_sym_40152_0_rm, s_b_23_0);
    /* execute.a64:2314 [F] s_b_23_2 = constant u64 0 (const) */
    /* execute.a64:2314 [D] s_b_23_3 = s_b_23_0==s_b_23_2 */
    auto s_b_23_3 = emitter.cmp_eq(s_b_23_0, emitter.const_u64((uint64_t)0ULL));
    /* execute.a64:2314 [D] s_b_23_4: If s_b_23_3: Jump b_1 else b_3 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_1;
        dynamic_block_queue.push(block_b_1);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_3;
        dynamic_block_queue.push(block_b_3);
        false_target = block;
      }
      emitter.branch(s_b_23_3, true_target, false_target);
    }
    goto fixed_done;
  }
  /* b_20, b_21,  */
  fixed_block_b_24: 
  {
    /* execute.a64:2709 [D] s_b_24_0 = sym_157086_1_temporary_value uint32_t */
    auto s_b_24_0 = emitter.load_local(DV_sym_157086_1_temporary_value, emitter.context().types().u32());
    /* execute.a64:2722 [D] s_b_24_1 = (u64)s_b_24_0 */
    auto s_b_24_1 = emitter.zx(s_b_24_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_24_2: sym_157081_0_return_symbol = s_b_24_1, dominates: s_b_23_0  */
    emitter.store_local(DV_sym_157081_0_return_symbol, s_b_24_1);
    /* ???:4294967295 [F] s_b_24_3: Jump b_23 (const) */
    goto fixed_block_b_23;
  }
  // BLOCK b_25 not fully fixed
  // BLOCK b_26 not fully fixed
  fixed_done:
  if (dynamic_block_queue.size() > 0) 
  {
    std::set<captive::arch::dbt::el::Block *> emitted_blocks;
    while (dynamic_block_queue.size() > 0) 
    {
      captive::arch::dbt::el::Block *block_index = dynamic_block_queue.front();
      dynamic_block_queue.pop();
      if (emitted_blocks.count(block_index)) continue;
      emitted_blocks.insert(block_index);
      if (block_index == block_b_1) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_1);
        /* execute.a64:2315 [F] s_b_1_0 = constant u64 0 (const) */
        /* execute.a64:2315 [D] s_b_1_1: sym_40163_0_result = s_b_1_0, dominates: s_b_2_1  */
        emitter.store_local(DV_sym_40163_0_result, emitter.const_u64((uint64_t)0ULL));
        /* execute.a64:2315 [F] s_b_1_2: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_2) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_2);
        /* execute.a64:2320 [F] s_b_2_0=sym_40142_3_parameter_inst.sf (const) */
        /* execute.a64:2320 [D] s_b_2_1 = sym_40163_0_result uint64_t */
        auto s_b_2_1 = emitter.load_local(DV_sym_40163_0_result, emitter.context().types().u64());
        /* execute.a64:2320 [D] s_b_2_2: sym_157032_3_parameter_value = s_b_2_1, dominates: s_b_13_1 s_b_14_1  */
        emitter.store_local(DV_sym_157032_3_parameter_value, s_b_2_1);
        /* execute.a64:2753 [F] s_b_2_3: If s_b_2_0: Jump b_13 else b_14 (const) */
        if (insn.sf) 
        {
          auto block = block_b_13;
          dynamic_block_queue.push(block_b_13);
          emitter.jump(block);
        }
        else 
        {
          auto block = block_b_14;
          dynamic_block_queue.push(block_b_14);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_3) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_3);
        /* execute.a64:2317 [D] s_b_3_0 = sym_40147_0_rn uint64_t */
        auto s_b_3_0 = emitter.load_local(DV_sym_40147_0_rn, emitter.context().types().u64());
        /* execute.a64:2317 [D] s_b_3_1 = sym_40152_0_rm uint64_t */
        auto s_b_3_1 = emitter.load_local(DV_sym_40152_0_rm, emitter.context().types().u64());
        /* execute.a64:2317 [D] s_b_3_2 = s_b_3_0/s_b_3_1 */
        auto s_b_3_2 = emitter.div(s_b_3_0, s_b_3_1);
        /* execute.a64:2317 [D] s_b_3_3: sym_40163_0_result = s_b_3_2, dominates: s_b_2_1  */
        emitter.store_local(DV_sym_40163_0_result, s_b_3_2);
        /* execute.a64:2317 [F] s_b_3_4: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_13) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_13);
        /* execute.a64:2754 [F] s_b_13_0=sym_40142_3_parameter_inst.rd (const) */
        /* execute.a64:2754 [D] s_b_13_1 = sym_157032_3_parameter_value uint64_t */
        auto s_b_13_1 = emitter.load_local(DV_sym_157032_3_parameter_value, emitter.context().types().u64());
        /* execute.a64:2754 [D] s_b_13_2: sym_157127_3_parameter_value = s_b_13_1, dominates: s_b_25_1  */
        emitter.store_local(DV_sym_157127_3_parameter_value, s_b_13_1);
        /* execute.a64:2745 [F] s_b_13_3 = (u32)s_b_13_0 (const) */
        /* execute.a64:2745 [F] s_b_13_4 = constant u32 1f (const) */
        /* execute.a64:2745 [F] s_b_13_5 = s_b_13_3==s_b_13_4 (const) */
        uint8_t s_b_13_5 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
        /* execute.a64:2745 [F] s_b_13_6: If s_b_13_5: Jump b_15 else b_25 (const) */
        if (s_b_13_5) 
        {
          auto block = block_b_15;
          dynamic_block_queue.push(block_b_15);
          emitter.jump(block);
        }
        else 
        {
          auto block = block_b_25;
          dynamic_block_queue.push(block_b_25);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_14) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_14);
        /* execute.a64:2756 [F] s_b_14_0=sym_40142_3_parameter_inst.rd (const) */
        /* execute.a64:2756 [D] s_b_14_1 = sym_157032_3_parameter_value uint64_t */
        auto s_b_14_1 = emitter.load_local(DV_sym_157032_3_parameter_value, emitter.context().types().u64());
        /* execute.a64:2756 [D] s_b_14_2 = (u32)s_b_14_1 */
        auto s_b_14_2 = emitter.truncate(s_b_14_1, emitter.context().types().u32());
        /* execute.a64:2756 [D] s_b_14_3 = (u64)s_b_14_2 */
        auto s_b_14_3 = emitter.zx(s_b_14_2, emitter.context().types().u64());
        /* execute.a64:2756 [D] s_b_14_4: sym_157149_3_parameter_value = s_b_14_3, dominates: s_b_26_1  */
        emitter.store_local(DV_sym_157149_3_parameter_value, s_b_14_3);
        /* execute.a64:2745 [F] s_b_14_5 = (u32)s_b_14_0 (const) */
        /* execute.a64:2745 [F] s_b_14_6 = constant u32 1f (const) */
        /* execute.a64:2745 [F] s_b_14_7 = s_b_14_5==s_b_14_6 (const) */
        uint8_t s_b_14_7 = ((uint8_t)(((uint32_t)insn.rd) == (uint32_t)31ULL));
        /* execute.a64:2745 [F] s_b_14_8: If s_b_14_7: Jump b_15 else b_26 (const) */
        if (s_b_14_7) 
        {
          auto block = block_b_15;
          dynamic_block_queue.push(block_b_15);
          emitter.jump(block);
        }
        else 
        {
          auto block = block_b_26;
          dynamic_block_queue.push(block_b_26);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_15) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_15);
        /* ???:4294967295 [F] s_b_15_0: Return */
        emitter.jump(__exit_block);
      }
      else if (block_index == block_b_25) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_25);
        /* execute.a64:2747 [F] s_b_25_0=sym_40142_3_parameter_inst.rd (const) */
        /* execute.a64:2747 [D] s_b_25_1 = sym_157127_3_parameter_value uint64_t */
        auto s_b_25_1 = emitter.load_local(DV_sym_157127_3_parameter_value, emitter.context().types().u64());
        /* execute.a64:2747 [D] s_b_25_2: WriteRegBank 0:s_b_25_0 = s_b_25_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_25_1,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_25_1);
        /* execute.a64:0 [F] s_b_25_3: Jump b_15 (const) */
        {
          auto block = block_b_15;
          dynamic_block_queue.push(block_b_15);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_26) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_26);
        /* execute.a64:2747 [F] s_b_26_0=sym_40142_3_parameter_inst.rd (const) */
        /* execute.a64:2747 [D] s_b_26_1 = sym_157149_3_parameter_value uint64_t */
        auto s_b_26_1 = emitter.load_local(DV_sym_157149_3_parameter_value, emitter.context().types().u64());
        /* execute.a64:2747 [D] s_b_26_2: WriteRegBank 0:s_b_26_0 = s_b_26_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_26_1,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rd))),s_b_26_1);
        /* execute.a64:0 [F] s_b_26_3: Jump b_15 (const) */
        {
          auto block = block_b_15;
          dynamic_block_queue.push(block_b_15);
          emitter.jump(block);
        }
      }
    }
  }
  else 
  {
    emitter.jump(__exit_block);
  }
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_ushl(const arm64_decode_a64_SIMD_THREE_SAME&insn, captive::arch::dbt::el::Emitter& emitter)
{
  std::queue<captive::arch::dbt::el::Block *> dynamic_block_queue;
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto block_b_2 = emitter.context().create_block();
  auto block_b_4 = emitter.context().create_block();
  auto block_b_5 = emitter.context().create_block();
  auto block_b_6 = emitter.context().create_block();
  auto block_b_7 = emitter.context().create_block();
  auto block_b_8 = emitter.context().create_block();
  auto block_b_9 = emitter.context().create_block();
  auto block_b_11 = emitter.context().create_block();
  auto block_b_12 = emitter.context().create_block();
  auto block_b_13 = emitter.context().create_block();
  auto block_b_14 = emitter.context().create_block();
  auto block_b_15 = emitter.context().create_block();
  auto block_b_16 = emitter.context().create_block();
  auto block_b_17 = emitter.context().create_block();
  auto block_b_18 = emitter.context().create_block();
  auto block_b_19 = emitter.context().create_block();
  auto block_b_20 = emitter.context().create_block();
  auto block_b_21 = emitter.context().create_block();
  auto block_b_22 = emitter.context().create_block();
  auto block_b_23 = emitter.context().create_block();
  auto block_b_24 = emitter.context().create_block();
  auto block_b_25 = emitter.context().create_block();
  auto block_b_26 = emitter.context().create_block();
  auto block_b_27 = emitter.context().create_block();
  auto block_b_28 = emitter.context().create_block();
  auto block_b_29 = emitter.context().create_block();
  auto block_b_30 = emitter.context().create_block();
  auto block_b_31 = emitter.context().create_block();
  auto block_b_32 = emitter.context().create_block();
  auto block_b_33 = emitter.context().create_block();
  auto block_b_34 = emitter.context().create_block();
  auto block_b_36 = emitter.context().create_block();
  auto block_b_37 = emitter.context().create_block();
  auto block_b_38 = emitter.context().create_block();
  auto block_b_39 = emitter.context().create_block();
  auto block_b_40 = emitter.context().create_block();
  auto block_b_41 = emitter.context().create_block();
  auto block_b_42 = emitter.context().create_block();
  auto block_b_43 = emitter.context().create_block();
  auto block_b_44 = emitter.context().create_block();
  auto block_b_45 = emitter.context().create_block();
  auto block_b_46 = emitter.context().create_block();
  auto block_b_47 = emitter.context().create_block();
  auto block_b_48 = emitter.context().create_block();
  auto block_b_49 = emitter.context().create_block();
  auto block_b_50 = emitter.context().create_block();
  auto block_b_51 = emitter.context().create_block();
  auto block_b_52 = emitter.context().create_block();
  auto block_b_53 = emitter.context().create_block();
  auto block_b_54 = emitter.context().create_block();
  auto block_b_55 = emitter.context().create_block();
  auto block_b_56 = emitter.context().create_block();
  auto block_b_57 = emitter.context().create_block();
  auto block_b_58 = emitter.context().create_block();
  auto block_b_59 = emitter.context().create_block();
  auto block_b_60 = emitter.context().create_block();
  auto block_b_61 = emitter.context().create_block();
  auto block_b_62 = emitter.context().create_block();
  auto block_b_63 = emitter.context().create_block();
  auto block_b_64 = emitter.context().create_block();
  auto block_b_65 = emitter.context().create_block();
  auto block_b_66 = emitter.context().create_block();
  auto block_b_67 = emitter.context().create_block();
  auto block_b_68 = emitter.context().create_block();
  auto block_b_69 = emitter.context().create_block();
  auto block_b_70 = emitter.context().create_block();
  auto block_b_71 = emitter.context().create_block();
  auto block_b_72 = emitter.context().create_block();
  auto block_b_73 = emitter.context().create_block();
  auto block_b_74 = emitter.context().create_block();
  auto block_b_75 = emitter.context().create_block();
  auto block_b_76 = emitter.context().create_block();
  auto block_b_77 = emitter.context().create_block();
  auto block_b_78 = emitter.context().create_block();
  auto block_b_79 = emitter.context().create_block();
  auto block_b_80 = emitter.context().create_block();
  auto block_b_81 = emitter.context().create_block();
  auto block_b_82 = emitter.context().create_block();
  auto block_b_83 = emitter.context().create_block();
  auto block_b_85 = emitter.context().create_block();
  auto block_b_86 = emitter.context().create_block();
  auto block_b_87 = emitter.context().create_block();
  auto block_b_88 = emitter.context().create_block();
  auto block_b_89 = emitter.context().create_block();
  auto block_b_90 = emitter.context().create_block();
  auto block_b_91 = emitter.context().create_block();
  auto block_b_92 = emitter.context().create_block();
  auto block_b_93 = emitter.context().create_block();
  auto block_b_94 = emitter.context().create_block();
  auto block_b_95 = emitter.context().create_block();
  auto block_b_96 = emitter.context().create_block();
  auto block_b_98 = emitter.context().create_block();
  auto block_b_99 = emitter.context().create_block();
  auto block_b_100 = emitter.context().create_block();
  auto block_b_101 = emitter.context().create_block();
  auto block_b_102 = emitter.context().create_block();
  auto block_b_103 = emitter.context().create_block();
  auto block_b_104 = emitter.context().create_block();
  auto block_b_105 = emitter.context().create_block();
  auto block_b_106 = emitter.context().create_block();
  auto block_b_107 = emitter.context().create_block();
  auto block_b_108 = emitter.context().create_block();
  auto block_b_109 = emitter.context().create_block();
  auto block_b_110 = emitter.context().create_block();
  auto block_b_111 = emitter.context().create_block();
  auto block_b_112 = emitter.context().create_block();
  auto block_b_113 = emitter.context().create_block();
  auto block_b_114 = emitter.context().create_block();
  auto block_b_115 = emitter.context().create_block();
  auto block_b_116 = emitter.context().create_block();
  auto block_b_117 = emitter.context().create_block();
  auto block_b_118 = emitter.context().create_block();
  auto block_b_119 = emitter.context().create_block();
  auto block_b_120 = emitter.context().create_block();
  auto block_b_121 = emitter.context().create_block();
  auto block_b_123 = emitter.context().create_block();
  auto block_b_124 = emitter.context().create_block();
  auto block_b_125 = emitter.context().create_block();
  auto block_b_126 = emitter.context().create_block();
  auto block_b_127 = emitter.context().create_block();
  auto block_b_128 = emitter.context().create_block();
  auto block_b_130 = emitter.context().create_block();
  auto block_b_131 = emitter.context().create_block();
  auto block_b_132 = emitter.context().create_block();
  auto block_b_133 = emitter.context().create_block();
  auto block_b_134 = emitter.context().create_block();
  auto block_b_135 = emitter.context().create_block();
  auto block_b_136 = emitter.context().create_block();
  auto block_b_137 = emitter.context().create_block();
  auto block_b_138 = emitter.context().create_block();
  auto block_b_139 = emitter.context().create_block();
  auto block_b_140 = emitter.context().create_block();
  auto block_b_141 = emitter.context().create_block();
  auto block_b_143 = emitter.context().create_block();
  auto block_b_144 = emitter.context().create_block();
  auto block_b_145 = emitter.context().create_block();
  auto block_b_146 = emitter.context().create_block();
  auto block_b_147 = emitter.context().create_block();
  auto block_b_148 = emitter.context().create_block();
  auto DV_sym_41939_0_rn = emitter.alloc_local(emitter.context().types().u64(), true);
  auto DV_sym_41944_0_rm = emitter.alloc_local(emitter.context().types().s8(), true);
  auto DV_sym_42004_0_rn = emitter.alloc_local(emitter.context().types().v8u8(), true);
  auto DV_sym_42008_0_rm = emitter.alloc_local(emitter.context().types().v8s8(), true);
  wutils::Vector<uint8_t, 16> CV_sym_42013_0_rd;
  auto DV_sym_42013_0_rd = emitter.alloc_local(emitter.context().types().v16u8(), true);
  auto DV_sym_42410_0_rn = emitter.alloc_local(emitter.context().types().v16u8(), true);
  auto DV_sym_42414_0_rm = emitter.alloc_local(emitter.context().types().v16s8(), true);
  wutils::Vector<uint8_t, 16> CV_sym_42419_0_rd;
  auto DV_sym_42419_0_rd = emitter.alloc_local(emitter.context().types().v16u8(), true);
  auto DV_sym_43200_0_rn = emitter.alloc_local(emitter.context().types().v4u16(), true);
  auto DV_sym_43204_0_rm = emitter.alloc_local(emitter.context().types().v4s16(), true);
  wutils::Vector<uint16_t, 8> CV_sym_43209_0_rd;
  auto DV_sym_43209_0_rd = emitter.alloc_local(emitter.context().types().v8u16(), true);
  auto DV_sym_43414_0_rn = emitter.alloc_local(emitter.context().types().v8u16(), true);
  auto DV_sym_43418_0_rm = emitter.alloc_local(emitter.context().types().v8s16(), true);
  wutils::Vector<uint16_t, 8> CV_sym_43423_0_rd;
  auto DV_sym_43423_0_rd = emitter.alloc_local(emitter.context().types().v8u16(), true);
  auto DV_sym_43820_0_rn = emitter.alloc_local(emitter.context().types().v2u32(), true);
  auto DV_sym_43824_0_rm = emitter.alloc_local(emitter.context().types().v2s32(), true);
  wutils::Vector<uint32_t, 4> CV_sym_43829_0_rd;
  auto DV_sym_43829_0_rd = emitter.alloc_local(emitter.context().types().v4u32(), true);
  auto DV_sym_43936_0_rn = emitter.alloc_local(emitter.context().types().v4u32(), true);
  auto DV_sym_43940_0_rm = emitter.alloc_local(emitter.context().types().v4s32(), true);
  wutils::Vector<uint32_t, 4> CV_sym_43945_0_rd;
  auto DV_sym_43945_0_rd = emitter.alloc_local(emitter.context().types().v4u32(), true);
  auto DV_sym_44146_0_rn = emitter.alloc_local(emitter.context().types().v2u64(), true);
  auto DV_sym_44150_0_rm = emitter.alloc_local(emitter.context().types().v2s64(), true);
  wutils::Vector<uint64_t, 2> CV_sym_44155_0_rd;
  auto DV_sym_44155_0_rd = emitter.alloc_local(emitter.context().types().v2u64(), true);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:3052 [F] s_b_0_0=sym_41930_3_parameter_inst.SCALAR (const) */
    /* execute.simd:3052 [F] s_b_0_1: If s_b_0_0: Jump b_1 else b_3 (const) */
    if (insn.SCALAR) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_3;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.simd:3053 [F] s_b_1_0=sym_41930_3_parameter_inst.rn (const) */
    /* execute.simd:6355 [D] s_b_1_1 = ReadRegBank 7:s_b_1_0 (u64) */
    auto s_b_1_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_1_1,emitter.const_u8(8));
    }
    /* execute.simd:3053 [D] s_b_1_2: sym_41939_0_rn = s_b_1_1, dominates: s_b_6_1 s_b_9_1  */
    emitter.store_local(DV_sym_41939_0_rn, s_b_1_1);
    /* execute.simd:3054 [F] s_b_1_3=sym_41930_3_parameter_inst.rm (const) */
    /* execute.simd:6355 [D] s_b_1_4 = ReadRegBank 7:s_b_1_3 (u64) */
    auto s_b_1_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_1_4,emitter.const_u8(8));
    }
    /* execute.simd:3054 [D] s_b_1_5 = (s8)s_b_1_4 */
    auto s_b_1_5 = emitter.truncate(s_b_1_4, emitter.context().types().s8());
    /* execute.simd:3054 [D] s_b_1_6: sym_41944_0_rm = s_b_1_5, dominates: s_b_5_0 s_b_6_2 s_b_7_0 s_b_9_2  */
    emitter.store_local(DV_sym_41944_0_rm, s_b_1_5);
    /* execute.simd:3056 [F] s_b_1_7 = constant s32 3f (const) */
    /* execute.simd:3056 [D] s_b_1_8 = (s32)s_b_1_5 */
    auto s_b_1_8 = emitter.sx(s_b_1_5, emitter.context().types().s32());
    /* execute.simd:3056 [D] s_b_1_9 = s_b_1_8>s_b_1_7 */
    auto s_b_1_9 = emitter.cmp_gt(s_b_1_8, emitter.const_s32((int32_t)63ULL));
    /* execute.simd:3056 [D] s_b_1_10: If s_b_1_9: Jump b_4 else b_5 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_4;
        dynamic_block_queue.push(block_b_4);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_5;
        dynamic_block_queue.push(block_b_5);
        false_target = block;
      }
      emitter.branch(s_b_1_9, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_2 not fully fixed
  /* b_0,  */
  fixed_block_b_3: 
  {
    /* execute.simd:3066 [F] s_b_3_0=sym_41930_3_parameter_inst.arrangement (const) */
    /* execute.simd:3067 [F] s_b_3_1 = constant s32 0 (const) */
    /* execute.simd:3083 [F] s_b_3_2 = constant s32 1 (const) */
    /* execute.simd:3099 [F] s_b_3_3 = constant s32 2 (const) */
    /* execute.simd:3115 [F] s_b_3_4 = constant s32 3 (const) */
    /* execute.simd:3131 [F] s_b_3_5 = constant s32 4 (const) */
    /* execute.simd:3147 [F] s_b_3_6 = constant s32 5 (const) */
    /* execute.simd:3163 [F] s_b_3_7 = constant s32 6 (const) */
    /* execute.simd:3066 [F] s_b_3_8: Switch s_b_3_0: < <todo> > def b_149 (const) -> b_10, b_35, b_84, b_97, b_122, b_129, b_142, b_149,  */
    switch (insn.arrangement) 
    {
    case (int32_t)0ULL:
      goto fixed_block_b_10;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_35;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_84;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_97;
      break;
    case (int32_t)4ULL:
      goto fixed_block_b_122;
      break;
    case (int32_t)5ULL:
      goto fixed_block_b_129;
      break;
    case (int32_t)6ULL:
      goto fixed_block_b_142;
      break;
    default:
      goto fixed_block_b_149;
    }
  }
  // BLOCK b_4 not fully fixed
  // BLOCK b_5 not fully fixed
  // BLOCK b_6 not fully fixed
  // BLOCK b_7 not fully fixed
  // BLOCK b_8 not fully fixed
  // BLOCK b_9 not fully fixed
  /* b_3,  */
  fixed_block_b_10: 
  {
    /* execute.simd:3068 [F] s_b_10_0=sym_41930_3_parameter_inst.rn (const) */
    /* execute.simd:3068 [D] s_b_10_1 = ReadRegBank 15:s_b_10_0 (v8u8) */
    auto s_b_10_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_10_1,emitter.const_u8(8));
    }
    /* execute.simd:3068 [D] s_b_10_2: sym_42004_0_rn = s_b_10_1, dominates: s_b_11_0 s_b_14_0 s_b_17_0 s_b_20_0 s_b_23_0 s_b_26_0 s_b_29_0 s_b_32_0 s_b_34_0 s_b_31_0 s_b_28_0 s_b_25_0 s_b_22_0 s_b_19_0 s_b_16_0 s_b_13_0  */
    emitter.store_local(DV_sym_42004_0_rn, s_b_10_1);
    /* execute.simd:3069 [F] s_b_10_3=sym_41930_3_parameter_inst.rm (const) */
    /* execute.simd:3069 [D] s_b_10_4 = ReadRegBank 15:s_b_10_3 (v8u8) */
    auto s_b_10_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_10_4,emitter.const_u8(8));
    }
    /* execute.simd:3069 [D] s_b_10_5 = (v8s8)s_b_10_4 */
    auto s_b_10_5 = emitter.reinterpret(s_b_10_4, emitter.context().types().v8s8());
    /* execute.simd:3069 [D] s_b_10_6: sym_42008_0_rm = s_b_10_5, dominates: s_b_11_3 s_b_12_0 s_b_14_3 s_b_15_0 s_b_17_3 s_b_18_0 s_b_20_3 s_b_21_0 s_b_23_3 s_b_24_0 s_b_26_3 s_b_27_0 s_b_29_3 s_b_30_0 s_b_32_3 s_b_34_3 s_b_31_3 s_b_28_3 s_b_25_3 s_b_22_3 s_b_19_3 s_b_16_3 s_b_13_3  */
    emitter.store_local(DV_sym_42008_0_rm, s_b_10_5);
    /* ???:4294967295 [F] s_b_10_7 = constant v16u8 
    {
    }
    (const) */
    /* execute.simd:3071 [F] s_b_10_8: sym_42013_0_rd = s_b_10_7 (const), dominates: s_b_11_9 s_b_13_8  */
    CV_sym_42013_0_rd = wutils::Vector<uint8_t, 16>(0);
    emitter.store_local(DV_sym_42013_0_rd, emitter.constant_vector_splat(wutils::Vector<uint8_t, 16>(0)[0], emitter.context().types().v16u8()));
    /* ???:4294967295 [F] s_b_10_9 = constant u8 0 (const) */
    /* execute.simd:3073 [D] s_b_10_5[s_b_10_9] */
    auto s_b_10_10 = emitter.vector_extract(s_b_10_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3073 [F] s_b_10_11 = constant s32 0 (const) */
    /* execute.simd:3073 [D] s_b_10_12 = (s32)s_b_10_10 */
    auto s_b_10_12 = emitter.sx(s_b_10_10, emitter.context().types().s32());
    /* execute.simd:3073 [D] s_b_10_13 = s_b_10_12<s_b_10_11 */
    auto s_b_10_13 = emitter.cmp_lt(s_b_10_12, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3073 [D] s_b_10_14: If s_b_10_13: Jump b_11 else b_13 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_11;
        dynamic_block_queue.push(block_b_11);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_13;
        dynamic_block_queue.push(block_b_13);
        false_target = block;
      }
      emitter.branch(s_b_10_13, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_11 not fully fixed
  // BLOCK b_12 not fully fixed
  // BLOCK b_13 not fully fixed
  // BLOCK b_14 not fully fixed
  // BLOCK b_15 not fully fixed
  // BLOCK b_16 not fully fixed
  // BLOCK b_17 not fully fixed
  // BLOCK b_18 not fully fixed
  // BLOCK b_19 not fully fixed
  // BLOCK b_20 not fully fixed
  // BLOCK b_21 not fully fixed
  // BLOCK b_22 not fully fixed
  // BLOCK b_23 not fully fixed
  // BLOCK b_24 not fully fixed
  // BLOCK b_25 not fully fixed
  // BLOCK b_26 not fully fixed
  // BLOCK b_27 not fully fixed
  // BLOCK b_28 not fully fixed
  // BLOCK b_29 not fully fixed
  // BLOCK b_30 not fully fixed
  // BLOCK b_31 not fully fixed
  // BLOCK b_32 not fully fixed
  // BLOCK b_33 not fully fixed
  // BLOCK b_34 not fully fixed
  /* b_3,  */
  fixed_block_b_35: 
  {
    /* execute.simd:3084 [F] s_b_35_0=sym_41930_3_parameter_inst.rn (const) */
    /* execute.simd:3084 [D] s_b_35_1 = ReadRegBank 16:s_b_35_0 (v16u8) */
    auto s_b_35_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_35_1,emitter.const_u8(16));
    }
    /* execute.simd:3084 [D] s_b_35_2: sym_42410_0_rn = s_b_35_1, dominates: s_b_36_0 s_b_39_0 s_b_42_0 s_b_45_0 s_b_48_0 s_b_51_0 s_b_54_0 s_b_57_0 s_b_60_0 s_b_63_0 s_b_66_0 s_b_69_0 s_b_72_0 s_b_75_0 s_b_78_0 s_b_81_0 s_b_83_0 s_b_80_0 s_b_77_0 s_b_74_0 s_b_71_0 s_b_68_0 s_b_65_0 s_b_62_0 s_b_59_0 s_b_56_0 s_b_53_0 s_b_50_0 s_b_47_0 s_b_44_0 s_b_41_0 s_b_38_0  */
    emitter.store_local(DV_sym_42410_0_rn, s_b_35_1);
    /* execute.simd:3085 [F] s_b_35_3=sym_41930_3_parameter_inst.rm (const) */
    /* execute.simd:3085 [D] s_b_35_4 = ReadRegBank 16:s_b_35_3 (v16u8) */
    auto s_b_35_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v16u8());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_35_4,emitter.const_u8(16));
    }
    /* execute.simd:3085 [D] s_b_35_5 = (v16s8)s_b_35_4 */
    auto s_b_35_5 = emitter.reinterpret(s_b_35_4, emitter.context().types().v16s8());
    /* execute.simd:3085 [D] s_b_35_6: sym_42414_0_rm = s_b_35_5, dominates: s_b_36_3 s_b_37_0 s_b_39_3 s_b_40_0 s_b_42_3 s_b_43_0 s_b_45_3 s_b_46_0 s_b_48_3 s_b_49_0 s_b_51_3 s_b_52_0 s_b_54_3 s_b_55_0 s_b_57_3 s_b_58_0 s_b_60_3 s_b_61_0 s_b_63_3 s_b_64_0 s_b_66_3 s_b_67_0 s_b_69_3 s_b_70_0 s_b_72_3 s_b_73_0 s_b_75_3 s_b_76_0 s_b_78_3 s_b_79_0 s_b_81_3 s_b_83_3 s_b_80_3 s_b_77_3 s_b_74_3 s_b_71_3 s_b_68_3 s_b_65_3 s_b_62_3 s_b_59_3 s_b_56_3 s_b_53_3 s_b_50_3 s_b_47_3 s_b_44_3 s_b_41_3 s_b_38_3  */
    emitter.store_local(DV_sym_42414_0_rm, s_b_35_5);
    /* ???:4294967295 [F] s_b_35_7 = constant v16u8 
    {
    }
    (const) */
    /* execute.simd:3087 [F] s_b_35_8: sym_42419_0_rd = s_b_35_7 (const), dominates: s_b_36_9 s_b_38_8  */
    CV_sym_42419_0_rd = wutils::Vector<uint8_t, 16>(0);
    emitter.store_local(DV_sym_42419_0_rd, emitter.constant_vector_splat(wutils::Vector<uint8_t, 16>(0)[0], emitter.context().types().v16u8()));
    /* ???:4294967295 [F] s_b_35_9 = constant u8 0 (const) */
    /* execute.simd:3089 [D] s_b_35_5[s_b_35_9] */
    auto s_b_35_10 = emitter.vector_extract(s_b_35_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3089 [F] s_b_35_11 = constant s32 0 (const) */
    /* execute.simd:3089 [D] s_b_35_12 = (s32)s_b_35_10 */
    auto s_b_35_12 = emitter.sx(s_b_35_10, emitter.context().types().s32());
    /* execute.simd:3089 [D] s_b_35_13 = s_b_35_12<s_b_35_11 */
    auto s_b_35_13 = emitter.cmp_lt(s_b_35_12, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3089 [D] s_b_35_14: If s_b_35_13: Jump b_36 else b_38 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_36;
        dynamic_block_queue.push(block_b_36);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_38;
        dynamic_block_queue.push(block_b_38);
        false_target = block;
      }
      emitter.branch(s_b_35_13, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_36 not fully fixed
  // BLOCK b_37 not fully fixed
  // BLOCK b_38 not fully fixed
  // BLOCK b_39 not fully fixed
  // BLOCK b_40 not fully fixed
  // BLOCK b_41 not fully fixed
  // BLOCK b_42 not fully fixed
  // BLOCK b_43 not fully fixed
  // BLOCK b_44 not fully fixed
  // BLOCK b_45 not fully fixed
  // BLOCK b_46 not fully fixed
  // BLOCK b_47 not fully fixed
  // BLOCK b_48 not fully fixed
  // BLOCK b_49 not fully fixed
  // BLOCK b_50 not fully fixed
  // BLOCK b_51 not fully fixed
  // BLOCK b_52 not fully fixed
  // BLOCK b_53 not fully fixed
  // BLOCK b_54 not fully fixed
  // BLOCK b_55 not fully fixed
  // BLOCK b_56 not fully fixed
  // BLOCK b_57 not fully fixed
  // BLOCK b_58 not fully fixed
  // BLOCK b_59 not fully fixed
  // BLOCK b_60 not fully fixed
  // BLOCK b_61 not fully fixed
  // BLOCK b_62 not fully fixed
  // BLOCK b_63 not fully fixed
  // BLOCK b_64 not fully fixed
  // BLOCK b_65 not fully fixed
  // BLOCK b_66 not fully fixed
  // BLOCK b_67 not fully fixed
  // BLOCK b_68 not fully fixed
  // BLOCK b_69 not fully fixed
  // BLOCK b_70 not fully fixed
  // BLOCK b_71 not fully fixed
  // BLOCK b_72 not fully fixed
  // BLOCK b_73 not fully fixed
  // BLOCK b_74 not fully fixed
  // BLOCK b_75 not fully fixed
  // BLOCK b_76 not fully fixed
  // BLOCK b_77 not fully fixed
  // BLOCK b_78 not fully fixed
  // BLOCK b_79 not fully fixed
  // BLOCK b_80 not fully fixed
  // BLOCK b_81 not fully fixed
  // BLOCK b_82 not fully fixed
  // BLOCK b_83 not fully fixed
  /* b_3,  */
  fixed_block_b_84: 
  {
    /* execute.simd:3100 [F] s_b_84_0=sym_41930_3_parameter_inst.rn (const) */
    /* execute.simd:3100 [D] s_b_84_1 = ReadRegBank 17:s_b_84_0 (v4u16) */
    auto s_b_84_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_84_1,emitter.const_u8(8));
    }
    /* execute.simd:3100 [D] s_b_84_2: sym_43200_0_rn = s_b_84_1, dominates: s_b_85_0 s_b_88_0 s_b_91_0 s_b_94_0 s_b_96_0 s_b_93_0 s_b_90_0 s_b_87_0  */
    emitter.store_local(DV_sym_43200_0_rn, s_b_84_1);
    /* execute.simd:3101 [F] s_b_84_3=sym_41930_3_parameter_inst.rm (const) */
    /* execute.simd:3101 [D] s_b_84_4 = ReadRegBank 17:s_b_84_3 (v4u16) */
    auto s_b_84_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_84_4,emitter.const_u8(8));
    }
    /* execute.simd:3101 [D] s_b_84_5 = (v4s16)s_b_84_4 */
    auto s_b_84_5 = emitter.reinterpret(s_b_84_4, emitter.context().types().v4s16());
    /* execute.simd:3101 [D] s_b_84_6: sym_43204_0_rm = s_b_84_5, dominates: s_b_85_3 s_b_86_0 s_b_88_3 s_b_89_0 s_b_91_3 s_b_92_0 s_b_94_3 s_b_96_3 s_b_93_3 s_b_90_3 s_b_87_3  */
    emitter.store_local(DV_sym_43204_0_rm, s_b_84_5);
    /* ???:4294967295 [F] s_b_84_7 = constant v8u16 
    {
    }
    (const) */
    /* execute.simd:3103 [F] s_b_84_8: sym_43209_0_rd = s_b_84_7 (const), dominates: s_b_85_9 s_b_87_8  */
    CV_sym_43209_0_rd = wutils::Vector<uint16_t, 8>(0);
    emitter.store_local(DV_sym_43209_0_rd, emitter.constant_vector_splat(wutils::Vector<uint16_t, 8>(0)[0], emitter.context().types().v8u16()));
    /* ???:4294967295 [F] s_b_84_9 = constant u8 0 (const) */
    /* execute.simd:3105 [D] s_b_84_5[s_b_84_9] */
    auto s_b_84_10 = emitter.vector_extract(s_b_84_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3105 [F] s_b_84_11 = constant s32 0 (const) */
    /* execute.simd:3105 [D] s_b_84_12 = (s32)s_b_84_10 */
    auto s_b_84_12 = emitter.sx(s_b_84_10, emitter.context().types().s32());
    /* execute.simd:3105 [D] s_b_84_13 = s_b_84_12<s_b_84_11 */
    auto s_b_84_13 = emitter.cmp_lt(s_b_84_12, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3105 [D] s_b_84_14: If s_b_84_13: Jump b_85 else b_87 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_85;
        dynamic_block_queue.push(block_b_85);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_87;
        dynamic_block_queue.push(block_b_87);
        false_target = block;
      }
      emitter.branch(s_b_84_13, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_85 not fully fixed
  // BLOCK b_86 not fully fixed
  // BLOCK b_87 not fully fixed
  // BLOCK b_88 not fully fixed
  // BLOCK b_89 not fully fixed
  // BLOCK b_90 not fully fixed
  // BLOCK b_91 not fully fixed
  // BLOCK b_92 not fully fixed
  // BLOCK b_93 not fully fixed
  // BLOCK b_94 not fully fixed
  // BLOCK b_95 not fully fixed
  // BLOCK b_96 not fully fixed
  /* b_3,  */
  fixed_block_b_97: 
  {
    /* execute.simd:3116 [F] s_b_97_0=sym_41930_3_parameter_inst.rn (const) */
    /* execute.simd:3116 [D] s_b_97_1 = ReadRegBank 18:s_b_97_0 (v8u16) */
    auto s_b_97_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_97_1,emitter.const_u8(16));
    }
    /* execute.simd:3116 [D] s_b_97_2: sym_43414_0_rn = s_b_97_1, dominates: s_b_98_0 s_b_101_0 s_b_104_0 s_b_107_0 s_b_110_0 s_b_113_0 s_b_116_0 s_b_119_0 s_b_121_0 s_b_118_0 s_b_115_0 s_b_112_0 s_b_109_0 s_b_106_0 s_b_103_0 s_b_100_0  */
    emitter.store_local(DV_sym_43414_0_rn, s_b_97_1);
    /* execute.simd:3117 [F] s_b_97_3=sym_41930_3_parameter_inst.rm (const) */
    /* execute.simd:3117 [D] s_b_97_4 = ReadRegBank 18:s_b_97_3 (v8u16) */
    auto s_b_97_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v8u16());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_97_4,emitter.const_u8(16));
    }
    /* execute.simd:3117 [D] s_b_97_5 = (v8s16)s_b_97_4 */
    auto s_b_97_5 = emitter.reinterpret(s_b_97_4, emitter.context().types().v8s16());
    /* execute.simd:3117 [D] s_b_97_6: sym_43418_0_rm = s_b_97_5, dominates: s_b_98_3 s_b_99_0 s_b_101_3 s_b_102_0 s_b_104_3 s_b_105_0 s_b_107_3 s_b_108_0 s_b_110_3 s_b_111_0 s_b_113_3 s_b_114_0 s_b_116_3 s_b_117_0 s_b_119_3 s_b_121_3 s_b_118_3 s_b_115_3 s_b_112_3 s_b_109_3 s_b_106_3 s_b_103_3 s_b_100_3  */
    emitter.store_local(DV_sym_43418_0_rm, s_b_97_5);
    /* ???:4294967295 [F] s_b_97_7 = constant v8u16 
    {
    }
    (const) */
    /* execute.simd:3119 [F] s_b_97_8: sym_43423_0_rd = s_b_97_7 (const), dominates: s_b_98_9 s_b_100_8  */
    CV_sym_43423_0_rd = wutils::Vector<uint16_t, 8>(0);
    emitter.store_local(DV_sym_43423_0_rd, emitter.constant_vector_splat(wutils::Vector<uint16_t, 8>(0)[0], emitter.context().types().v8u16()));
    /* ???:4294967295 [F] s_b_97_9 = constant u8 0 (const) */
    /* execute.simd:3121 [D] s_b_97_5[s_b_97_9] */
    auto s_b_97_10 = emitter.vector_extract(s_b_97_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3121 [F] s_b_97_11 = constant s32 0 (const) */
    /* execute.simd:3121 [D] s_b_97_12 = (s32)s_b_97_10 */
    auto s_b_97_12 = emitter.sx(s_b_97_10, emitter.context().types().s32());
    /* execute.simd:3121 [D] s_b_97_13 = s_b_97_12<s_b_97_11 */
    auto s_b_97_13 = emitter.cmp_lt(s_b_97_12, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3121 [D] s_b_97_14: If s_b_97_13: Jump b_98 else b_100 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_98;
        dynamic_block_queue.push(block_b_98);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_100;
        dynamic_block_queue.push(block_b_100);
        false_target = block;
      }
      emitter.branch(s_b_97_13, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_98 not fully fixed
  // BLOCK b_99 not fully fixed
  // BLOCK b_100 not fully fixed
  // BLOCK b_101 not fully fixed
  // BLOCK b_102 not fully fixed
  // BLOCK b_103 not fully fixed
  // BLOCK b_104 not fully fixed
  // BLOCK b_105 not fully fixed
  // BLOCK b_106 not fully fixed
  // BLOCK b_107 not fully fixed
  // BLOCK b_108 not fully fixed
  // BLOCK b_109 not fully fixed
  // BLOCK b_110 not fully fixed
  // BLOCK b_111 not fully fixed
  // BLOCK b_112 not fully fixed
  // BLOCK b_113 not fully fixed
  // BLOCK b_114 not fully fixed
  // BLOCK b_115 not fully fixed
  // BLOCK b_116 not fully fixed
  // BLOCK b_117 not fully fixed
  // BLOCK b_118 not fully fixed
  // BLOCK b_119 not fully fixed
  // BLOCK b_120 not fully fixed
  // BLOCK b_121 not fully fixed
  /* b_3,  */
  fixed_block_b_122: 
  {
    /* execute.simd:3132 [F] s_b_122_0=sym_41930_3_parameter_inst.rn (const) */
    /* execute.simd:3132 [D] s_b_122_1 = ReadRegBank 19:s_b_122_0 (v2u32) */
    auto s_b_122_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_122_1,emitter.const_u8(8));
    }
    /* execute.simd:3132 [D] s_b_122_2: sym_43820_0_rn = s_b_122_1, dominates: s_b_123_0 s_b_126_0 s_b_128_0 s_b_125_0  */
    emitter.store_local(DV_sym_43820_0_rn, s_b_122_1);
    /* execute.simd:3133 [F] s_b_122_3=sym_41930_3_parameter_inst.rm (const) */
    /* execute.simd:3133 [D] s_b_122_4 = ReadRegBank 19:s_b_122_3 (v2u32) */
    auto s_b_122_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_122_4,emitter.const_u8(8));
    }
    /* execute.simd:3133 [D] s_b_122_5 = (v2s32)s_b_122_4 */
    auto s_b_122_5 = emitter.reinterpret(s_b_122_4, emitter.context().types().v2s32());
    /* execute.simd:3133 [D] s_b_122_6: sym_43824_0_rm = s_b_122_5, dominates: s_b_123_3 s_b_124_0 s_b_126_3 s_b_128_3 s_b_125_3  */
    emitter.store_local(DV_sym_43824_0_rm, s_b_122_5);
    /* ???:4294967295 [F] s_b_122_7 = constant v4u32 
    {
    }
    (const) */
    /* execute.simd:3135 [F] s_b_122_8: sym_43829_0_rd = s_b_122_7 (const), dominates: s_b_123_9 s_b_125_8  */
    CV_sym_43829_0_rd = wutils::Vector<uint32_t, 4>(0);
    emitter.store_local(DV_sym_43829_0_rd, emitter.constant_vector_splat(wutils::Vector<uint32_t, 4>(0)[0], emitter.context().types().v4u32()));
    /* ???:4294967295 [F] s_b_122_9 = constant u8 0 (const) */
    /* execute.simd:3137 [D] s_b_122_5[s_b_122_9] */
    auto s_b_122_10 = emitter.vector_extract(s_b_122_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3137 [F] s_b_122_11 = constant s32 0 (const) */
    /* execute.simd:3137 [D] s_b_122_12 = s_b_122_10<s_b_122_11 */
    auto s_b_122_12 = emitter.cmp_lt(s_b_122_10, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3137 [D] s_b_122_13: If s_b_122_12: Jump b_123 else b_125 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_123;
        dynamic_block_queue.push(block_b_123);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_125;
        dynamic_block_queue.push(block_b_125);
        false_target = block;
      }
      emitter.branch(s_b_122_12, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_123 not fully fixed
  // BLOCK b_124 not fully fixed
  // BLOCK b_125 not fully fixed
  // BLOCK b_126 not fully fixed
  // BLOCK b_127 not fully fixed
  // BLOCK b_128 not fully fixed
  /* b_3,  */
  fixed_block_b_129: 
  {
    /* execute.simd:3148 [F] s_b_129_0=sym_41930_3_parameter_inst.rn (const) */
    /* execute.simd:3148 [D] s_b_129_1 = ReadRegBank 20:s_b_129_0 (v4u32) */
    auto s_b_129_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_129_1,emitter.const_u8(16));
    }
    /* execute.simd:3148 [D] s_b_129_2: sym_43936_0_rn = s_b_129_1, dominates: s_b_130_0 s_b_133_0 s_b_136_0 s_b_139_0 s_b_141_0 s_b_138_0 s_b_135_0 s_b_132_0  */
    emitter.store_local(DV_sym_43936_0_rn, s_b_129_1);
    /* execute.simd:3149 [F] s_b_129_3=sym_41930_3_parameter_inst.rm (const) */
    /* execute.simd:3149 [D] s_b_129_4 = ReadRegBank 20:s_b_129_3 (v4u32) */
    auto s_b_129_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v4u32());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_129_4,emitter.const_u8(16));
    }
    /* execute.simd:3149 [D] s_b_129_5 = (v4s32)s_b_129_4 */
    auto s_b_129_5 = emitter.reinterpret(s_b_129_4, emitter.context().types().v4s32());
    /* execute.simd:3149 [D] s_b_129_6: sym_43940_0_rm = s_b_129_5, dominates: s_b_130_3 s_b_131_0 s_b_133_3 s_b_134_0 s_b_136_3 s_b_137_0 s_b_139_3 s_b_141_3 s_b_138_3 s_b_135_3 s_b_132_3  */
    emitter.store_local(DV_sym_43940_0_rm, s_b_129_5);
    /* ???:4294967295 [F] s_b_129_7 = constant v4u32 
    {
    }
    (const) */
    /* execute.simd:3151 [F] s_b_129_8: sym_43945_0_rd = s_b_129_7 (const), dominates: s_b_130_9 s_b_132_8  */
    CV_sym_43945_0_rd = wutils::Vector<uint32_t, 4>(0);
    emitter.store_local(DV_sym_43945_0_rd, emitter.constant_vector_splat(wutils::Vector<uint32_t, 4>(0)[0], emitter.context().types().v4u32()));
    /* ???:4294967295 [F] s_b_129_9 = constant u8 0 (const) */
    /* execute.simd:3153 [D] s_b_129_5[s_b_129_9] */
    auto s_b_129_10 = emitter.vector_extract(s_b_129_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3153 [F] s_b_129_11 = constant s32 0 (const) */
    /* execute.simd:3153 [D] s_b_129_12 = s_b_129_10<s_b_129_11 */
    auto s_b_129_12 = emitter.cmp_lt(s_b_129_10, emitter.const_s32((int32_t)0ULL));
    /* execute.simd:3153 [D] s_b_129_13: If s_b_129_12: Jump b_130 else b_132 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_130;
        dynamic_block_queue.push(block_b_130);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_132;
        dynamic_block_queue.push(block_b_132);
        false_target = block;
      }
      emitter.branch(s_b_129_12, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_130 not fully fixed
  // BLOCK b_131 not fully fixed
  // BLOCK b_132 not fully fixed
  // BLOCK b_133 not fully fixed
  // BLOCK b_134 not fully fixed
  // BLOCK b_135 not fully fixed
  // BLOCK b_136 not fully fixed
  // BLOCK b_137 not fully fixed
  // BLOCK b_138 not fully fixed
  // BLOCK b_139 not fully fixed
  // BLOCK b_140 not fully fixed
  // BLOCK b_141 not fully fixed
  /* b_3,  */
  fixed_block_b_142: 
  {
    /* execute.simd:3164 [F] s_b_142_0=sym_41930_3_parameter_inst.rn (const) */
    /* execute.simd:3164 [D] s_b_142_1 = ReadRegBank 21:s_b_142_0 (v2u64) */
    auto s_b_142_1 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rn))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rn))),s_b_142_1,emitter.const_u8(16));
    }
    /* execute.simd:3164 [D] s_b_142_2: sym_44146_0_rn = s_b_142_1, dominates: s_b_143_0 s_b_146_0 s_b_148_0 s_b_145_0  */
    emitter.store_local(DV_sym_44146_0_rn, s_b_142_1);
    /* execute.simd:3165 [F] s_b_142_3=sym_41930_3_parameter_inst.rm (const) */
    /* execute.simd:3165 [D] s_b_142_4 = ReadRegBank 21:s_b_142_3 (v2u64) */
    auto s_b_142_4 = emitter.load_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rm))), emitter.context().types().v2u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(256 + (16 * insn.rm))),s_b_142_4,emitter.const_u8(16));
    }
    /* execute.simd:3165 [D] s_b_142_5 = (v2s64)s_b_142_4 */
    auto s_b_142_5 = emitter.reinterpret(s_b_142_4, emitter.context().types().v2s64());
    /* execute.simd:3165 [D] s_b_142_6: sym_44150_0_rm = s_b_142_5, dominates: s_b_143_3 s_b_144_0 s_b_146_3 s_b_148_3 s_b_145_3  */
    emitter.store_local(DV_sym_44150_0_rm, s_b_142_5);
    /* ???:4294967295 [F] s_b_142_7 = constant v2u64 
    {
    }
    (const) */
    /* execute.simd:3167 [F] s_b_142_8: sym_44155_0_rd = s_b_142_7 (const), dominates: s_b_143_9 s_b_145_8  */
    CV_sym_44155_0_rd = wutils::Vector<uint64_t, 2>(0);
    emitter.store_local(DV_sym_44155_0_rd, emitter.constant_vector_splat(wutils::Vector<uint64_t, 2>(0)[0], emitter.context().types().v2u64()));
    /* ???:4294967295 [F] s_b_142_9 = constant u8 0 (const) */
    /* execute.simd:3169 [D] s_b_142_5[s_b_142_9] */
    auto s_b_142_10 = emitter.vector_extract(s_b_142_5, emitter.const_u8((uint8_t)0ULL));
    /* execute.simd:3169 [F] s_b_142_11 = constant s64 0 (const) */
    /* execute.simd:3169 [D] s_b_142_12 = s_b_142_10<s_b_142_11 */
    auto s_b_142_12 = emitter.cmp_lt(s_b_142_10, emitter.const_s64((int64_t)0ULL));
    /* execute.simd:3169 [D] s_b_142_13: If s_b_142_12: Jump b_143 else b_145 */
    {
      captive::arch::dbt::el::Block *true_target;
      {
        auto block = block_b_143;
        dynamic_block_queue.push(block_b_143);
        true_target = block;
      }
      captive::arch::dbt::el::Block *false_target;
      {
        auto block = block_b_145;
        dynamic_block_queue.push(block_b_145);
        false_target = block;
      }
      emitter.branch(s_b_142_12, true_target, false_target);
    }
    goto fixed_done;
  }
  // BLOCK b_143 not fully fixed
  // BLOCK b_144 not fully fixed
  // BLOCK b_145 not fully fixed
  // BLOCK b_146 not fully fixed
  // BLOCK b_147 not fully fixed
  // BLOCK b_148 not fully fixed
  /* b_3,  */
  fixed_block_b_149: 
  {
    /* execute.simd:3180 [D] s_b_149_0 = trap */
    emitter.raise(emitter.const_u8(0));
    /* execute.simd:0 [F] s_b_149_1: Jump b_2 (const) */
    {
      auto block = block_b_2;
      dynamic_block_queue.push(block_b_2);
      emitter.jump(block);
    }
    goto fixed_done;
  }
  fixed_done:
  if (dynamic_block_queue.size() > 0) 
  {
    std::set<captive::arch::dbt::el::Block *> emitted_blocks;
    while (dynamic_block_queue.size() > 0) 
    {
      captive::arch::dbt::el::Block *block_index = dynamic_block_queue.front();
      dynamic_block_queue.pop();
      if (emitted_blocks.count(block_index)) continue;
      emitted_blocks.insert(block_index);
      if (block_index == block_b_2) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_2);
        /* ???:4294967295 [F] s_b_2_0: Return */
        emitter.jump(__exit_block);
      }
      else if (block_index == block_b_4) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_4);
        /* execute.simd:3057 [F] s_b_4_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3057 [F] s_b_4_1 = constant u64 0 (const) */
        /* execute.simd:6326 [F] s_b_4_2: WriteRegBank 2:s_b_4_0 = s_b_4_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:6327 [F] s_b_4_3 = constant u64 0 (const) */
        /* execute.simd:6327 [F] s_b_4_4: WriteRegBank 3:s_b_4_0 = s_b_4_3 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_4_5: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_5) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_5);
        /* execute.simd:3058 [D] s_b_5_0 = sym_41944_0_rm int8_t */
        auto s_b_5_0 = emitter.load_local(DV_sym_41944_0_rm, emitter.context().types().s8());
        /* execute.simd:3058 [F] s_b_5_1 = constant s32 0 (const) */
        /* execute.simd:3058 [D] s_b_5_2 = (s32)s_b_5_0 */
        auto s_b_5_2 = emitter.sx(s_b_5_0, emitter.context().types().s32());
        /* execute.simd:3058 [D] s_b_5_3 = s_b_5_2>s_b_5_1 */
        auto s_b_5_3 = emitter.cmp_gt(s_b_5_2, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3058 [D] s_b_5_4: If s_b_5_3: Jump b_6 else b_7 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_6;
            dynamic_block_queue.push(block_b_6);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_7;
            dynamic_block_queue.push(block_b_7);
            false_target = block;
          }
          emitter.branch(s_b_5_3, true_target, false_target);
        }
      }
      else if (block_index == block_b_6) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_6);
        /* execute.simd:3059 [F] s_b_6_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3059 [D] s_b_6_1 = sym_41939_0_rn uint64_t */
        auto s_b_6_1 = emitter.load_local(DV_sym_41939_0_rn, emitter.context().types().u64());
        /* execute.simd:3059 [D] s_b_6_2 = sym_41944_0_rm int8_t */
        auto s_b_6_2 = emitter.load_local(DV_sym_41944_0_rm, emitter.context().types().s8());
        /* execute.simd:3059 [D] s_b_6_3 = (u64)s_b_6_2 */
        auto s_b_6_3 = emitter.zx(s_b_6_2, emitter.context().types().u64());
        /* execute.simd:3059 [D] s_b_6_4 = s_b_6_1<<s_b_6_3 */
        auto s_b_6_4 = emitter.shl(s_b_6_1, s_b_6_3);
        /* execute.simd:6326 [D] s_b_6_5: WriteRegBank 2:s_b_6_0 = s_b_6_4 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_4,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_6_4);
        /* execute.simd:6327 [F] s_b_6_6 = constant u64 0 (const) */
        /* execute.simd:6327 [F] s_b_6_7: WriteRegBank 3:s_b_6_0 = s_b_6_6 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_6_8: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_7) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_7);
        /* execute.simd:3060 [D] s_b_7_0 = sym_41944_0_rm int8_t */
        auto s_b_7_0 = emitter.load_local(DV_sym_41944_0_rm, emitter.context().types().s8());
        /* execute.simd:3060 [F] s_b_7_1 = constant u64 ffffffffffffffc1 (const) */
        /* execute.simd:3060 [D] s_b_7_2 = (u64)s_b_7_0 */
        auto s_b_7_2 = emitter.zx(s_b_7_0, emitter.context().types().u64());
        /* execute.simd:3060 [D] s_b_7_3 = s_b_7_2<s_b_7_1 */
        auto s_b_7_3 = emitter.cmp_lt(s_b_7_2, emitter.const_u64((uint64_t)18446744073709551553ULL));
        /* execute.simd:3060 [D] s_b_7_4: If s_b_7_3: Jump b_8 else b_9 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_8;
            dynamic_block_queue.push(block_b_8);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_9;
            dynamic_block_queue.push(block_b_9);
            false_target = block;
          }
          emitter.branch(s_b_7_3, true_target, false_target);
        }
      }
      else if (block_index == block_b_8) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_8);
        /* execute.simd:3061 [F] s_b_8_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3061 [F] s_b_8_1 = constant u64 0 (const) */
        /* execute.simd:6326 [F] s_b_8_2: WriteRegBank 2:s_b_8_0 = s_b_8_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:6327 [F] s_b_8_3 = constant u64 0 (const) */
        /* execute.simd:6327 [F] s_b_8_4: WriteRegBank 3:s_b_8_0 = s_b_8_3 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_8_5: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_9) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_9);
        /* execute.simd:3063 [F] s_b_9_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3063 [D] s_b_9_1 = sym_41939_0_rn uint64_t */
        auto s_b_9_1 = emitter.load_local(DV_sym_41939_0_rn, emitter.context().types().u64());
        /* execute.simd:3063 [D] s_b_9_2 = sym_41944_0_rm int8_t */
        auto s_b_9_2 = emitter.load_local(DV_sym_41944_0_rm, emitter.context().types().s8());
        /* execute.simd:3063 [D] s_b_9_3 = -s_b_9_2 */
        auto s_b_9_3 = emitter.neg(s_b_9_2);
        /* execute.simd:3063 [D] s_b_9_4 = (u64)s_b_9_3 */
        auto s_b_9_4 = emitter.zx(s_b_9_3, emitter.context().types().u64());
        /* execute.simd:3063 [D] s_b_9_5 = s_b_9_1>>s_b_9_4 */
        auto s_b_9_5 = emitter.shr(s_b_9_1, s_b_9_4);
        /* execute.simd:6326 [D] s_b_9_6: WriteRegBank 2:s_b_9_0 = s_b_9_5 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_9_5,emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_9_5);
        /* execute.simd:6327 [F] s_b_9_7 = constant u64 0 (const) */
        /* execute.simd:6327 [F] s_b_9_8: WriteRegBank 3:s_b_9_0 = s_b_9_7 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rd))),emitter.const_u64((uint64_t)0ULL));
        /* execute.simd:0 [F] s_b_9_9: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_11) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_11);
        /* execute.simd:3074 [D] s_b_11_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_11_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_11_1 = constant u8 0 (const) */
        /* execute.simd:3074 [D] s_b_11_0[s_b_11_1] */
        auto s_b_11_2 = emitter.vector_extract(s_b_11_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3074 [D] s_b_11_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_11_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_11_4 = constant u8 0 (const) */
        /* execute.simd:3074 [D] s_b_11_3[s_b_11_4] */
        auto s_b_11_5 = emitter.vector_extract(s_b_11_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3074 [D] s_b_11_6 = -s_b_11_5 */
        auto s_b_11_6 = emitter.neg(s_b_11_5);
        /* execute.simd:3074 [D] s_b_11_7 = (u8)s_b_11_6 */
        auto s_b_11_7 = emitter.reinterpret(s_b_11_6, emitter.context().types().u8());
        /* execute.simd:3074 [D] s_b_11_8 = s_b_11_2>>s_b_11_7 */
        auto s_b_11_8 = emitter.shr(s_b_11_2, s_b_11_7);
        /* execute.simd:3074 [F] s_b_11_9 = sym_42013_0_rd (const) wutils::Vector<uint8_t, 16> */
        wutils::Vector<uint8_t, 16> s_b_11_9 = CV_sym_42013_0_rd;
        /* execute.simd:3074 [F] s_b_11_10 = constant s32 0 (const) */
        /* execute.simd:3074 [D] s_b_11_11 = s_b_11_9[s_b_11_10] <= s_b_11_8 */
        auto s_b_11_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_11_9[0], emitter.context().types().v16u8()), emitter.const_s32((int32_t)0ULL), s_b_11_8);
        /* execute.simd:3074 [D] s_b_11_12: sym_42013_0_rd = s_b_11_11, dominates: s_b_14_9 s_b_16_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_11_11);
        /* execute.simd:3074 [F] s_b_11_13: Jump b_12 (const) */
        {
          auto block = block_b_12;
          dynamic_block_queue.push(block_b_12);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_12) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_12);
        /* execute.simd:3073 [D] s_b_12_0 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_12_0 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_12_1 = constant u8 1 (const) */
        /* execute.simd:3073 [D] s_b_12_0[s_b_12_1] */
        auto s_b_12_2 = emitter.vector_extract(s_b_12_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3073 [F] s_b_12_3 = constant s32 0 (const) */
        /* execute.simd:3073 [D] s_b_12_4 = (s32)s_b_12_2 */
        auto s_b_12_4 = emitter.sx(s_b_12_2, emitter.context().types().s32());
        /* execute.simd:3073 [D] s_b_12_5 = s_b_12_4<s_b_12_3 */
        auto s_b_12_5 = emitter.cmp_lt(s_b_12_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3073 [D] s_b_12_6: If s_b_12_5: Jump b_14 else b_16 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_14;
            dynamic_block_queue.push(block_b_14);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_16;
            dynamic_block_queue.push(block_b_16);
            false_target = block;
          }
          emitter.branch(s_b_12_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_13) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_13);
        /* execute.simd:3076 [D] s_b_13_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_13_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_13_1 = constant u8 0 (const) */
        /* execute.simd:3076 [D] s_b_13_0[s_b_13_1] */
        auto s_b_13_2 = emitter.vector_extract(s_b_13_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3076 [D] s_b_13_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_13_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_13_4 = constant u8 0 (const) */
        /* execute.simd:3076 [D] s_b_13_3[s_b_13_4] */
        auto s_b_13_5 = emitter.vector_extract(s_b_13_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3076 [D] s_b_13_6 = (u8)s_b_13_5 */
        auto s_b_13_6 = emitter.reinterpret(s_b_13_5, emitter.context().types().u8());
        /* execute.simd:3076 [D] s_b_13_7 = s_b_13_2<<s_b_13_6 */
        auto s_b_13_7 = emitter.shl(s_b_13_2, s_b_13_6);
        /* execute.simd:3076 [F] s_b_13_8 = sym_42013_0_rd (const) wutils::Vector<uint8_t, 16> */
        wutils::Vector<uint8_t, 16> s_b_13_8 = CV_sym_42013_0_rd;
        /* execute.simd:3076 [F] s_b_13_9 = constant s32 0 (const) */
        /* execute.simd:3076 [D] s_b_13_10 = s_b_13_8[s_b_13_9] <= s_b_13_7 */
        auto s_b_13_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_13_8[0], emitter.context().types().v16u8()), emitter.const_s32((int32_t)0ULL), s_b_13_7);
        /* execute.simd:3076 [D] s_b_13_11: sym_42013_0_rd = s_b_13_10, dominates: s_b_14_9 s_b_16_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_13_10);
        /* execute.simd:3076 [F] s_b_13_12: Jump b_12 (const) */
        {
          auto block = block_b_12;
          dynamic_block_queue.push(block_b_12);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_14) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_14);
        /* execute.simd:3074 [D] s_b_14_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_14_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_14_1 = constant u8 1 (const) */
        /* execute.simd:3074 [D] s_b_14_0[s_b_14_1] */
        auto s_b_14_2 = emitter.vector_extract(s_b_14_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3074 [D] s_b_14_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_14_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_14_4 = constant u8 1 (const) */
        /* execute.simd:3074 [D] s_b_14_3[s_b_14_4] */
        auto s_b_14_5 = emitter.vector_extract(s_b_14_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3074 [D] s_b_14_6 = -s_b_14_5 */
        auto s_b_14_6 = emitter.neg(s_b_14_5);
        /* execute.simd:3074 [D] s_b_14_7 = (u8)s_b_14_6 */
        auto s_b_14_7 = emitter.reinterpret(s_b_14_6, emitter.context().types().u8());
        /* execute.simd:3074 [D] s_b_14_8 = s_b_14_2>>s_b_14_7 */
        auto s_b_14_8 = emitter.shr(s_b_14_2, s_b_14_7);
        /* execute.simd:3074 [D] s_b_14_9 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_14_9 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3074 [F] s_b_14_10 = constant s32 1 (const) */
        /* execute.simd:3074 [D] s_b_14_11 = s_b_14_9[s_b_14_10] <= s_b_14_8 */
        auto s_b_14_11 = emitter.vector_insert(s_b_14_9, emitter.const_s32((int32_t)1ULL), s_b_14_8);
        /* execute.simd:3074 [D] s_b_14_12: sym_42013_0_rd = s_b_14_11, dominates: s_b_17_9 s_b_19_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_14_11);
        /* execute.simd:3074 [F] s_b_14_13: Jump b_15 (const) */
        {
          auto block = block_b_15;
          dynamic_block_queue.push(block_b_15);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_15) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_15);
        /* execute.simd:3073 [D] s_b_15_0 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_15_0 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_15_1 = constant u8 2 (const) */
        /* execute.simd:3073 [D] s_b_15_0[s_b_15_1] */
        auto s_b_15_2 = emitter.vector_extract(s_b_15_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3073 [F] s_b_15_3 = constant s32 0 (const) */
        /* execute.simd:3073 [D] s_b_15_4 = (s32)s_b_15_2 */
        auto s_b_15_4 = emitter.sx(s_b_15_2, emitter.context().types().s32());
        /* execute.simd:3073 [D] s_b_15_5 = s_b_15_4<s_b_15_3 */
        auto s_b_15_5 = emitter.cmp_lt(s_b_15_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3073 [D] s_b_15_6: If s_b_15_5: Jump b_17 else b_19 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_17;
            dynamic_block_queue.push(block_b_17);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_19;
            dynamic_block_queue.push(block_b_19);
            false_target = block;
          }
          emitter.branch(s_b_15_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_16) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_16);
        /* execute.simd:3076 [D] s_b_16_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_16_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_16_1 = constant u8 1 (const) */
        /* execute.simd:3076 [D] s_b_16_0[s_b_16_1] */
        auto s_b_16_2 = emitter.vector_extract(s_b_16_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3076 [D] s_b_16_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_16_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_16_4 = constant u8 1 (const) */
        /* execute.simd:3076 [D] s_b_16_3[s_b_16_4] */
        auto s_b_16_5 = emitter.vector_extract(s_b_16_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3076 [D] s_b_16_6 = (u8)s_b_16_5 */
        auto s_b_16_6 = emitter.reinterpret(s_b_16_5, emitter.context().types().u8());
        /* execute.simd:3076 [D] s_b_16_7 = s_b_16_2<<s_b_16_6 */
        auto s_b_16_7 = emitter.shl(s_b_16_2, s_b_16_6);
        /* execute.simd:3076 [D] s_b_16_8 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_16_8 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3076 [F] s_b_16_9 = constant s32 1 (const) */
        /* execute.simd:3076 [D] s_b_16_10 = s_b_16_8[s_b_16_9] <= s_b_16_7 */
        auto s_b_16_10 = emitter.vector_insert(s_b_16_8, emitter.const_s32((int32_t)1ULL), s_b_16_7);
        /* execute.simd:3076 [D] s_b_16_11: sym_42013_0_rd = s_b_16_10, dominates: s_b_17_9 s_b_19_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_16_10);
        /* execute.simd:3076 [F] s_b_16_12: Jump b_15 (const) */
        {
          auto block = block_b_15;
          dynamic_block_queue.push(block_b_15);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_17) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_17);
        /* execute.simd:3074 [D] s_b_17_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_17_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_17_1 = constant u8 2 (const) */
        /* execute.simd:3074 [D] s_b_17_0[s_b_17_1] */
        auto s_b_17_2 = emitter.vector_extract(s_b_17_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3074 [D] s_b_17_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_17_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_17_4 = constant u8 2 (const) */
        /* execute.simd:3074 [D] s_b_17_3[s_b_17_4] */
        auto s_b_17_5 = emitter.vector_extract(s_b_17_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3074 [D] s_b_17_6 = -s_b_17_5 */
        auto s_b_17_6 = emitter.neg(s_b_17_5);
        /* execute.simd:3074 [D] s_b_17_7 = (u8)s_b_17_6 */
        auto s_b_17_7 = emitter.reinterpret(s_b_17_6, emitter.context().types().u8());
        /* execute.simd:3074 [D] s_b_17_8 = s_b_17_2>>s_b_17_7 */
        auto s_b_17_8 = emitter.shr(s_b_17_2, s_b_17_7);
        /* execute.simd:3074 [D] s_b_17_9 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_17_9 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3074 [F] s_b_17_10 = constant s32 2 (const) */
        /* execute.simd:3074 [D] s_b_17_11 = s_b_17_9[s_b_17_10] <= s_b_17_8 */
        auto s_b_17_11 = emitter.vector_insert(s_b_17_9, emitter.const_s32((int32_t)2ULL), s_b_17_8);
        /* execute.simd:3074 [D] s_b_17_12: sym_42013_0_rd = s_b_17_11, dominates: s_b_20_9 s_b_22_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_17_11);
        /* execute.simd:3074 [F] s_b_17_13: Jump b_18 (const) */
        {
          auto block = block_b_18;
          dynamic_block_queue.push(block_b_18);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_18) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_18);
        /* execute.simd:3073 [D] s_b_18_0 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_18_0 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_18_1 = constant u8 3 (const) */
        /* execute.simd:3073 [D] s_b_18_0[s_b_18_1] */
        auto s_b_18_2 = emitter.vector_extract(s_b_18_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3073 [F] s_b_18_3 = constant s32 0 (const) */
        /* execute.simd:3073 [D] s_b_18_4 = (s32)s_b_18_2 */
        auto s_b_18_4 = emitter.sx(s_b_18_2, emitter.context().types().s32());
        /* execute.simd:3073 [D] s_b_18_5 = s_b_18_4<s_b_18_3 */
        auto s_b_18_5 = emitter.cmp_lt(s_b_18_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3073 [D] s_b_18_6: If s_b_18_5: Jump b_20 else b_22 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_20;
            dynamic_block_queue.push(block_b_20);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_22;
            dynamic_block_queue.push(block_b_22);
            false_target = block;
          }
          emitter.branch(s_b_18_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_19) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_19);
        /* execute.simd:3076 [D] s_b_19_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_19_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_19_1 = constant u8 2 (const) */
        /* execute.simd:3076 [D] s_b_19_0[s_b_19_1] */
        auto s_b_19_2 = emitter.vector_extract(s_b_19_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3076 [D] s_b_19_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_19_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_19_4 = constant u8 2 (const) */
        /* execute.simd:3076 [D] s_b_19_3[s_b_19_4] */
        auto s_b_19_5 = emitter.vector_extract(s_b_19_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3076 [D] s_b_19_6 = (u8)s_b_19_5 */
        auto s_b_19_6 = emitter.reinterpret(s_b_19_5, emitter.context().types().u8());
        /* execute.simd:3076 [D] s_b_19_7 = s_b_19_2<<s_b_19_6 */
        auto s_b_19_7 = emitter.shl(s_b_19_2, s_b_19_6);
        /* execute.simd:3076 [D] s_b_19_8 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_19_8 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3076 [F] s_b_19_9 = constant s32 2 (const) */
        /* execute.simd:3076 [D] s_b_19_10 = s_b_19_8[s_b_19_9] <= s_b_19_7 */
        auto s_b_19_10 = emitter.vector_insert(s_b_19_8, emitter.const_s32((int32_t)2ULL), s_b_19_7);
        /* execute.simd:3076 [D] s_b_19_11: sym_42013_0_rd = s_b_19_10, dominates: s_b_20_9 s_b_22_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_19_10);
        /* execute.simd:3076 [F] s_b_19_12: Jump b_18 (const) */
        {
          auto block = block_b_18;
          dynamic_block_queue.push(block_b_18);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_20) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_20);
        /* execute.simd:3074 [D] s_b_20_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_20_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_20_1 = constant u8 3 (const) */
        /* execute.simd:3074 [D] s_b_20_0[s_b_20_1] */
        auto s_b_20_2 = emitter.vector_extract(s_b_20_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3074 [D] s_b_20_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_20_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_20_4 = constant u8 3 (const) */
        /* execute.simd:3074 [D] s_b_20_3[s_b_20_4] */
        auto s_b_20_5 = emitter.vector_extract(s_b_20_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3074 [D] s_b_20_6 = -s_b_20_5 */
        auto s_b_20_6 = emitter.neg(s_b_20_5);
        /* execute.simd:3074 [D] s_b_20_7 = (u8)s_b_20_6 */
        auto s_b_20_7 = emitter.reinterpret(s_b_20_6, emitter.context().types().u8());
        /* execute.simd:3074 [D] s_b_20_8 = s_b_20_2>>s_b_20_7 */
        auto s_b_20_8 = emitter.shr(s_b_20_2, s_b_20_7);
        /* execute.simd:3074 [D] s_b_20_9 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_20_9 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3074 [F] s_b_20_10 = constant s32 3 (const) */
        /* execute.simd:3074 [D] s_b_20_11 = s_b_20_9[s_b_20_10] <= s_b_20_8 */
        auto s_b_20_11 = emitter.vector_insert(s_b_20_9, emitter.const_s32((int32_t)3ULL), s_b_20_8);
        /* execute.simd:3074 [D] s_b_20_12: sym_42013_0_rd = s_b_20_11, dominates: s_b_23_9 s_b_25_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_20_11);
        /* execute.simd:3074 [F] s_b_20_13: Jump b_21 (const) */
        {
          auto block = block_b_21;
          dynamic_block_queue.push(block_b_21);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_21) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_21);
        /* execute.simd:3073 [D] s_b_21_0 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_21_0 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_21_1 = constant u8 4 (const) */
        /* execute.simd:3073 [D] s_b_21_0[s_b_21_1] */
        auto s_b_21_2 = emitter.vector_extract(s_b_21_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3073 [F] s_b_21_3 = constant s32 0 (const) */
        /* execute.simd:3073 [D] s_b_21_4 = (s32)s_b_21_2 */
        auto s_b_21_4 = emitter.sx(s_b_21_2, emitter.context().types().s32());
        /* execute.simd:3073 [D] s_b_21_5 = s_b_21_4<s_b_21_3 */
        auto s_b_21_5 = emitter.cmp_lt(s_b_21_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3073 [D] s_b_21_6: If s_b_21_5: Jump b_23 else b_25 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_23;
            dynamic_block_queue.push(block_b_23);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_25;
            dynamic_block_queue.push(block_b_25);
            false_target = block;
          }
          emitter.branch(s_b_21_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_22) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_22);
        /* execute.simd:3076 [D] s_b_22_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_22_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_22_1 = constant u8 3 (const) */
        /* execute.simd:3076 [D] s_b_22_0[s_b_22_1] */
        auto s_b_22_2 = emitter.vector_extract(s_b_22_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3076 [D] s_b_22_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_22_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_22_4 = constant u8 3 (const) */
        /* execute.simd:3076 [D] s_b_22_3[s_b_22_4] */
        auto s_b_22_5 = emitter.vector_extract(s_b_22_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3076 [D] s_b_22_6 = (u8)s_b_22_5 */
        auto s_b_22_6 = emitter.reinterpret(s_b_22_5, emitter.context().types().u8());
        /* execute.simd:3076 [D] s_b_22_7 = s_b_22_2<<s_b_22_6 */
        auto s_b_22_7 = emitter.shl(s_b_22_2, s_b_22_6);
        /* execute.simd:3076 [D] s_b_22_8 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_22_8 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3076 [F] s_b_22_9 = constant s32 3 (const) */
        /* execute.simd:3076 [D] s_b_22_10 = s_b_22_8[s_b_22_9] <= s_b_22_7 */
        auto s_b_22_10 = emitter.vector_insert(s_b_22_8, emitter.const_s32((int32_t)3ULL), s_b_22_7);
        /* execute.simd:3076 [D] s_b_22_11: sym_42013_0_rd = s_b_22_10, dominates: s_b_23_9 s_b_25_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_22_10);
        /* execute.simd:3076 [F] s_b_22_12: Jump b_21 (const) */
        {
          auto block = block_b_21;
          dynamic_block_queue.push(block_b_21);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_23) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_23);
        /* execute.simd:3074 [D] s_b_23_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_23_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_23_1 = constant u8 4 (const) */
        /* execute.simd:3074 [D] s_b_23_0[s_b_23_1] */
        auto s_b_23_2 = emitter.vector_extract(s_b_23_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3074 [D] s_b_23_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_23_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_23_4 = constant u8 4 (const) */
        /* execute.simd:3074 [D] s_b_23_3[s_b_23_4] */
        auto s_b_23_5 = emitter.vector_extract(s_b_23_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3074 [D] s_b_23_6 = -s_b_23_5 */
        auto s_b_23_6 = emitter.neg(s_b_23_5);
        /* execute.simd:3074 [D] s_b_23_7 = (u8)s_b_23_6 */
        auto s_b_23_7 = emitter.reinterpret(s_b_23_6, emitter.context().types().u8());
        /* execute.simd:3074 [D] s_b_23_8 = s_b_23_2>>s_b_23_7 */
        auto s_b_23_8 = emitter.shr(s_b_23_2, s_b_23_7);
        /* execute.simd:3074 [D] s_b_23_9 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_23_9 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3074 [F] s_b_23_10 = constant s32 4 (const) */
        /* execute.simd:3074 [D] s_b_23_11 = s_b_23_9[s_b_23_10] <= s_b_23_8 */
        auto s_b_23_11 = emitter.vector_insert(s_b_23_9, emitter.const_s32((int32_t)4ULL), s_b_23_8);
        /* execute.simd:3074 [D] s_b_23_12: sym_42013_0_rd = s_b_23_11, dominates: s_b_26_9 s_b_28_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_23_11);
        /* execute.simd:3074 [F] s_b_23_13: Jump b_24 (const) */
        {
          auto block = block_b_24;
          dynamic_block_queue.push(block_b_24);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_24) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_24);
        /* execute.simd:3073 [D] s_b_24_0 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_24_0 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_24_1 = constant u8 5 (const) */
        /* execute.simd:3073 [D] s_b_24_0[s_b_24_1] */
        auto s_b_24_2 = emitter.vector_extract(s_b_24_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3073 [F] s_b_24_3 = constant s32 0 (const) */
        /* execute.simd:3073 [D] s_b_24_4 = (s32)s_b_24_2 */
        auto s_b_24_4 = emitter.sx(s_b_24_2, emitter.context().types().s32());
        /* execute.simd:3073 [D] s_b_24_5 = s_b_24_4<s_b_24_3 */
        auto s_b_24_5 = emitter.cmp_lt(s_b_24_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3073 [D] s_b_24_6: If s_b_24_5: Jump b_26 else b_28 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_26;
            dynamic_block_queue.push(block_b_26);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_28;
            dynamic_block_queue.push(block_b_28);
            false_target = block;
          }
          emitter.branch(s_b_24_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_25) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_25);
        /* execute.simd:3076 [D] s_b_25_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_25_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_25_1 = constant u8 4 (const) */
        /* execute.simd:3076 [D] s_b_25_0[s_b_25_1] */
        auto s_b_25_2 = emitter.vector_extract(s_b_25_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3076 [D] s_b_25_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_25_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_25_4 = constant u8 4 (const) */
        /* execute.simd:3076 [D] s_b_25_3[s_b_25_4] */
        auto s_b_25_5 = emitter.vector_extract(s_b_25_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3076 [D] s_b_25_6 = (u8)s_b_25_5 */
        auto s_b_25_6 = emitter.reinterpret(s_b_25_5, emitter.context().types().u8());
        /* execute.simd:3076 [D] s_b_25_7 = s_b_25_2<<s_b_25_6 */
        auto s_b_25_7 = emitter.shl(s_b_25_2, s_b_25_6);
        /* execute.simd:3076 [D] s_b_25_8 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_25_8 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3076 [F] s_b_25_9 = constant s32 4 (const) */
        /* execute.simd:3076 [D] s_b_25_10 = s_b_25_8[s_b_25_9] <= s_b_25_7 */
        auto s_b_25_10 = emitter.vector_insert(s_b_25_8, emitter.const_s32((int32_t)4ULL), s_b_25_7);
        /* execute.simd:3076 [D] s_b_25_11: sym_42013_0_rd = s_b_25_10, dominates: s_b_26_9 s_b_28_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_25_10);
        /* execute.simd:3076 [F] s_b_25_12: Jump b_24 (const) */
        {
          auto block = block_b_24;
          dynamic_block_queue.push(block_b_24);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_26) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_26);
        /* execute.simd:3074 [D] s_b_26_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_26_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_26_1 = constant u8 5 (const) */
        /* execute.simd:3074 [D] s_b_26_0[s_b_26_1] */
        auto s_b_26_2 = emitter.vector_extract(s_b_26_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3074 [D] s_b_26_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_26_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_26_4 = constant u8 5 (const) */
        /* execute.simd:3074 [D] s_b_26_3[s_b_26_4] */
        auto s_b_26_5 = emitter.vector_extract(s_b_26_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3074 [D] s_b_26_6 = -s_b_26_5 */
        auto s_b_26_6 = emitter.neg(s_b_26_5);
        /* execute.simd:3074 [D] s_b_26_7 = (u8)s_b_26_6 */
        auto s_b_26_7 = emitter.reinterpret(s_b_26_6, emitter.context().types().u8());
        /* execute.simd:3074 [D] s_b_26_8 = s_b_26_2>>s_b_26_7 */
        auto s_b_26_8 = emitter.shr(s_b_26_2, s_b_26_7);
        /* execute.simd:3074 [D] s_b_26_9 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_26_9 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3074 [F] s_b_26_10 = constant s32 5 (const) */
        /* execute.simd:3074 [D] s_b_26_11 = s_b_26_9[s_b_26_10] <= s_b_26_8 */
        auto s_b_26_11 = emitter.vector_insert(s_b_26_9, emitter.const_s32((int32_t)5ULL), s_b_26_8);
        /* execute.simd:3074 [D] s_b_26_12: sym_42013_0_rd = s_b_26_11, dominates: s_b_29_9 s_b_31_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_26_11);
        /* execute.simd:3074 [F] s_b_26_13: Jump b_27 (const) */
        {
          auto block = block_b_27;
          dynamic_block_queue.push(block_b_27);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_27) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_27);
        /* execute.simd:3073 [D] s_b_27_0 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_27_0 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_27_1 = constant u8 6 (const) */
        /* execute.simd:3073 [D] s_b_27_0[s_b_27_1] */
        auto s_b_27_2 = emitter.vector_extract(s_b_27_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3073 [F] s_b_27_3 = constant s32 0 (const) */
        /* execute.simd:3073 [D] s_b_27_4 = (s32)s_b_27_2 */
        auto s_b_27_4 = emitter.sx(s_b_27_2, emitter.context().types().s32());
        /* execute.simd:3073 [D] s_b_27_5 = s_b_27_4<s_b_27_3 */
        auto s_b_27_5 = emitter.cmp_lt(s_b_27_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3073 [D] s_b_27_6: If s_b_27_5: Jump b_29 else b_31 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_29;
            dynamic_block_queue.push(block_b_29);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_31;
            dynamic_block_queue.push(block_b_31);
            false_target = block;
          }
          emitter.branch(s_b_27_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_28) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_28);
        /* execute.simd:3076 [D] s_b_28_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_28_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_28_1 = constant u8 5 (const) */
        /* execute.simd:3076 [D] s_b_28_0[s_b_28_1] */
        auto s_b_28_2 = emitter.vector_extract(s_b_28_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3076 [D] s_b_28_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_28_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_28_4 = constant u8 5 (const) */
        /* execute.simd:3076 [D] s_b_28_3[s_b_28_4] */
        auto s_b_28_5 = emitter.vector_extract(s_b_28_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3076 [D] s_b_28_6 = (u8)s_b_28_5 */
        auto s_b_28_6 = emitter.reinterpret(s_b_28_5, emitter.context().types().u8());
        /* execute.simd:3076 [D] s_b_28_7 = s_b_28_2<<s_b_28_6 */
        auto s_b_28_7 = emitter.shl(s_b_28_2, s_b_28_6);
        /* execute.simd:3076 [D] s_b_28_8 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_28_8 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3076 [F] s_b_28_9 = constant s32 5 (const) */
        /* execute.simd:3076 [D] s_b_28_10 = s_b_28_8[s_b_28_9] <= s_b_28_7 */
        auto s_b_28_10 = emitter.vector_insert(s_b_28_8, emitter.const_s32((int32_t)5ULL), s_b_28_7);
        /* execute.simd:3076 [D] s_b_28_11: sym_42013_0_rd = s_b_28_10, dominates: s_b_29_9 s_b_31_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_28_10);
        /* execute.simd:3076 [F] s_b_28_12: Jump b_27 (const) */
        {
          auto block = block_b_27;
          dynamic_block_queue.push(block_b_27);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_29) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_29);
        /* execute.simd:3074 [D] s_b_29_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_29_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_29_1 = constant u8 6 (const) */
        /* execute.simd:3074 [D] s_b_29_0[s_b_29_1] */
        auto s_b_29_2 = emitter.vector_extract(s_b_29_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3074 [D] s_b_29_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_29_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_29_4 = constant u8 6 (const) */
        /* execute.simd:3074 [D] s_b_29_3[s_b_29_4] */
        auto s_b_29_5 = emitter.vector_extract(s_b_29_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3074 [D] s_b_29_6 = -s_b_29_5 */
        auto s_b_29_6 = emitter.neg(s_b_29_5);
        /* execute.simd:3074 [D] s_b_29_7 = (u8)s_b_29_6 */
        auto s_b_29_7 = emitter.reinterpret(s_b_29_6, emitter.context().types().u8());
        /* execute.simd:3074 [D] s_b_29_8 = s_b_29_2>>s_b_29_7 */
        auto s_b_29_8 = emitter.shr(s_b_29_2, s_b_29_7);
        /* execute.simd:3074 [D] s_b_29_9 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_29_9 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3074 [F] s_b_29_10 = constant s32 6 (const) */
        /* execute.simd:3074 [D] s_b_29_11 = s_b_29_9[s_b_29_10] <= s_b_29_8 */
        auto s_b_29_11 = emitter.vector_insert(s_b_29_9, emitter.const_s32((int32_t)6ULL), s_b_29_8);
        /* execute.simd:3074 [D] s_b_29_12: sym_42013_0_rd = s_b_29_11, dominates: s_b_32_9 s_b_34_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_29_11);
        /* execute.simd:3074 [F] s_b_29_13: Jump b_30 (const) */
        {
          auto block = block_b_30;
          dynamic_block_queue.push(block_b_30);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_30) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_30);
        /* execute.simd:3073 [D] s_b_30_0 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_30_0 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_30_1 = constant u8 7 (const) */
        /* execute.simd:3073 [D] s_b_30_0[s_b_30_1] */
        auto s_b_30_2 = emitter.vector_extract(s_b_30_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3073 [F] s_b_30_3 = constant s32 0 (const) */
        /* execute.simd:3073 [D] s_b_30_4 = (s32)s_b_30_2 */
        auto s_b_30_4 = emitter.sx(s_b_30_2, emitter.context().types().s32());
        /* execute.simd:3073 [D] s_b_30_5 = s_b_30_4<s_b_30_3 */
        auto s_b_30_5 = emitter.cmp_lt(s_b_30_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3073 [D] s_b_30_6: If s_b_30_5: Jump b_32 else b_34 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_32;
            dynamic_block_queue.push(block_b_32);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_34;
            dynamic_block_queue.push(block_b_34);
            false_target = block;
          }
          emitter.branch(s_b_30_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_31) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_31);
        /* execute.simd:3076 [D] s_b_31_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_31_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_31_1 = constant u8 6 (const) */
        /* execute.simd:3076 [D] s_b_31_0[s_b_31_1] */
        auto s_b_31_2 = emitter.vector_extract(s_b_31_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3076 [D] s_b_31_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_31_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_31_4 = constant u8 6 (const) */
        /* execute.simd:3076 [D] s_b_31_3[s_b_31_4] */
        auto s_b_31_5 = emitter.vector_extract(s_b_31_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3076 [D] s_b_31_6 = (u8)s_b_31_5 */
        auto s_b_31_6 = emitter.reinterpret(s_b_31_5, emitter.context().types().u8());
        /* execute.simd:3076 [D] s_b_31_7 = s_b_31_2<<s_b_31_6 */
        auto s_b_31_7 = emitter.shl(s_b_31_2, s_b_31_6);
        /* execute.simd:3076 [D] s_b_31_8 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_31_8 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3076 [F] s_b_31_9 = constant s32 6 (const) */
        /* execute.simd:3076 [D] s_b_31_10 = s_b_31_8[s_b_31_9] <= s_b_31_7 */
        auto s_b_31_10 = emitter.vector_insert(s_b_31_8, emitter.const_s32((int32_t)6ULL), s_b_31_7);
        /* execute.simd:3076 [D] s_b_31_11: sym_42013_0_rd = s_b_31_10, dominates: s_b_32_9 s_b_34_8  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_31_10);
        /* execute.simd:3076 [F] s_b_31_12: Jump b_30 (const) */
        {
          auto block = block_b_30;
          dynamic_block_queue.push(block_b_30);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_32) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_32);
        /* execute.simd:3074 [D] s_b_32_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_32_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_32_1 = constant u8 7 (const) */
        /* execute.simd:3074 [D] s_b_32_0[s_b_32_1] */
        auto s_b_32_2 = emitter.vector_extract(s_b_32_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3074 [D] s_b_32_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_32_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_32_4 = constant u8 7 (const) */
        /* execute.simd:3074 [D] s_b_32_3[s_b_32_4] */
        auto s_b_32_5 = emitter.vector_extract(s_b_32_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3074 [D] s_b_32_6 = -s_b_32_5 */
        auto s_b_32_6 = emitter.neg(s_b_32_5);
        /* execute.simd:3074 [D] s_b_32_7 = (u8)s_b_32_6 */
        auto s_b_32_7 = emitter.reinterpret(s_b_32_6, emitter.context().types().u8());
        /* execute.simd:3074 [D] s_b_32_8 = s_b_32_2>>s_b_32_7 */
        auto s_b_32_8 = emitter.shr(s_b_32_2, s_b_32_7);
        /* execute.simd:3074 [D] s_b_32_9 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_32_9 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3074 [F] s_b_32_10 = constant s32 7 (const) */
        /* execute.simd:3074 [D] s_b_32_11 = s_b_32_9[s_b_32_10] <= s_b_32_8 */
        auto s_b_32_11 = emitter.vector_insert(s_b_32_9, emitter.const_s32((int32_t)7ULL), s_b_32_8);
        /* execute.simd:3074 [D] s_b_32_12: sym_42013_0_rd = s_b_32_11, dominates: s_b_33_1  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_32_11);
        /* execute.simd:3074 [F] s_b_32_13: Jump b_33 (const) */
        {
          auto block = block_b_33;
          dynamic_block_queue.push(block_b_33);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_33) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_33);
        /* execute.simd:3080 [F] s_b_33_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3080 [D] s_b_33_1 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_33_1 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3080 [D] s_b_33_2: WriteRegBank 16:s_b_33_0 = s_b_33_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_33_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_33_1);
        /* execute.simd:0 [F] s_b_33_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_34) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_34);
        /* execute.simd:3076 [D] s_b_34_0 = sym_42004_0_rn wutils::Vector<uint8_t, 8> */
        auto s_b_34_0 = emitter.load_local(DV_sym_42004_0_rn, emitter.context().types().v8u8());
        /* ???:4294967295 [F] s_b_34_1 = constant u8 7 (const) */
        /* execute.simd:3076 [D] s_b_34_0[s_b_34_1] */
        auto s_b_34_2 = emitter.vector_extract(s_b_34_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3076 [D] s_b_34_3 = sym_42008_0_rm wutils::Vector<int8_t, 8> */
        auto s_b_34_3 = emitter.load_local(DV_sym_42008_0_rm, emitter.context().types().v8s8());
        /* ???:4294967295 [F] s_b_34_4 = constant u8 7 (const) */
        /* execute.simd:3076 [D] s_b_34_3[s_b_34_4] */
        auto s_b_34_5 = emitter.vector_extract(s_b_34_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3076 [D] s_b_34_6 = (u8)s_b_34_5 */
        auto s_b_34_6 = emitter.reinterpret(s_b_34_5, emitter.context().types().u8());
        /* execute.simd:3076 [D] s_b_34_7 = s_b_34_2<<s_b_34_6 */
        auto s_b_34_7 = emitter.shl(s_b_34_2, s_b_34_6);
        /* execute.simd:3076 [D] s_b_34_8 = sym_42013_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_34_8 = emitter.load_local(DV_sym_42013_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3076 [F] s_b_34_9 = constant s32 7 (const) */
        /* execute.simd:3076 [D] s_b_34_10 = s_b_34_8[s_b_34_9] <= s_b_34_7 */
        auto s_b_34_10 = emitter.vector_insert(s_b_34_8, emitter.const_s32((int32_t)7ULL), s_b_34_7);
        /* execute.simd:3076 [D] s_b_34_11: sym_42013_0_rd = s_b_34_10, dominates: s_b_33_1  */
        emitter.store_local(DV_sym_42013_0_rd, s_b_34_10);
        /* execute.simd:3076 [F] s_b_34_12: Jump b_33 (const) */
        {
          auto block = block_b_33;
          dynamic_block_queue.push(block_b_33);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_36) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_36);
        /* execute.simd:3090 [D] s_b_36_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_36_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_36_1 = constant u8 0 (const) */
        /* execute.simd:3090 [D] s_b_36_0[s_b_36_1] */
        auto s_b_36_2 = emitter.vector_extract(s_b_36_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3090 [D] s_b_36_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_36_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_36_4 = constant u8 0 (const) */
        /* execute.simd:3090 [D] s_b_36_3[s_b_36_4] */
        auto s_b_36_5 = emitter.vector_extract(s_b_36_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3090 [D] s_b_36_6 = -s_b_36_5 */
        auto s_b_36_6 = emitter.neg(s_b_36_5);
        /* execute.simd:3090 [D] s_b_36_7 = (u8)s_b_36_6 */
        auto s_b_36_7 = emitter.reinterpret(s_b_36_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_36_8 = s_b_36_2>>s_b_36_7 */
        auto s_b_36_8 = emitter.shr(s_b_36_2, s_b_36_7);
        /* execute.simd:3090 [F] s_b_36_9 = sym_42419_0_rd (const) wutils::Vector<uint8_t, 16> */
        wutils::Vector<uint8_t, 16> s_b_36_9 = CV_sym_42419_0_rd;
        /* execute.simd:3090 [F] s_b_36_10 = constant s32 0 (const) */
        /* execute.simd:3090 [D] s_b_36_11 = s_b_36_9[s_b_36_10] <= s_b_36_8 */
        auto s_b_36_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_36_9[0], emitter.context().types().v16u8()), emitter.const_s32((int32_t)0ULL), s_b_36_8);
        /* execute.simd:3090 [D] s_b_36_12: sym_42419_0_rd = s_b_36_11, dominates: s_b_39_9 s_b_41_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_36_11);
        /* execute.simd:3090 [F] s_b_36_13: Jump b_37 (const) */
        {
          auto block = block_b_37;
          dynamic_block_queue.push(block_b_37);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_37) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_37);
        /* execute.simd:3089 [D] s_b_37_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_37_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_37_1 = constant u8 1 (const) */
        /* execute.simd:3089 [D] s_b_37_0[s_b_37_1] */
        auto s_b_37_2 = emitter.vector_extract(s_b_37_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3089 [F] s_b_37_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_37_4 = (s32)s_b_37_2 */
        auto s_b_37_4 = emitter.sx(s_b_37_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_37_5 = s_b_37_4<s_b_37_3 */
        auto s_b_37_5 = emitter.cmp_lt(s_b_37_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_37_6: If s_b_37_5: Jump b_39 else b_41 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_39;
            dynamic_block_queue.push(block_b_39);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_41;
            dynamic_block_queue.push(block_b_41);
            false_target = block;
          }
          emitter.branch(s_b_37_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_38) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_38);
        /* execute.simd:3092 [D] s_b_38_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_38_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_38_1 = constant u8 0 (const) */
        /* execute.simd:3092 [D] s_b_38_0[s_b_38_1] */
        auto s_b_38_2 = emitter.vector_extract(s_b_38_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3092 [D] s_b_38_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_38_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_38_4 = constant u8 0 (const) */
        /* execute.simd:3092 [D] s_b_38_3[s_b_38_4] */
        auto s_b_38_5 = emitter.vector_extract(s_b_38_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3092 [D] s_b_38_6 = (u8)s_b_38_5 */
        auto s_b_38_6 = emitter.reinterpret(s_b_38_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_38_7 = s_b_38_2<<s_b_38_6 */
        auto s_b_38_7 = emitter.shl(s_b_38_2, s_b_38_6);
        /* execute.simd:3092 [F] s_b_38_8 = sym_42419_0_rd (const) wutils::Vector<uint8_t, 16> */
        wutils::Vector<uint8_t, 16> s_b_38_8 = CV_sym_42419_0_rd;
        /* execute.simd:3092 [F] s_b_38_9 = constant s32 0 (const) */
        /* execute.simd:3092 [D] s_b_38_10 = s_b_38_8[s_b_38_9] <= s_b_38_7 */
        auto s_b_38_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_38_8[0], emitter.context().types().v16u8()), emitter.const_s32((int32_t)0ULL), s_b_38_7);
        /* execute.simd:3092 [D] s_b_38_11: sym_42419_0_rd = s_b_38_10, dominates: s_b_39_9 s_b_41_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_38_10);
        /* execute.simd:3092 [F] s_b_38_12: Jump b_37 (const) */
        {
          auto block = block_b_37;
          dynamic_block_queue.push(block_b_37);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_39) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_39);
        /* execute.simd:3090 [D] s_b_39_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_39_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_39_1 = constant u8 1 (const) */
        /* execute.simd:3090 [D] s_b_39_0[s_b_39_1] */
        auto s_b_39_2 = emitter.vector_extract(s_b_39_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3090 [D] s_b_39_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_39_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_39_4 = constant u8 1 (const) */
        /* execute.simd:3090 [D] s_b_39_3[s_b_39_4] */
        auto s_b_39_5 = emitter.vector_extract(s_b_39_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3090 [D] s_b_39_6 = -s_b_39_5 */
        auto s_b_39_6 = emitter.neg(s_b_39_5);
        /* execute.simd:3090 [D] s_b_39_7 = (u8)s_b_39_6 */
        auto s_b_39_7 = emitter.reinterpret(s_b_39_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_39_8 = s_b_39_2>>s_b_39_7 */
        auto s_b_39_8 = emitter.shr(s_b_39_2, s_b_39_7);
        /* execute.simd:3090 [D] s_b_39_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_39_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_39_10 = constant s32 1 (const) */
        /* execute.simd:3090 [D] s_b_39_11 = s_b_39_9[s_b_39_10] <= s_b_39_8 */
        auto s_b_39_11 = emitter.vector_insert(s_b_39_9, emitter.const_s32((int32_t)1ULL), s_b_39_8);
        /* execute.simd:3090 [D] s_b_39_12: sym_42419_0_rd = s_b_39_11, dominates: s_b_42_9 s_b_44_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_39_11);
        /* execute.simd:3090 [F] s_b_39_13: Jump b_40 (const) */
        {
          auto block = block_b_40;
          dynamic_block_queue.push(block_b_40);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_40) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_40);
        /* execute.simd:3089 [D] s_b_40_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_40_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_40_1 = constant u8 2 (const) */
        /* execute.simd:3089 [D] s_b_40_0[s_b_40_1] */
        auto s_b_40_2 = emitter.vector_extract(s_b_40_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3089 [F] s_b_40_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_40_4 = (s32)s_b_40_2 */
        auto s_b_40_4 = emitter.sx(s_b_40_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_40_5 = s_b_40_4<s_b_40_3 */
        auto s_b_40_5 = emitter.cmp_lt(s_b_40_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_40_6: If s_b_40_5: Jump b_42 else b_44 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_42;
            dynamic_block_queue.push(block_b_42);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_44;
            dynamic_block_queue.push(block_b_44);
            false_target = block;
          }
          emitter.branch(s_b_40_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_41) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_41);
        /* execute.simd:3092 [D] s_b_41_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_41_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_41_1 = constant u8 1 (const) */
        /* execute.simd:3092 [D] s_b_41_0[s_b_41_1] */
        auto s_b_41_2 = emitter.vector_extract(s_b_41_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3092 [D] s_b_41_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_41_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_41_4 = constant u8 1 (const) */
        /* execute.simd:3092 [D] s_b_41_3[s_b_41_4] */
        auto s_b_41_5 = emitter.vector_extract(s_b_41_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3092 [D] s_b_41_6 = (u8)s_b_41_5 */
        auto s_b_41_6 = emitter.reinterpret(s_b_41_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_41_7 = s_b_41_2<<s_b_41_6 */
        auto s_b_41_7 = emitter.shl(s_b_41_2, s_b_41_6);
        /* execute.simd:3092 [D] s_b_41_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_41_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_41_9 = constant s32 1 (const) */
        /* execute.simd:3092 [D] s_b_41_10 = s_b_41_8[s_b_41_9] <= s_b_41_7 */
        auto s_b_41_10 = emitter.vector_insert(s_b_41_8, emitter.const_s32((int32_t)1ULL), s_b_41_7);
        /* execute.simd:3092 [D] s_b_41_11: sym_42419_0_rd = s_b_41_10, dominates: s_b_42_9 s_b_44_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_41_10);
        /* execute.simd:3092 [F] s_b_41_12: Jump b_40 (const) */
        {
          auto block = block_b_40;
          dynamic_block_queue.push(block_b_40);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_42) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_42);
        /* execute.simd:3090 [D] s_b_42_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_42_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_42_1 = constant u8 2 (const) */
        /* execute.simd:3090 [D] s_b_42_0[s_b_42_1] */
        auto s_b_42_2 = emitter.vector_extract(s_b_42_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3090 [D] s_b_42_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_42_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_42_4 = constant u8 2 (const) */
        /* execute.simd:3090 [D] s_b_42_3[s_b_42_4] */
        auto s_b_42_5 = emitter.vector_extract(s_b_42_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3090 [D] s_b_42_6 = -s_b_42_5 */
        auto s_b_42_6 = emitter.neg(s_b_42_5);
        /* execute.simd:3090 [D] s_b_42_7 = (u8)s_b_42_6 */
        auto s_b_42_7 = emitter.reinterpret(s_b_42_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_42_8 = s_b_42_2>>s_b_42_7 */
        auto s_b_42_8 = emitter.shr(s_b_42_2, s_b_42_7);
        /* execute.simd:3090 [D] s_b_42_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_42_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_42_10 = constant s32 2 (const) */
        /* execute.simd:3090 [D] s_b_42_11 = s_b_42_9[s_b_42_10] <= s_b_42_8 */
        auto s_b_42_11 = emitter.vector_insert(s_b_42_9, emitter.const_s32((int32_t)2ULL), s_b_42_8);
        /* execute.simd:3090 [D] s_b_42_12: sym_42419_0_rd = s_b_42_11, dominates: s_b_45_9 s_b_47_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_42_11);
        /* execute.simd:3090 [F] s_b_42_13: Jump b_43 (const) */
        {
          auto block = block_b_43;
          dynamic_block_queue.push(block_b_43);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_43) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_43);
        /* execute.simd:3089 [D] s_b_43_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_43_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_43_1 = constant u8 3 (const) */
        /* execute.simd:3089 [D] s_b_43_0[s_b_43_1] */
        auto s_b_43_2 = emitter.vector_extract(s_b_43_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3089 [F] s_b_43_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_43_4 = (s32)s_b_43_2 */
        auto s_b_43_4 = emitter.sx(s_b_43_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_43_5 = s_b_43_4<s_b_43_3 */
        auto s_b_43_5 = emitter.cmp_lt(s_b_43_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_43_6: If s_b_43_5: Jump b_45 else b_47 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_45;
            dynamic_block_queue.push(block_b_45);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_47;
            dynamic_block_queue.push(block_b_47);
            false_target = block;
          }
          emitter.branch(s_b_43_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_44) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_44);
        /* execute.simd:3092 [D] s_b_44_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_44_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_44_1 = constant u8 2 (const) */
        /* execute.simd:3092 [D] s_b_44_0[s_b_44_1] */
        auto s_b_44_2 = emitter.vector_extract(s_b_44_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3092 [D] s_b_44_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_44_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_44_4 = constant u8 2 (const) */
        /* execute.simd:3092 [D] s_b_44_3[s_b_44_4] */
        auto s_b_44_5 = emitter.vector_extract(s_b_44_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3092 [D] s_b_44_6 = (u8)s_b_44_5 */
        auto s_b_44_6 = emitter.reinterpret(s_b_44_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_44_7 = s_b_44_2<<s_b_44_6 */
        auto s_b_44_7 = emitter.shl(s_b_44_2, s_b_44_6);
        /* execute.simd:3092 [D] s_b_44_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_44_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_44_9 = constant s32 2 (const) */
        /* execute.simd:3092 [D] s_b_44_10 = s_b_44_8[s_b_44_9] <= s_b_44_7 */
        auto s_b_44_10 = emitter.vector_insert(s_b_44_8, emitter.const_s32((int32_t)2ULL), s_b_44_7);
        /* execute.simd:3092 [D] s_b_44_11: sym_42419_0_rd = s_b_44_10, dominates: s_b_45_9 s_b_47_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_44_10);
        /* execute.simd:3092 [F] s_b_44_12: Jump b_43 (const) */
        {
          auto block = block_b_43;
          dynamic_block_queue.push(block_b_43);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_45) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_45);
        /* execute.simd:3090 [D] s_b_45_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_45_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_45_1 = constant u8 3 (const) */
        /* execute.simd:3090 [D] s_b_45_0[s_b_45_1] */
        auto s_b_45_2 = emitter.vector_extract(s_b_45_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3090 [D] s_b_45_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_45_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_45_4 = constant u8 3 (const) */
        /* execute.simd:3090 [D] s_b_45_3[s_b_45_4] */
        auto s_b_45_5 = emitter.vector_extract(s_b_45_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3090 [D] s_b_45_6 = -s_b_45_5 */
        auto s_b_45_6 = emitter.neg(s_b_45_5);
        /* execute.simd:3090 [D] s_b_45_7 = (u8)s_b_45_6 */
        auto s_b_45_7 = emitter.reinterpret(s_b_45_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_45_8 = s_b_45_2>>s_b_45_7 */
        auto s_b_45_8 = emitter.shr(s_b_45_2, s_b_45_7);
        /* execute.simd:3090 [D] s_b_45_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_45_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_45_10 = constant s32 3 (const) */
        /* execute.simd:3090 [D] s_b_45_11 = s_b_45_9[s_b_45_10] <= s_b_45_8 */
        auto s_b_45_11 = emitter.vector_insert(s_b_45_9, emitter.const_s32((int32_t)3ULL), s_b_45_8);
        /* execute.simd:3090 [D] s_b_45_12: sym_42419_0_rd = s_b_45_11, dominates: s_b_48_9 s_b_50_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_45_11);
        /* execute.simd:3090 [F] s_b_45_13: Jump b_46 (const) */
        {
          auto block = block_b_46;
          dynamic_block_queue.push(block_b_46);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_46) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_46);
        /* execute.simd:3089 [D] s_b_46_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_46_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_46_1 = constant u8 4 (const) */
        /* execute.simd:3089 [D] s_b_46_0[s_b_46_1] */
        auto s_b_46_2 = emitter.vector_extract(s_b_46_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3089 [F] s_b_46_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_46_4 = (s32)s_b_46_2 */
        auto s_b_46_4 = emitter.sx(s_b_46_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_46_5 = s_b_46_4<s_b_46_3 */
        auto s_b_46_5 = emitter.cmp_lt(s_b_46_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_46_6: If s_b_46_5: Jump b_48 else b_50 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_48;
            dynamic_block_queue.push(block_b_48);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_50;
            dynamic_block_queue.push(block_b_50);
            false_target = block;
          }
          emitter.branch(s_b_46_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_47) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_47);
        /* execute.simd:3092 [D] s_b_47_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_47_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_47_1 = constant u8 3 (const) */
        /* execute.simd:3092 [D] s_b_47_0[s_b_47_1] */
        auto s_b_47_2 = emitter.vector_extract(s_b_47_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3092 [D] s_b_47_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_47_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_47_4 = constant u8 3 (const) */
        /* execute.simd:3092 [D] s_b_47_3[s_b_47_4] */
        auto s_b_47_5 = emitter.vector_extract(s_b_47_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3092 [D] s_b_47_6 = (u8)s_b_47_5 */
        auto s_b_47_6 = emitter.reinterpret(s_b_47_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_47_7 = s_b_47_2<<s_b_47_6 */
        auto s_b_47_7 = emitter.shl(s_b_47_2, s_b_47_6);
        /* execute.simd:3092 [D] s_b_47_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_47_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_47_9 = constant s32 3 (const) */
        /* execute.simd:3092 [D] s_b_47_10 = s_b_47_8[s_b_47_9] <= s_b_47_7 */
        auto s_b_47_10 = emitter.vector_insert(s_b_47_8, emitter.const_s32((int32_t)3ULL), s_b_47_7);
        /* execute.simd:3092 [D] s_b_47_11: sym_42419_0_rd = s_b_47_10, dominates: s_b_48_9 s_b_50_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_47_10);
        /* execute.simd:3092 [F] s_b_47_12: Jump b_46 (const) */
        {
          auto block = block_b_46;
          dynamic_block_queue.push(block_b_46);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_48) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_48);
        /* execute.simd:3090 [D] s_b_48_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_48_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_48_1 = constant u8 4 (const) */
        /* execute.simd:3090 [D] s_b_48_0[s_b_48_1] */
        auto s_b_48_2 = emitter.vector_extract(s_b_48_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3090 [D] s_b_48_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_48_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_48_4 = constant u8 4 (const) */
        /* execute.simd:3090 [D] s_b_48_3[s_b_48_4] */
        auto s_b_48_5 = emitter.vector_extract(s_b_48_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3090 [D] s_b_48_6 = -s_b_48_5 */
        auto s_b_48_6 = emitter.neg(s_b_48_5);
        /* execute.simd:3090 [D] s_b_48_7 = (u8)s_b_48_6 */
        auto s_b_48_7 = emitter.reinterpret(s_b_48_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_48_8 = s_b_48_2>>s_b_48_7 */
        auto s_b_48_8 = emitter.shr(s_b_48_2, s_b_48_7);
        /* execute.simd:3090 [D] s_b_48_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_48_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_48_10 = constant s32 4 (const) */
        /* execute.simd:3090 [D] s_b_48_11 = s_b_48_9[s_b_48_10] <= s_b_48_8 */
        auto s_b_48_11 = emitter.vector_insert(s_b_48_9, emitter.const_s32((int32_t)4ULL), s_b_48_8);
        /* execute.simd:3090 [D] s_b_48_12: sym_42419_0_rd = s_b_48_11, dominates: s_b_51_9 s_b_53_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_48_11);
        /* execute.simd:3090 [F] s_b_48_13: Jump b_49 (const) */
        {
          auto block = block_b_49;
          dynamic_block_queue.push(block_b_49);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_49) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_49);
        /* execute.simd:3089 [D] s_b_49_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_49_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_49_1 = constant u8 5 (const) */
        /* execute.simd:3089 [D] s_b_49_0[s_b_49_1] */
        auto s_b_49_2 = emitter.vector_extract(s_b_49_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3089 [F] s_b_49_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_49_4 = (s32)s_b_49_2 */
        auto s_b_49_4 = emitter.sx(s_b_49_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_49_5 = s_b_49_4<s_b_49_3 */
        auto s_b_49_5 = emitter.cmp_lt(s_b_49_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_49_6: If s_b_49_5: Jump b_51 else b_53 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_51;
            dynamic_block_queue.push(block_b_51);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_53;
            dynamic_block_queue.push(block_b_53);
            false_target = block;
          }
          emitter.branch(s_b_49_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_50) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_50);
        /* execute.simd:3092 [D] s_b_50_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_50_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_50_1 = constant u8 4 (const) */
        /* execute.simd:3092 [D] s_b_50_0[s_b_50_1] */
        auto s_b_50_2 = emitter.vector_extract(s_b_50_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3092 [D] s_b_50_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_50_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_50_4 = constant u8 4 (const) */
        /* execute.simd:3092 [D] s_b_50_3[s_b_50_4] */
        auto s_b_50_5 = emitter.vector_extract(s_b_50_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3092 [D] s_b_50_6 = (u8)s_b_50_5 */
        auto s_b_50_6 = emitter.reinterpret(s_b_50_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_50_7 = s_b_50_2<<s_b_50_6 */
        auto s_b_50_7 = emitter.shl(s_b_50_2, s_b_50_6);
        /* execute.simd:3092 [D] s_b_50_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_50_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_50_9 = constant s32 4 (const) */
        /* execute.simd:3092 [D] s_b_50_10 = s_b_50_8[s_b_50_9] <= s_b_50_7 */
        auto s_b_50_10 = emitter.vector_insert(s_b_50_8, emitter.const_s32((int32_t)4ULL), s_b_50_7);
        /* execute.simd:3092 [D] s_b_50_11: sym_42419_0_rd = s_b_50_10, dominates: s_b_51_9 s_b_53_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_50_10);
        /* execute.simd:3092 [F] s_b_50_12: Jump b_49 (const) */
        {
          auto block = block_b_49;
          dynamic_block_queue.push(block_b_49);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_51) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_51);
        /* execute.simd:3090 [D] s_b_51_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_51_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_51_1 = constant u8 5 (const) */
        /* execute.simd:3090 [D] s_b_51_0[s_b_51_1] */
        auto s_b_51_2 = emitter.vector_extract(s_b_51_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3090 [D] s_b_51_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_51_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_51_4 = constant u8 5 (const) */
        /* execute.simd:3090 [D] s_b_51_3[s_b_51_4] */
        auto s_b_51_5 = emitter.vector_extract(s_b_51_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3090 [D] s_b_51_6 = -s_b_51_5 */
        auto s_b_51_6 = emitter.neg(s_b_51_5);
        /* execute.simd:3090 [D] s_b_51_7 = (u8)s_b_51_6 */
        auto s_b_51_7 = emitter.reinterpret(s_b_51_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_51_8 = s_b_51_2>>s_b_51_7 */
        auto s_b_51_8 = emitter.shr(s_b_51_2, s_b_51_7);
        /* execute.simd:3090 [D] s_b_51_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_51_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_51_10 = constant s32 5 (const) */
        /* execute.simd:3090 [D] s_b_51_11 = s_b_51_9[s_b_51_10] <= s_b_51_8 */
        auto s_b_51_11 = emitter.vector_insert(s_b_51_9, emitter.const_s32((int32_t)5ULL), s_b_51_8);
        /* execute.simd:3090 [D] s_b_51_12: sym_42419_0_rd = s_b_51_11, dominates: s_b_54_9 s_b_56_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_51_11);
        /* execute.simd:3090 [F] s_b_51_13: Jump b_52 (const) */
        {
          auto block = block_b_52;
          dynamic_block_queue.push(block_b_52);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_52) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_52);
        /* execute.simd:3089 [D] s_b_52_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_52_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_52_1 = constant u8 6 (const) */
        /* execute.simd:3089 [D] s_b_52_0[s_b_52_1] */
        auto s_b_52_2 = emitter.vector_extract(s_b_52_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3089 [F] s_b_52_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_52_4 = (s32)s_b_52_2 */
        auto s_b_52_4 = emitter.sx(s_b_52_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_52_5 = s_b_52_4<s_b_52_3 */
        auto s_b_52_5 = emitter.cmp_lt(s_b_52_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_52_6: If s_b_52_5: Jump b_54 else b_56 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_54;
            dynamic_block_queue.push(block_b_54);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_56;
            dynamic_block_queue.push(block_b_56);
            false_target = block;
          }
          emitter.branch(s_b_52_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_53) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_53);
        /* execute.simd:3092 [D] s_b_53_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_53_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_53_1 = constant u8 5 (const) */
        /* execute.simd:3092 [D] s_b_53_0[s_b_53_1] */
        auto s_b_53_2 = emitter.vector_extract(s_b_53_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3092 [D] s_b_53_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_53_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_53_4 = constant u8 5 (const) */
        /* execute.simd:3092 [D] s_b_53_3[s_b_53_4] */
        auto s_b_53_5 = emitter.vector_extract(s_b_53_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3092 [D] s_b_53_6 = (u8)s_b_53_5 */
        auto s_b_53_6 = emitter.reinterpret(s_b_53_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_53_7 = s_b_53_2<<s_b_53_6 */
        auto s_b_53_7 = emitter.shl(s_b_53_2, s_b_53_6);
        /* execute.simd:3092 [D] s_b_53_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_53_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_53_9 = constant s32 5 (const) */
        /* execute.simd:3092 [D] s_b_53_10 = s_b_53_8[s_b_53_9] <= s_b_53_7 */
        auto s_b_53_10 = emitter.vector_insert(s_b_53_8, emitter.const_s32((int32_t)5ULL), s_b_53_7);
        /* execute.simd:3092 [D] s_b_53_11: sym_42419_0_rd = s_b_53_10, dominates: s_b_54_9 s_b_56_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_53_10);
        /* execute.simd:3092 [F] s_b_53_12: Jump b_52 (const) */
        {
          auto block = block_b_52;
          dynamic_block_queue.push(block_b_52);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_54) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_54);
        /* execute.simd:3090 [D] s_b_54_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_54_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_54_1 = constant u8 6 (const) */
        /* execute.simd:3090 [D] s_b_54_0[s_b_54_1] */
        auto s_b_54_2 = emitter.vector_extract(s_b_54_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3090 [D] s_b_54_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_54_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_54_4 = constant u8 6 (const) */
        /* execute.simd:3090 [D] s_b_54_3[s_b_54_4] */
        auto s_b_54_5 = emitter.vector_extract(s_b_54_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3090 [D] s_b_54_6 = -s_b_54_5 */
        auto s_b_54_6 = emitter.neg(s_b_54_5);
        /* execute.simd:3090 [D] s_b_54_7 = (u8)s_b_54_6 */
        auto s_b_54_7 = emitter.reinterpret(s_b_54_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_54_8 = s_b_54_2>>s_b_54_7 */
        auto s_b_54_8 = emitter.shr(s_b_54_2, s_b_54_7);
        /* execute.simd:3090 [D] s_b_54_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_54_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_54_10 = constant s32 6 (const) */
        /* execute.simd:3090 [D] s_b_54_11 = s_b_54_9[s_b_54_10] <= s_b_54_8 */
        auto s_b_54_11 = emitter.vector_insert(s_b_54_9, emitter.const_s32((int32_t)6ULL), s_b_54_8);
        /* execute.simd:3090 [D] s_b_54_12: sym_42419_0_rd = s_b_54_11, dominates: s_b_57_9 s_b_59_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_54_11);
        /* execute.simd:3090 [F] s_b_54_13: Jump b_55 (const) */
        {
          auto block = block_b_55;
          dynamic_block_queue.push(block_b_55);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_55) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_55);
        /* execute.simd:3089 [D] s_b_55_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_55_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_55_1 = constant u8 7 (const) */
        /* execute.simd:3089 [D] s_b_55_0[s_b_55_1] */
        auto s_b_55_2 = emitter.vector_extract(s_b_55_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3089 [F] s_b_55_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_55_4 = (s32)s_b_55_2 */
        auto s_b_55_4 = emitter.sx(s_b_55_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_55_5 = s_b_55_4<s_b_55_3 */
        auto s_b_55_5 = emitter.cmp_lt(s_b_55_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_55_6: If s_b_55_5: Jump b_57 else b_59 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_57;
            dynamic_block_queue.push(block_b_57);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_59;
            dynamic_block_queue.push(block_b_59);
            false_target = block;
          }
          emitter.branch(s_b_55_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_56) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_56);
        /* execute.simd:3092 [D] s_b_56_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_56_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_56_1 = constant u8 6 (const) */
        /* execute.simd:3092 [D] s_b_56_0[s_b_56_1] */
        auto s_b_56_2 = emitter.vector_extract(s_b_56_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3092 [D] s_b_56_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_56_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_56_4 = constant u8 6 (const) */
        /* execute.simd:3092 [D] s_b_56_3[s_b_56_4] */
        auto s_b_56_5 = emitter.vector_extract(s_b_56_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3092 [D] s_b_56_6 = (u8)s_b_56_5 */
        auto s_b_56_6 = emitter.reinterpret(s_b_56_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_56_7 = s_b_56_2<<s_b_56_6 */
        auto s_b_56_7 = emitter.shl(s_b_56_2, s_b_56_6);
        /* execute.simd:3092 [D] s_b_56_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_56_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_56_9 = constant s32 6 (const) */
        /* execute.simd:3092 [D] s_b_56_10 = s_b_56_8[s_b_56_9] <= s_b_56_7 */
        auto s_b_56_10 = emitter.vector_insert(s_b_56_8, emitter.const_s32((int32_t)6ULL), s_b_56_7);
        /* execute.simd:3092 [D] s_b_56_11: sym_42419_0_rd = s_b_56_10, dominates: s_b_57_9 s_b_59_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_56_10);
        /* execute.simd:3092 [F] s_b_56_12: Jump b_55 (const) */
        {
          auto block = block_b_55;
          dynamic_block_queue.push(block_b_55);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_57) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_57);
        /* execute.simd:3090 [D] s_b_57_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_57_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_57_1 = constant u8 7 (const) */
        /* execute.simd:3090 [D] s_b_57_0[s_b_57_1] */
        auto s_b_57_2 = emitter.vector_extract(s_b_57_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3090 [D] s_b_57_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_57_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_57_4 = constant u8 7 (const) */
        /* execute.simd:3090 [D] s_b_57_3[s_b_57_4] */
        auto s_b_57_5 = emitter.vector_extract(s_b_57_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3090 [D] s_b_57_6 = -s_b_57_5 */
        auto s_b_57_6 = emitter.neg(s_b_57_5);
        /* execute.simd:3090 [D] s_b_57_7 = (u8)s_b_57_6 */
        auto s_b_57_7 = emitter.reinterpret(s_b_57_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_57_8 = s_b_57_2>>s_b_57_7 */
        auto s_b_57_8 = emitter.shr(s_b_57_2, s_b_57_7);
        /* execute.simd:3090 [D] s_b_57_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_57_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_57_10 = constant s32 7 (const) */
        /* execute.simd:3090 [D] s_b_57_11 = s_b_57_9[s_b_57_10] <= s_b_57_8 */
        auto s_b_57_11 = emitter.vector_insert(s_b_57_9, emitter.const_s32((int32_t)7ULL), s_b_57_8);
        /* execute.simd:3090 [D] s_b_57_12: sym_42419_0_rd = s_b_57_11, dominates: s_b_60_9 s_b_62_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_57_11);
        /* execute.simd:3090 [F] s_b_57_13: Jump b_58 (const) */
        {
          auto block = block_b_58;
          dynamic_block_queue.push(block_b_58);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_58) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_58);
        /* execute.simd:3089 [D] s_b_58_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_58_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_58_1 = constant u8 8 (const) */
        /* execute.simd:3089 [D] s_b_58_0[s_b_58_1] */
        auto s_b_58_2 = emitter.vector_extract(s_b_58_0, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3089 [F] s_b_58_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_58_4 = (s32)s_b_58_2 */
        auto s_b_58_4 = emitter.sx(s_b_58_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_58_5 = s_b_58_4<s_b_58_3 */
        auto s_b_58_5 = emitter.cmp_lt(s_b_58_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_58_6: If s_b_58_5: Jump b_60 else b_62 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_60;
            dynamic_block_queue.push(block_b_60);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_62;
            dynamic_block_queue.push(block_b_62);
            false_target = block;
          }
          emitter.branch(s_b_58_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_59) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_59);
        /* execute.simd:3092 [D] s_b_59_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_59_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_59_1 = constant u8 7 (const) */
        /* execute.simd:3092 [D] s_b_59_0[s_b_59_1] */
        auto s_b_59_2 = emitter.vector_extract(s_b_59_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3092 [D] s_b_59_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_59_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_59_4 = constant u8 7 (const) */
        /* execute.simd:3092 [D] s_b_59_3[s_b_59_4] */
        auto s_b_59_5 = emitter.vector_extract(s_b_59_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3092 [D] s_b_59_6 = (u8)s_b_59_5 */
        auto s_b_59_6 = emitter.reinterpret(s_b_59_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_59_7 = s_b_59_2<<s_b_59_6 */
        auto s_b_59_7 = emitter.shl(s_b_59_2, s_b_59_6);
        /* execute.simd:3092 [D] s_b_59_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_59_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_59_9 = constant s32 7 (const) */
        /* execute.simd:3092 [D] s_b_59_10 = s_b_59_8[s_b_59_9] <= s_b_59_7 */
        auto s_b_59_10 = emitter.vector_insert(s_b_59_8, emitter.const_s32((int32_t)7ULL), s_b_59_7);
        /* execute.simd:3092 [D] s_b_59_11: sym_42419_0_rd = s_b_59_10, dominates: s_b_60_9 s_b_62_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_59_10);
        /* execute.simd:3092 [F] s_b_59_12: Jump b_58 (const) */
        {
          auto block = block_b_58;
          dynamic_block_queue.push(block_b_58);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_60) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_60);
        /* execute.simd:3090 [D] s_b_60_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_60_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_60_1 = constant u8 8 (const) */
        /* execute.simd:3090 [D] s_b_60_0[s_b_60_1] */
        auto s_b_60_2 = emitter.vector_extract(s_b_60_0, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3090 [D] s_b_60_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_60_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_60_4 = constant u8 8 (const) */
        /* execute.simd:3090 [D] s_b_60_3[s_b_60_4] */
        auto s_b_60_5 = emitter.vector_extract(s_b_60_3, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3090 [D] s_b_60_6 = -s_b_60_5 */
        auto s_b_60_6 = emitter.neg(s_b_60_5);
        /* execute.simd:3090 [D] s_b_60_7 = (u8)s_b_60_6 */
        auto s_b_60_7 = emitter.reinterpret(s_b_60_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_60_8 = s_b_60_2>>s_b_60_7 */
        auto s_b_60_8 = emitter.shr(s_b_60_2, s_b_60_7);
        /* execute.simd:3090 [D] s_b_60_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_60_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_60_10 = constant s32 8 (const) */
        /* execute.simd:3090 [D] s_b_60_11 = s_b_60_9[s_b_60_10] <= s_b_60_8 */
        auto s_b_60_11 = emitter.vector_insert(s_b_60_9, emitter.const_s32((int32_t)8ULL), s_b_60_8);
        /* execute.simd:3090 [D] s_b_60_12: sym_42419_0_rd = s_b_60_11, dominates: s_b_63_9 s_b_65_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_60_11);
        /* execute.simd:3090 [F] s_b_60_13: Jump b_61 (const) */
        {
          auto block = block_b_61;
          dynamic_block_queue.push(block_b_61);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_61) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_61);
        /* execute.simd:3089 [D] s_b_61_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_61_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_61_1 = constant u8 9 (const) */
        /* execute.simd:3089 [D] s_b_61_0[s_b_61_1] */
        auto s_b_61_2 = emitter.vector_extract(s_b_61_0, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3089 [F] s_b_61_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_61_4 = (s32)s_b_61_2 */
        auto s_b_61_4 = emitter.sx(s_b_61_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_61_5 = s_b_61_4<s_b_61_3 */
        auto s_b_61_5 = emitter.cmp_lt(s_b_61_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_61_6: If s_b_61_5: Jump b_63 else b_65 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_63;
            dynamic_block_queue.push(block_b_63);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_65;
            dynamic_block_queue.push(block_b_65);
            false_target = block;
          }
          emitter.branch(s_b_61_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_62) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_62);
        /* execute.simd:3092 [D] s_b_62_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_62_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_62_1 = constant u8 8 (const) */
        /* execute.simd:3092 [D] s_b_62_0[s_b_62_1] */
        auto s_b_62_2 = emitter.vector_extract(s_b_62_0, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3092 [D] s_b_62_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_62_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_62_4 = constant u8 8 (const) */
        /* execute.simd:3092 [D] s_b_62_3[s_b_62_4] */
        auto s_b_62_5 = emitter.vector_extract(s_b_62_3, emitter.const_u8((uint8_t)8ULL));
        /* execute.simd:3092 [D] s_b_62_6 = (u8)s_b_62_5 */
        auto s_b_62_6 = emitter.reinterpret(s_b_62_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_62_7 = s_b_62_2<<s_b_62_6 */
        auto s_b_62_7 = emitter.shl(s_b_62_2, s_b_62_6);
        /* execute.simd:3092 [D] s_b_62_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_62_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_62_9 = constant s32 8 (const) */
        /* execute.simd:3092 [D] s_b_62_10 = s_b_62_8[s_b_62_9] <= s_b_62_7 */
        auto s_b_62_10 = emitter.vector_insert(s_b_62_8, emitter.const_s32((int32_t)8ULL), s_b_62_7);
        /* execute.simd:3092 [D] s_b_62_11: sym_42419_0_rd = s_b_62_10, dominates: s_b_63_9 s_b_65_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_62_10);
        /* execute.simd:3092 [F] s_b_62_12: Jump b_61 (const) */
        {
          auto block = block_b_61;
          dynamic_block_queue.push(block_b_61);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_63) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_63);
        /* execute.simd:3090 [D] s_b_63_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_63_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_63_1 = constant u8 9 (const) */
        /* execute.simd:3090 [D] s_b_63_0[s_b_63_1] */
        auto s_b_63_2 = emitter.vector_extract(s_b_63_0, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3090 [D] s_b_63_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_63_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_63_4 = constant u8 9 (const) */
        /* execute.simd:3090 [D] s_b_63_3[s_b_63_4] */
        auto s_b_63_5 = emitter.vector_extract(s_b_63_3, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3090 [D] s_b_63_6 = -s_b_63_5 */
        auto s_b_63_6 = emitter.neg(s_b_63_5);
        /* execute.simd:3090 [D] s_b_63_7 = (u8)s_b_63_6 */
        auto s_b_63_7 = emitter.reinterpret(s_b_63_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_63_8 = s_b_63_2>>s_b_63_7 */
        auto s_b_63_8 = emitter.shr(s_b_63_2, s_b_63_7);
        /* execute.simd:3090 [D] s_b_63_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_63_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_63_10 = constant s32 9 (const) */
        /* execute.simd:3090 [D] s_b_63_11 = s_b_63_9[s_b_63_10] <= s_b_63_8 */
        auto s_b_63_11 = emitter.vector_insert(s_b_63_9, emitter.const_s32((int32_t)9ULL), s_b_63_8);
        /* execute.simd:3090 [D] s_b_63_12: sym_42419_0_rd = s_b_63_11, dominates: s_b_66_9 s_b_68_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_63_11);
        /* execute.simd:3090 [F] s_b_63_13: Jump b_64 (const) */
        {
          auto block = block_b_64;
          dynamic_block_queue.push(block_b_64);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_64) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_64);
        /* execute.simd:3089 [D] s_b_64_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_64_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_64_1 = constant u8 a (const) */
        /* execute.simd:3089 [D] s_b_64_0[s_b_64_1] */
        auto s_b_64_2 = emitter.vector_extract(s_b_64_0, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3089 [F] s_b_64_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_64_4 = (s32)s_b_64_2 */
        auto s_b_64_4 = emitter.sx(s_b_64_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_64_5 = s_b_64_4<s_b_64_3 */
        auto s_b_64_5 = emitter.cmp_lt(s_b_64_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_64_6: If s_b_64_5: Jump b_66 else b_68 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_66;
            dynamic_block_queue.push(block_b_66);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_68;
            dynamic_block_queue.push(block_b_68);
            false_target = block;
          }
          emitter.branch(s_b_64_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_65) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_65);
        /* execute.simd:3092 [D] s_b_65_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_65_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_65_1 = constant u8 9 (const) */
        /* execute.simd:3092 [D] s_b_65_0[s_b_65_1] */
        auto s_b_65_2 = emitter.vector_extract(s_b_65_0, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3092 [D] s_b_65_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_65_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_65_4 = constant u8 9 (const) */
        /* execute.simd:3092 [D] s_b_65_3[s_b_65_4] */
        auto s_b_65_5 = emitter.vector_extract(s_b_65_3, emitter.const_u8((uint8_t)9ULL));
        /* execute.simd:3092 [D] s_b_65_6 = (u8)s_b_65_5 */
        auto s_b_65_6 = emitter.reinterpret(s_b_65_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_65_7 = s_b_65_2<<s_b_65_6 */
        auto s_b_65_7 = emitter.shl(s_b_65_2, s_b_65_6);
        /* execute.simd:3092 [D] s_b_65_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_65_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_65_9 = constant s32 9 (const) */
        /* execute.simd:3092 [D] s_b_65_10 = s_b_65_8[s_b_65_9] <= s_b_65_7 */
        auto s_b_65_10 = emitter.vector_insert(s_b_65_8, emitter.const_s32((int32_t)9ULL), s_b_65_7);
        /* execute.simd:3092 [D] s_b_65_11: sym_42419_0_rd = s_b_65_10, dominates: s_b_66_9 s_b_68_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_65_10);
        /* execute.simd:3092 [F] s_b_65_12: Jump b_64 (const) */
        {
          auto block = block_b_64;
          dynamic_block_queue.push(block_b_64);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_66) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_66);
        /* execute.simd:3090 [D] s_b_66_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_66_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_66_1 = constant u8 a (const) */
        /* execute.simd:3090 [D] s_b_66_0[s_b_66_1] */
        auto s_b_66_2 = emitter.vector_extract(s_b_66_0, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3090 [D] s_b_66_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_66_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_66_4 = constant u8 a (const) */
        /* execute.simd:3090 [D] s_b_66_3[s_b_66_4] */
        auto s_b_66_5 = emitter.vector_extract(s_b_66_3, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3090 [D] s_b_66_6 = -s_b_66_5 */
        auto s_b_66_6 = emitter.neg(s_b_66_5);
        /* execute.simd:3090 [D] s_b_66_7 = (u8)s_b_66_6 */
        auto s_b_66_7 = emitter.reinterpret(s_b_66_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_66_8 = s_b_66_2>>s_b_66_7 */
        auto s_b_66_8 = emitter.shr(s_b_66_2, s_b_66_7);
        /* execute.simd:3090 [D] s_b_66_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_66_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_66_10 = constant s32 a (const) */
        /* execute.simd:3090 [D] s_b_66_11 = s_b_66_9[s_b_66_10] <= s_b_66_8 */
        auto s_b_66_11 = emitter.vector_insert(s_b_66_9, emitter.const_s32((int32_t)10ULL), s_b_66_8);
        /* execute.simd:3090 [D] s_b_66_12: sym_42419_0_rd = s_b_66_11, dominates: s_b_69_9 s_b_71_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_66_11);
        /* execute.simd:3090 [F] s_b_66_13: Jump b_67 (const) */
        {
          auto block = block_b_67;
          dynamic_block_queue.push(block_b_67);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_67) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_67);
        /* execute.simd:3089 [D] s_b_67_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_67_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_67_1 = constant u8 b (const) */
        /* execute.simd:3089 [D] s_b_67_0[s_b_67_1] */
        auto s_b_67_2 = emitter.vector_extract(s_b_67_0, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3089 [F] s_b_67_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_67_4 = (s32)s_b_67_2 */
        auto s_b_67_4 = emitter.sx(s_b_67_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_67_5 = s_b_67_4<s_b_67_3 */
        auto s_b_67_5 = emitter.cmp_lt(s_b_67_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_67_6: If s_b_67_5: Jump b_69 else b_71 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_69;
            dynamic_block_queue.push(block_b_69);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_71;
            dynamic_block_queue.push(block_b_71);
            false_target = block;
          }
          emitter.branch(s_b_67_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_68) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_68);
        /* execute.simd:3092 [D] s_b_68_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_68_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_68_1 = constant u8 a (const) */
        /* execute.simd:3092 [D] s_b_68_0[s_b_68_1] */
        auto s_b_68_2 = emitter.vector_extract(s_b_68_0, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3092 [D] s_b_68_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_68_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_68_4 = constant u8 a (const) */
        /* execute.simd:3092 [D] s_b_68_3[s_b_68_4] */
        auto s_b_68_5 = emitter.vector_extract(s_b_68_3, emitter.const_u8((uint8_t)10ULL));
        /* execute.simd:3092 [D] s_b_68_6 = (u8)s_b_68_5 */
        auto s_b_68_6 = emitter.reinterpret(s_b_68_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_68_7 = s_b_68_2<<s_b_68_6 */
        auto s_b_68_7 = emitter.shl(s_b_68_2, s_b_68_6);
        /* execute.simd:3092 [D] s_b_68_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_68_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_68_9 = constant s32 a (const) */
        /* execute.simd:3092 [D] s_b_68_10 = s_b_68_8[s_b_68_9] <= s_b_68_7 */
        auto s_b_68_10 = emitter.vector_insert(s_b_68_8, emitter.const_s32((int32_t)10ULL), s_b_68_7);
        /* execute.simd:3092 [D] s_b_68_11: sym_42419_0_rd = s_b_68_10, dominates: s_b_69_9 s_b_71_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_68_10);
        /* execute.simd:3092 [F] s_b_68_12: Jump b_67 (const) */
        {
          auto block = block_b_67;
          dynamic_block_queue.push(block_b_67);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_69) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_69);
        /* execute.simd:3090 [D] s_b_69_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_69_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_69_1 = constant u8 b (const) */
        /* execute.simd:3090 [D] s_b_69_0[s_b_69_1] */
        auto s_b_69_2 = emitter.vector_extract(s_b_69_0, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3090 [D] s_b_69_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_69_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_69_4 = constant u8 b (const) */
        /* execute.simd:3090 [D] s_b_69_3[s_b_69_4] */
        auto s_b_69_5 = emitter.vector_extract(s_b_69_3, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3090 [D] s_b_69_6 = -s_b_69_5 */
        auto s_b_69_6 = emitter.neg(s_b_69_5);
        /* execute.simd:3090 [D] s_b_69_7 = (u8)s_b_69_6 */
        auto s_b_69_7 = emitter.reinterpret(s_b_69_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_69_8 = s_b_69_2>>s_b_69_7 */
        auto s_b_69_8 = emitter.shr(s_b_69_2, s_b_69_7);
        /* execute.simd:3090 [D] s_b_69_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_69_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_69_10 = constant s32 b (const) */
        /* execute.simd:3090 [D] s_b_69_11 = s_b_69_9[s_b_69_10] <= s_b_69_8 */
        auto s_b_69_11 = emitter.vector_insert(s_b_69_9, emitter.const_s32((int32_t)11ULL), s_b_69_8);
        /* execute.simd:3090 [D] s_b_69_12: sym_42419_0_rd = s_b_69_11, dominates: s_b_72_9 s_b_74_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_69_11);
        /* execute.simd:3090 [F] s_b_69_13: Jump b_70 (const) */
        {
          auto block = block_b_70;
          dynamic_block_queue.push(block_b_70);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_70) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_70);
        /* execute.simd:3089 [D] s_b_70_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_70_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_70_1 = constant u8 c (const) */
        /* execute.simd:3089 [D] s_b_70_0[s_b_70_1] */
        auto s_b_70_2 = emitter.vector_extract(s_b_70_0, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3089 [F] s_b_70_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_70_4 = (s32)s_b_70_2 */
        auto s_b_70_4 = emitter.sx(s_b_70_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_70_5 = s_b_70_4<s_b_70_3 */
        auto s_b_70_5 = emitter.cmp_lt(s_b_70_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_70_6: If s_b_70_5: Jump b_72 else b_74 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_72;
            dynamic_block_queue.push(block_b_72);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_74;
            dynamic_block_queue.push(block_b_74);
            false_target = block;
          }
          emitter.branch(s_b_70_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_71) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_71);
        /* execute.simd:3092 [D] s_b_71_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_71_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_71_1 = constant u8 b (const) */
        /* execute.simd:3092 [D] s_b_71_0[s_b_71_1] */
        auto s_b_71_2 = emitter.vector_extract(s_b_71_0, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3092 [D] s_b_71_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_71_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_71_4 = constant u8 b (const) */
        /* execute.simd:3092 [D] s_b_71_3[s_b_71_4] */
        auto s_b_71_5 = emitter.vector_extract(s_b_71_3, emitter.const_u8((uint8_t)11ULL));
        /* execute.simd:3092 [D] s_b_71_6 = (u8)s_b_71_5 */
        auto s_b_71_6 = emitter.reinterpret(s_b_71_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_71_7 = s_b_71_2<<s_b_71_6 */
        auto s_b_71_7 = emitter.shl(s_b_71_2, s_b_71_6);
        /* execute.simd:3092 [D] s_b_71_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_71_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_71_9 = constant s32 b (const) */
        /* execute.simd:3092 [D] s_b_71_10 = s_b_71_8[s_b_71_9] <= s_b_71_7 */
        auto s_b_71_10 = emitter.vector_insert(s_b_71_8, emitter.const_s32((int32_t)11ULL), s_b_71_7);
        /* execute.simd:3092 [D] s_b_71_11: sym_42419_0_rd = s_b_71_10, dominates: s_b_72_9 s_b_74_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_71_10);
        /* execute.simd:3092 [F] s_b_71_12: Jump b_70 (const) */
        {
          auto block = block_b_70;
          dynamic_block_queue.push(block_b_70);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_72) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_72);
        /* execute.simd:3090 [D] s_b_72_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_72_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_72_1 = constant u8 c (const) */
        /* execute.simd:3090 [D] s_b_72_0[s_b_72_1] */
        auto s_b_72_2 = emitter.vector_extract(s_b_72_0, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3090 [D] s_b_72_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_72_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_72_4 = constant u8 c (const) */
        /* execute.simd:3090 [D] s_b_72_3[s_b_72_4] */
        auto s_b_72_5 = emitter.vector_extract(s_b_72_3, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3090 [D] s_b_72_6 = -s_b_72_5 */
        auto s_b_72_6 = emitter.neg(s_b_72_5);
        /* execute.simd:3090 [D] s_b_72_7 = (u8)s_b_72_6 */
        auto s_b_72_7 = emitter.reinterpret(s_b_72_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_72_8 = s_b_72_2>>s_b_72_7 */
        auto s_b_72_8 = emitter.shr(s_b_72_2, s_b_72_7);
        /* execute.simd:3090 [D] s_b_72_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_72_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_72_10 = constant s32 c (const) */
        /* execute.simd:3090 [D] s_b_72_11 = s_b_72_9[s_b_72_10] <= s_b_72_8 */
        auto s_b_72_11 = emitter.vector_insert(s_b_72_9, emitter.const_s32((int32_t)12ULL), s_b_72_8);
        /* execute.simd:3090 [D] s_b_72_12: sym_42419_0_rd = s_b_72_11, dominates: s_b_75_9 s_b_77_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_72_11);
        /* execute.simd:3090 [F] s_b_72_13: Jump b_73 (const) */
        {
          auto block = block_b_73;
          dynamic_block_queue.push(block_b_73);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_73) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_73);
        /* execute.simd:3089 [D] s_b_73_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_73_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_73_1 = constant u8 d (const) */
        /* execute.simd:3089 [D] s_b_73_0[s_b_73_1] */
        auto s_b_73_2 = emitter.vector_extract(s_b_73_0, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3089 [F] s_b_73_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_73_4 = (s32)s_b_73_2 */
        auto s_b_73_4 = emitter.sx(s_b_73_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_73_5 = s_b_73_4<s_b_73_3 */
        auto s_b_73_5 = emitter.cmp_lt(s_b_73_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_73_6: If s_b_73_5: Jump b_75 else b_77 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_75;
            dynamic_block_queue.push(block_b_75);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_77;
            dynamic_block_queue.push(block_b_77);
            false_target = block;
          }
          emitter.branch(s_b_73_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_74) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_74);
        /* execute.simd:3092 [D] s_b_74_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_74_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_74_1 = constant u8 c (const) */
        /* execute.simd:3092 [D] s_b_74_0[s_b_74_1] */
        auto s_b_74_2 = emitter.vector_extract(s_b_74_0, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3092 [D] s_b_74_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_74_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_74_4 = constant u8 c (const) */
        /* execute.simd:3092 [D] s_b_74_3[s_b_74_4] */
        auto s_b_74_5 = emitter.vector_extract(s_b_74_3, emitter.const_u8((uint8_t)12ULL));
        /* execute.simd:3092 [D] s_b_74_6 = (u8)s_b_74_5 */
        auto s_b_74_6 = emitter.reinterpret(s_b_74_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_74_7 = s_b_74_2<<s_b_74_6 */
        auto s_b_74_7 = emitter.shl(s_b_74_2, s_b_74_6);
        /* execute.simd:3092 [D] s_b_74_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_74_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_74_9 = constant s32 c (const) */
        /* execute.simd:3092 [D] s_b_74_10 = s_b_74_8[s_b_74_9] <= s_b_74_7 */
        auto s_b_74_10 = emitter.vector_insert(s_b_74_8, emitter.const_s32((int32_t)12ULL), s_b_74_7);
        /* execute.simd:3092 [D] s_b_74_11: sym_42419_0_rd = s_b_74_10, dominates: s_b_75_9 s_b_77_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_74_10);
        /* execute.simd:3092 [F] s_b_74_12: Jump b_73 (const) */
        {
          auto block = block_b_73;
          dynamic_block_queue.push(block_b_73);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_75) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_75);
        /* execute.simd:3090 [D] s_b_75_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_75_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_75_1 = constant u8 d (const) */
        /* execute.simd:3090 [D] s_b_75_0[s_b_75_1] */
        auto s_b_75_2 = emitter.vector_extract(s_b_75_0, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3090 [D] s_b_75_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_75_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_75_4 = constant u8 d (const) */
        /* execute.simd:3090 [D] s_b_75_3[s_b_75_4] */
        auto s_b_75_5 = emitter.vector_extract(s_b_75_3, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3090 [D] s_b_75_6 = -s_b_75_5 */
        auto s_b_75_6 = emitter.neg(s_b_75_5);
        /* execute.simd:3090 [D] s_b_75_7 = (u8)s_b_75_6 */
        auto s_b_75_7 = emitter.reinterpret(s_b_75_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_75_8 = s_b_75_2>>s_b_75_7 */
        auto s_b_75_8 = emitter.shr(s_b_75_2, s_b_75_7);
        /* execute.simd:3090 [D] s_b_75_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_75_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_75_10 = constant s32 d (const) */
        /* execute.simd:3090 [D] s_b_75_11 = s_b_75_9[s_b_75_10] <= s_b_75_8 */
        auto s_b_75_11 = emitter.vector_insert(s_b_75_9, emitter.const_s32((int32_t)13ULL), s_b_75_8);
        /* execute.simd:3090 [D] s_b_75_12: sym_42419_0_rd = s_b_75_11, dominates: s_b_78_9 s_b_80_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_75_11);
        /* execute.simd:3090 [F] s_b_75_13: Jump b_76 (const) */
        {
          auto block = block_b_76;
          dynamic_block_queue.push(block_b_76);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_76) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_76);
        /* execute.simd:3089 [D] s_b_76_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_76_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_76_1 = constant u8 e (const) */
        /* execute.simd:3089 [D] s_b_76_0[s_b_76_1] */
        auto s_b_76_2 = emitter.vector_extract(s_b_76_0, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3089 [F] s_b_76_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_76_4 = (s32)s_b_76_2 */
        auto s_b_76_4 = emitter.sx(s_b_76_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_76_5 = s_b_76_4<s_b_76_3 */
        auto s_b_76_5 = emitter.cmp_lt(s_b_76_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_76_6: If s_b_76_5: Jump b_78 else b_80 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_78;
            dynamic_block_queue.push(block_b_78);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_80;
            dynamic_block_queue.push(block_b_80);
            false_target = block;
          }
          emitter.branch(s_b_76_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_77) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_77);
        /* execute.simd:3092 [D] s_b_77_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_77_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_77_1 = constant u8 d (const) */
        /* execute.simd:3092 [D] s_b_77_0[s_b_77_1] */
        auto s_b_77_2 = emitter.vector_extract(s_b_77_0, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3092 [D] s_b_77_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_77_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_77_4 = constant u8 d (const) */
        /* execute.simd:3092 [D] s_b_77_3[s_b_77_4] */
        auto s_b_77_5 = emitter.vector_extract(s_b_77_3, emitter.const_u8((uint8_t)13ULL));
        /* execute.simd:3092 [D] s_b_77_6 = (u8)s_b_77_5 */
        auto s_b_77_6 = emitter.reinterpret(s_b_77_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_77_7 = s_b_77_2<<s_b_77_6 */
        auto s_b_77_7 = emitter.shl(s_b_77_2, s_b_77_6);
        /* execute.simd:3092 [D] s_b_77_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_77_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_77_9 = constant s32 d (const) */
        /* execute.simd:3092 [D] s_b_77_10 = s_b_77_8[s_b_77_9] <= s_b_77_7 */
        auto s_b_77_10 = emitter.vector_insert(s_b_77_8, emitter.const_s32((int32_t)13ULL), s_b_77_7);
        /* execute.simd:3092 [D] s_b_77_11: sym_42419_0_rd = s_b_77_10, dominates: s_b_78_9 s_b_80_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_77_10);
        /* execute.simd:3092 [F] s_b_77_12: Jump b_76 (const) */
        {
          auto block = block_b_76;
          dynamic_block_queue.push(block_b_76);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_78) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_78);
        /* execute.simd:3090 [D] s_b_78_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_78_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_78_1 = constant u8 e (const) */
        /* execute.simd:3090 [D] s_b_78_0[s_b_78_1] */
        auto s_b_78_2 = emitter.vector_extract(s_b_78_0, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3090 [D] s_b_78_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_78_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_78_4 = constant u8 e (const) */
        /* execute.simd:3090 [D] s_b_78_3[s_b_78_4] */
        auto s_b_78_5 = emitter.vector_extract(s_b_78_3, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3090 [D] s_b_78_6 = -s_b_78_5 */
        auto s_b_78_6 = emitter.neg(s_b_78_5);
        /* execute.simd:3090 [D] s_b_78_7 = (u8)s_b_78_6 */
        auto s_b_78_7 = emitter.reinterpret(s_b_78_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_78_8 = s_b_78_2>>s_b_78_7 */
        auto s_b_78_8 = emitter.shr(s_b_78_2, s_b_78_7);
        /* execute.simd:3090 [D] s_b_78_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_78_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_78_10 = constant s32 e (const) */
        /* execute.simd:3090 [D] s_b_78_11 = s_b_78_9[s_b_78_10] <= s_b_78_8 */
        auto s_b_78_11 = emitter.vector_insert(s_b_78_9, emitter.const_s32((int32_t)14ULL), s_b_78_8);
        /* execute.simd:3090 [D] s_b_78_12: sym_42419_0_rd = s_b_78_11, dominates: s_b_81_9 s_b_83_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_78_11);
        /* execute.simd:3090 [F] s_b_78_13: Jump b_79 (const) */
        {
          auto block = block_b_79;
          dynamic_block_queue.push(block_b_79);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_79) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_79);
        /* execute.simd:3089 [D] s_b_79_0 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_79_0 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_79_1 = constant u8 f (const) */
        /* execute.simd:3089 [D] s_b_79_0[s_b_79_1] */
        auto s_b_79_2 = emitter.vector_extract(s_b_79_0, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3089 [F] s_b_79_3 = constant s32 0 (const) */
        /* execute.simd:3089 [D] s_b_79_4 = (s32)s_b_79_2 */
        auto s_b_79_4 = emitter.sx(s_b_79_2, emitter.context().types().s32());
        /* execute.simd:3089 [D] s_b_79_5 = s_b_79_4<s_b_79_3 */
        auto s_b_79_5 = emitter.cmp_lt(s_b_79_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3089 [D] s_b_79_6: If s_b_79_5: Jump b_81 else b_83 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_81;
            dynamic_block_queue.push(block_b_81);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_83;
            dynamic_block_queue.push(block_b_83);
            false_target = block;
          }
          emitter.branch(s_b_79_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_80) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_80);
        /* execute.simd:3092 [D] s_b_80_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_80_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_80_1 = constant u8 e (const) */
        /* execute.simd:3092 [D] s_b_80_0[s_b_80_1] */
        auto s_b_80_2 = emitter.vector_extract(s_b_80_0, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3092 [D] s_b_80_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_80_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_80_4 = constant u8 e (const) */
        /* execute.simd:3092 [D] s_b_80_3[s_b_80_4] */
        auto s_b_80_5 = emitter.vector_extract(s_b_80_3, emitter.const_u8((uint8_t)14ULL));
        /* execute.simd:3092 [D] s_b_80_6 = (u8)s_b_80_5 */
        auto s_b_80_6 = emitter.reinterpret(s_b_80_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_80_7 = s_b_80_2<<s_b_80_6 */
        auto s_b_80_7 = emitter.shl(s_b_80_2, s_b_80_6);
        /* execute.simd:3092 [D] s_b_80_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_80_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_80_9 = constant s32 e (const) */
        /* execute.simd:3092 [D] s_b_80_10 = s_b_80_8[s_b_80_9] <= s_b_80_7 */
        auto s_b_80_10 = emitter.vector_insert(s_b_80_8, emitter.const_s32((int32_t)14ULL), s_b_80_7);
        /* execute.simd:3092 [D] s_b_80_11: sym_42419_0_rd = s_b_80_10, dominates: s_b_81_9 s_b_83_8  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_80_10);
        /* execute.simd:3092 [F] s_b_80_12: Jump b_79 (const) */
        {
          auto block = block_b_79;
          dynamic_block_queue.push(block_b_79);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_81) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_81);
        /* execute.simd:3090 [D] s_b_81_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_81_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_81_1 = constant u8 f (const) */
        /* execute.simd:3090 [D] s_b_81_0[s_b_81_1] */
        auto s_b_81_2 = emitter.vector_extract(s_b_81_0, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3090 [D] s_b_81_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_81_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_81_4 = constant u8 f (const) */
        /* execute.simd:3090 [D] s_b_81_3[s_b_81_4] */
        auto s_b_81_5 = emitter.vector_extract(s_b_81_3, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3090 [D] s_b_81_6 = -s_b_81_5 */
        auto s_b_81_6 = emitter.neg(s_b_81_5);
        /* execute.simd:3090 [D] s_b_81_7 = (u8)s_b_81_6 */
        auto s_b_81_7 = emitter.reinterpret(s_b_81_6, emitter.context().types().u8());
        /* execute.simd:3090 [D] s_b_81_8 = s_b_81_2>>s_b_81_7 */
        auto s_b_81_8 = emitter.shr(s_b_81_2, s_b_81_7);
        /* execute.simd:3090 [D] s_b_81_9 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_81_9 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3090 [F] s_b_81_10 = constant s32 f (const) */
        /* execute.simd:3090 [D] s_b_81_11 = s_b_81_9[s_b_81_10] <= s_b_81_8 */
        auto s_b_81_11 = emitter.vector_insert(s_b_81_9, emitter.const_s32((int32_t)15ULL), s_b_81_8);
        /* execute.simd:3090 [D] s_b_81_12: sym_42419_0_rd = s_b_81_11, dominates: s_b_82_1  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_81_11);
        /* execute.simd:3090 [F] s_b_81_13: Jump b_82 (const) */
        {
          auto block = block_b_82;
          dynamic_block_queue.push(block_b_82);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_82) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_82);
        /* execute.simd:3096 [F] s_b_82_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3096 [D] s_b_82_1 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_82_1 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3096 [D] s_b_82_2: WriteRegBank 16:s_b_82_0 = s_b_82_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_82_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_82_1);
        /* execute.simd:0 [F] s_b_82_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_83) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_83);
        /* execute.simd:3092 [D] s_b_83_0 = sym_42410_0_rn wutils::Vector<uint8_t, 16> */
        auto s_b_83_0 = emitter.load_local(DV_sym_42410_0_rn, emitter.context().types().v16u8());
        /* ???:4294967295 [F] s_b_83_1 = constant u8 f (const) */
        /* execute.simd:3092 [D] s_b_83_0[s_b_83_1] */
        auto s_b_83_2 = emitter.vector_extract(s_b_83_0, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3092 [D] s_b_83_3 = sym_42414_0_rm wutils::Vector<int8_t, 16> */
        auto s_b_83_3 = emitter.load_local(DV_sym_42414_0_rm, emitter.context().types().v16s8());
        /* ???:4294967295 [F] s_b_83_4 = constant u8 f (const) */
        /* execute.simd:3092 [D] s_b_83_3[s_b_83_4] */
        auto s_b_83_5 = emitter.vector_extract(s_b_83_3, emitter.const_u8((uint8_t)15ULL));
        /* execute.simd:3092 [D] s_b_83_6 = (u8)s_b_83_5 */
        auto s_b_83_6 = emitter.reinterpret(s_b_83_5, emitter.context().types().u8());
        /* execute.simd:3092 [D] s_b_83_7 = s_b_83_2<<s_b_83_6 */
        auto s_b_83_7 = emitter.shl(s_b_83_2, s_b_83_6);
        /* execute.simd:3092 [D] s_b_83_8 = sym_42419_0_rd wutils::Vector<uint8_t, 16> */
        auto s_b_83_8 = emitter.load_local(DV_sym_42419_0_rd, emitter.context().types().v16u8());
        /* execute.simd:3092 [F] s_b_83_9 = constant s32 f (const) */
        /* execute.simd:3092 [D] s_b_83_10 = s_b_83_8[s_b_83_9] <= s_b_83_7 */
        auto s_b_83_10 = emitter.vector_insert(s_b_83_8, emitter.const_s32((int32_t)15ULL), s_b_83_7);
        /* execute.simd:3092 [D] s_b_83_11: sym_42419_0_rd = s_b_83_10, dominates: s_b_82_1  */
        emitter.store_local(DV_sym_42419_0_rd, s_b_83_10);
        /* execute.simd:3092 [F] s_b_83_12: Jump b_82 (const) */
        {
          auto block = block_b_82;
          dynamic_block_queue.push(block_b_82);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_85) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_85);
        /* execute.simd:3106 [D] s_b_85_0 = sym_43200_0_rn wutils::Vector<uint16_t, 4> */
        auto s_b_85_0 = emitter.load_local(DV_sym_43200_0_rn, emitter.context().types().v4u16());
        /* ???:4294967295 [F] s_b_85_1 = constant u8 0 (const) */
        /* execute.simd:3106 [D] s_b_85_0[s_b_85_1] */
        auto s_b_85_2 = emitter.vector_extract(s_b_85_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3106 [D] s_b_85_3 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_85_3 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_85_4 = constant u8 0 (const) */
        /* execute.simd:3106 [D] s_b_85_3[s_b_85_4] */
        auto s_b_85_5 = emitter.vector_extract(s_b_85_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3106 [D] s_b_85_6 = -s_b_85_5 */
        auto s_b_85_6 = emitter.neg(s_b_85_5);
        /* execute.simd:3106 [D] s_b_85_7 = (u16)s_b_85_6 */
        auto s_b_85_7 = emitter.reinterpret(s_b_85_6, emitter.context().types().u16());
        /* execute.simd:3106 [D] s_b_85_8 = s_b_85_2>>s_b_85_7 */
        auto s_b_85_8 = emitter.shr(s_b_85_2, s_b_85_7);
        /* execute.simd:3106 [F] s_b_85_9 = sym_43209_0_rd (const) wutils::Vector<uint16_t, 8> */
        wutils::Vector<uint16_t, 8> s_b_85_9 = CV_sym_43209_0_rd;
        /* execute.simd:3106 [F] s_b_85_10 = constant s32 0 (const) */
        /* execute.simd:3106 [D] s_b_85_11 = s_b_85_9[s_b_85_10] <= s_b_85_8 */
        auto s_b_85_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_85_9[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_85_8);
        /* execute.simd:3106 [D] s_b_85_12: sym_43209_0_rd = s_b_85_11, dominates: s_b_88_9 s_b_90_8  */
        emitter.store_local(DV_sym_43209_0_rd, s_b_85_11);
        /* execute.simd:3106 [F] s_b_85_13: Jump b_86 (const) */
        {
          auto block = block_b_86;
          dynamic_block_queue.push(block_b_86);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_86) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_86);
        /* execute.simd:3105 [D] s_b_86_0 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_86_0 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_86_1 = constant u8 1 (const) */
        /* execute.simd:3105 [D] s_b_86_0[s_b_86_1] */
        auto s_b_86_2 = emitter.vector_extract(s_b_86_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3105 [F] s_b_86_3 = constant s32 0 (const) */
        /* execute.simd:3105 [D] s_b_86_4 = (s32)s_b_86_2 */
        auto s_b_86_4 = emitter.sx(s_b_86_2, emitter.context().types().s32());
        /* execute.simd:3105 [D] s_b_86_5 = s_b_86_4<s_b_86_3 */
        auto s_b_86_5 = emitter.cmp_lt(s_b_86_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3105 [D] s_b_86_6: If s_b_86_5: Jump b_88 else b_90 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_88;
            dynamic_block_queue.push(block_b_88);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_90;
            dynamic_block_queue.push(block_b_90);
            false_target = block;
          }
          emitter.branch(s_b_86_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_87) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_87);
        /* execute.simd:3108 [D] s_b_87_0 = sym_43200_0_rn wutils::Vector<uint16_t, 4> */
        auto s_b_87_0 = emitter.load_local(DV_sym_43200_0_rn, emitter.context().types().v4u16());
        /* ???:4294967295 [F] s_b_87_1 = constant u8 0 (const) */
        /* execute.simd:3108 [D] s_b_87_0[s_b_87_1] */
        auto s_b_87_2 = emitter.vector_extract(s_b_87_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3108 [D] s_b_87_3 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_87_3 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_87_4 = constant u8 0 (const) */
        /* execute.simd:3108 [D] s_b_87_3[s_b_87_4] */
        auto s_b_87_5 = emitter.vector_extract(s_b_87_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3108 [D] s_b_87_6 = (u16)s_b_87_5 */
        auto s_b_87_6 = emitter.reinterpret(s_b_87_5, emitter.context().types().u16());
        /* execute.simd:3108 [D] s_b_87_7 = s_b_87_2<<s_b_87_6 */
        auto s_b_87_7 = emitter.shl(s_b_87_2, s_b_87_6);
        /* execute.simd:3108 [F] s_b_87_8 = sym_43209_0_rd (const) wutils::Vector<uint16_t, 8> */
        wutils::Vector<uint16_t, 8> s_b_87_8 = CV_sym_43209_0_rd;
        /* execute.simd:3108 [F] s_b_87_9 = constant s32 0 (const) */
        /* execute.simd:3108 [D] s_b_87_10 = s_b_87_8[s_b_87_9] <= s_b_87_7 */
        auto s_b_87_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_87_8[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_87_7);
        /* execute.simd:3108 [D] s_b_87_11: sym_43209_0_rd = s_b_87_10, dominates: s_b_88_9 s_b_90_8  */
        emitter.store_local(DV_sym_43209_0_rd, s_b_87_10);
        /* execute.simd:3108 [F] s_b_87_12: Jump b_86 (const) */
        {
          auto block = block_b_86;
          dynamic_block_queue.push(block_b_86);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_88) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_88);
        /* execute.simd:3106 [D] s_b_88_0 = sym_43200_0_rn wutils::Vector<uint16_t, 4> */
        auto s_b_88_0 = emitter.load_local(DV_sym_43200_0_rn, emitter.context().types().v4u16());
        /* ???:4294967295 [F] s_b_88_1 = constant u8 1 (const) */
        /* execute.simd:3106 [D] s_b_88_0[s_b_88_1] */
        auto s_b_88_2 = emitter.vector_extract(s_b_88_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3106 [D] s_b_88_3 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_88_3 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_88_4 = constant u8 1 (const) */
        /* execute.simd:3106 [D] s_b_88_3[s_b_88_4] */
        auto s_b_88_5 = emitter.vector_extract(s_b_88_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3106 [D] s_b_88_6 = -s_b_88_5 */
        auto s_b_88_6 = emitter.neg(s_b_88_5);
        /* execute.simd:3106 [D] s_b_88_7 = (u16)s_b_88_6 */
        auto s_b_88_7 = emitter.reinterpret(s_b_88_6, emitter.context().types().u16());
        /* execute.simd:3106 [D] s_b_88_8 = s_b_88_2>>s_b_88_7 */
        auto s_b_88_8 = emitter.shr(s_b_88_2, s_b_88_7);
        /* execute.simd:3106 [D] s_b_88_9 = sym_43209_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_88_9 = emitter.load_local(DV_sym_43209_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3106 [F] s_b_88_10 = constant s32 1 (const) */
        /* execute.simd:3106 [D] s_b_88_11 = s_b_88_9[s_b_88_10] <= s_b_88_8 */
        auto s_b_88_11 = emitter.vector_insert(s_b_88_9, emitter.const_s32((int32_t)1ULL), s_b_88_8);
        /* execute.simd:3106 [D] s_b_88_12: sym_43209_0_rd = s_b_88_11, dominates: s_b_91_9 s_b_93_8  */
        emitter.store_local(DV_sym_43209_0_rd, s_b_88_11);
        /* execute.simd:3106 [F] s_b_88_13: Jump b_89 (const) */
        {
          auto block = block_b_89;
          dynamic_block_queue.push(block_b_89);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_89) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_89);
        /* execute.simd:3105 [D] s_b_89_0 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_89_0 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_89_1 = constant u8 2 (const) */
        /* execute.simd:3105 [D] s_b_89_0[s_b_89_1] */
        auto s_b_89_2 = emitter.vector_extract(s_b_89_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3105 [F] s_b_89_3 = constant s32 0 (const) */
        /* execute.simd:3105 [D] s_b_89_4 = (s32)s_b_89_2 */
        auto s_b_89_4 = emitter.sx(s_b_89_2, emitter.context().types().s32());
        /* execute.simd:3105 [D] s_b_89_5 = s_b_89_4<s_b_89_3 */
        auto s_b_89_5 = emitter.cmp_lt(s_b_89_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3105 [D] s_b_89_6: If s_b_89_5: Jump b_91 else b_93 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_91;
            dynamic_block_queue.push(block_b_91);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_93;
            dynamic_block_queue.push(block_b_93);
            false_target = block;
          }
          emitter.branch(s_b_89_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_90) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_90);
        /* execute.simd:3108 [D] s_b_90_0 = sym_43200_0_rn wutils::Vector<uint16_t, 4> */
        auto s_b_90_0 = emitter.load_local(DV_sym_43200_0_rn, emitter.context().types().v4u16());
        /* ???:4294967295 [F] s_b_90_1 = constant u8 1 (const) */
        /* execute.simd:3108 [D] s_b_90_0[s_b_90_1] */
        auto s_b_90_2 = emitter.vector_extract(s_b_90_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3108 [D] s_b_90_3 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_90_3 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_90_4 = constant u8 1 (const) */
        /* execute.simd:3108 [D] s_b_90_3[s_b_90_4] */
        auto s_b_90_5 = emitter.vector_extract(s_b_90_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3108 [D] s_b_90_6 = (u16)s_b_90_5 */
        auto s_b_90_6 = emitter.reinterpret(s_b_90_5, emitter.context().types().u16());
        /* execute.simd:3108 [D] s_b_90_7 = s_b_90_2<<s_b_90_6 */
        auto s_b_90_7 = emitter.shl(s_b_90_2, s_b_90_6);
        /* execute.simd:3108 [D] s_b_90_8 = sym_43209_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_90_8 = emitter.load_local(DV_sym_43209_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3108 [F] s_b_90_9 = constant s32 1 (const) */
        /* execute.simd:3108 [D] s_b_90_10 = s_b_90_8[s_b_90_9] <= s_b_90_7 */
        auto s_b_90_10 = emitter.vector_insert(s_b_90_8, emitter.const_s32((int32_t)1ULL), s_b_90_7);
        /* execute.simd:3108 [D] s_b_90_11: sym_43209_0_rd = s_b_90_10, dominates: s_b_91_9 s_b_93_8  */
        emitter.store_local(DV_sym_43209_0_rd, s_b_90_10);
        /* execute.simd:3108 [F] s_b_90_12: Jump b_89 (const) */
        {
          auto block = block_b_89;
          dynamic_block_queue.push(block_b_89);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_91) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_91);
        /* execute.simd:3106 [D] s_b_91_0 = sym_43200_0_rn wutils::Vector<uint16_t, 4> */
        auto s_b_91_0 = emitter.load_local(DV_sym_43200_0_rn, emitter.context().types().v4u16());
        /* ???:4294967295 [F] s_b_91_1 = constant u8 2 (const) */
        /* execute.simd:3106 [D] s_b_91_0[s_b_91_1] */
        auto s_b_91_2 = emitter.vector_extract(s_b_91_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3106 [D] s_b_91_3 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_91_3 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_91_4 = constant u8 2 (const) */
        /* execute.simd:3106 [D] s_b_91_3[s_b_91_4] */
        auto s_b_91_5 = emitter.vector_extract(s_b_91_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3106 [D] s_b_91_6 = -s_b_91_5 */
        auto s_b_91_6 = emitter.neg(s_b_91_5);
        /* execute.simd:3106 [D] s_b_91_7 = (u16)s_b_91_6 */
        auto s_b_91_7 = emitter.reinterpret(s_b_91_6, emitter.context().types().u16());
        /* execute.simd:3106 [D] s_b_91_8 = s_b_91_2>>s_b_91_7 */
        auto s_b_91_8 = emitter.shr(s_b_91_2, s_b_91_7);
        /* execute.simd:3106 [D] s_b_91_9 = sym_43209_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_91_9 = emitter.load_local(DV_sym_43209_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3106 [F] s_b_91_10 = constant s32 2 (const) */
        /* execute.simd:3106 [D] s_b_91_11 = s_b_91_9[s_b_91_10] <= s_b_91_8 */
        auto s_b_91_11 = emitter.vector_insert(s_b_91_9, emitter.const_s32((int32_t)2ULL), s_b_91_8);
        /* execute.simd:3106 [D] s_b_91_12: sym_43209_0_rd = s_b_91_11, dominates: s_b_94_9 s_b_96_8  */
        emitter.store_local(DV_sym_43209_0_rd, s_b_91_11);
        /* execute.simd:3106 [F] s_b_91_13: Jump b_92 (const) */
        {
          auto block = block_b_92;
          dynamic_block_queue.push(block_b_92);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_92) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_92);
        /* execute.simd:3105 [D] s_b_92_0 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_92_0 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_92_1 = constant u8 3 (const) */
        /* execute.simd:3105 [D] s_b_92_0[s_b_92_1] */
        auto s_b_92_2 = emitter.vector_extract(s_b_92_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3105 [F] s_b_92_3 = constant s32 0 (const) */
        /* execute.simd:3105 [D] s_b_92_4 = (s32)s_b_92_2 */
        auto s_b_92_4 = emitter.sx(s_b_92_2, emitter.context().types().s32());
        /* execute.simd:3105 [D] s_b_92_5 = s_b_92_4<s_b_92_3 */
        auto s_b_92_5 = emitter.cmp_lt(s_b_92_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3105 [D] s_b_92_6: If s_b_92_5: Jump b_94 else b_96 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_94;
            dynamic_block_queue.push(block_b_94);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_96;
            dynamic_block_queue.push(block_b_96);
            false_target = block;
          }
          emitter.branch(s_b_92_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_93) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_93);
        /* execute.simd:3108 [D] s_b_93_0 = sym_43200_0_rn wutils::Vector<uint16_t, 4> */
        auto s_b_93_0 = emitter.load_local(DV_sym_43200_0_rn, emitter.context().types().v4u16());
        /* ???:4294967295 [F] s_b_93_1 = constant u8 2 (const) */
        /* execute.simd:3108 [D] s_b_93_0[s_b_93_1] */
        auto s_b_93_2 = emitter.vector_extract(s_b_93_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3108 [D] s_b_93_3 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_93_3 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_93_4 = constant u8 2 (const) */
        /* execute.simd:3108 [D] s_b_93_3[s_b_93_4] */
        auto s_b_93_5 = emitter.vector_extract(s_b_93_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3108 [D] s_b_93_6 = (u16)s_b_93_5 */
        auto s_b_93_6 = emitter.reinterpret(s_b_93_5, emitter.context().types().u16());
        /* execute.simd:3108 [D] s_b_93_7 = s_b_93_2<<s_b_93_6 */
        auto s_b_93_7 = emitter.shl(s_b_93_2, s_b_93_6);
        /* execute.simd:3108 [D] s_b_93_8 = sym_43209_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_93_8 = emitter.load_local(DV_sym_43209_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3108 [F] s_b_93_9 = constant s32 2 (const) */
        /* execute.simd:3108 [D] s_b_93_10 = s_b_93_8[s_b_93_9] <= s_b_93_7 */
        auto s_b_93_10 = emitter.vector_insert(s_b_93_8, emitter.const_s32((int32_t)2ULL), s_b_93_7);
        /* execute.simd:3108 [D] s_b_93_11: sym_43209_0_rd = s_b_93_10, dominates: s_b_94_9 s_b_96_8  */
        emitter.store_local(DV_sym_43209_0_rd, s_b_93_10);
        /* execute.simd:3108 [F] s_b_93_12: Jump b_92 (const) */
        {
          auto block = block_b_92;
          dynamic_block_queue.push(block_b_92);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_94) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_94);
        /* execute.simd:3106 [D] s_b_94_0 = sym_43200_0_rn wutils::Vector<uint16_t, 4> */
        auto s_b_94_0 = emitter.load_local(DV_sym_43200_0_rn, emitter.context().types().v4u16());
        /* ???:4294967295 [F] s_b_94_1 = constant u8 3 (const) */
        /* execute.simd:3106 [D] s_b_94_0[s_b_94_1] */
        auto s_b_94_2 = emitter.vector_extract(s_b_94_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3106 [D] s_b_94_3 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_94_3 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_94_4 = constant u8 3 (const) */
        /* execute.simd:3106 [D] s_b_94_3[s_b_94_4] */
        auto s_b_94_5 = emitter.vector_extract(s_b_94_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3106 [D] s_b_94_6 = -s_b_94_5 */
        auto s_b_94_6 = emitter.neg(s_b_94_5);
        /* execute.simd:3106 [D] s_b_94_7 = (u16)s_b_94_6 */
        auto s_b_94_7 = emitter.reinterpret(s_b_94_6, emitter.context().types().u16());
        /* execute.simd:3106 [D] s_b_94_8 = s_b_94_2>>s_b_94_7 */
        auto s_b_94_8 = emitter.shr(s_b_94_2, s_b_94_7);
        /* execute.simd:3106 [D] s_b_94_9 = sym_43209_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_94_9 = emitter.load_local(DV_sym_43209_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3106 [F] s_b_94_10 = constant s32 3 (const) */
        /* execute.simd:3106 [D] s_b_94_11 = s_b_94_9[s_b_94_10] <= s_b_94_8 */
        auto s_b_94_11 = emitter.vector_insert(s_b_94_9, emitter.const_s32((int32_t)3ULL), s_b_94_8);
        /* execute.simd:3106 [D] s_b_94_12: sym_43209_0_rd = s_b_94_11, dominates: s_b_95_1  */
        emitter.store_local(DV_sym_43209_0_rd, s_b_94_11);
        /* execute.simd:3106 [F] s_b_94_13: Jump b_95 (const) */
        {
          auto block = block_b_95;
          dynamic_block_queue.push(block_b_95);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_95) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_95);
        /* execute.simd:3112 [F] s_b_95_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3112 [D] s_b_95_1 = sym_43209_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_95_1 = emitter.load_local(DV_sym_43209_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3112 [D] s_b_95_2: WriteRegBank 18:s_b_95_0 = s_b_95_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_95_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_95_1);
        /* execute.simd:0 [F] s_b_95_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_96) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_96);
        /* execute.simd:3108 [D] s_b_96_0 = sym_43200_0_rn wutils::Vector<uint16_t, 4> */
        auto s_b_96_0 = emitter.load_local(DV_sym_43200_0_rn, emitter.context().types().v4u16());
        /* ???:4294967295 [F] s_b_96_1 = constant u8 3 (const) */
        /* execute.simd:3108 [D] s_b_96_0[s_b_96_1] */
        auto s_b_96_2 = emitter.vector_extract(s_b_96_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3108 [D] s_b_96_3 = sym_43204_0_rm wutils::Vector<int16_t, 4> */
        auto s_b_96_3 = emitter.load_local(DV_sym_43204_0_rm, emitter.context().types().v4s16());
        /* ???:4294967295 [F] s_b_96_4 = constant u8 3 (const) */
        /* execute.simd:3108 [D] s_b_96_3[s_b_96_4] */
        auto s_b_96_5 = emitter.vector_extract(s_b_96_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3108 [D] s_b_96_6 = (u16)s_b_96_5 */
        auto s_b_96_6 = emitter.reinterpret(s_b_96_5, emitter.context().types().u16());
        /* execute.simd:3108 [D] s_b_96_7 = s_b_96_2<<s_b_96_6 */
        auto s_b_96_7 = emitter.shl(s_b_96_2, s_b_96_6);
        /* execute.simd:3108 [D] s_b_96_8 = sym_43209_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_96_8 = emitter.load_local(DV_sym_43209_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3108 [F] s_b_96_9 = constant s32 3 (const) */
        /* execute.simd:3108 [D] s_b_96_10 = s_b_96_8[s_b_96_9] <= s_b_96_7 */
        auto s_b_96_10 = emitter.vector_insert(s_b_96_8, emitter.const_s32((int32_t)3ULL), s_b_96_7);
        /* execute.simd:3108 [D] s_b_96_11: sym_43209_0_rd = s_b_96_10, dominates: s_b_95_1  */
        emitter.store_local(DV_sym_43209_0_rd, s_b_96_10);
        /* execute.simd:3108 [F] s_b_96_12: Jump b_95 (const) */
        {
          auto block = block_b_95;
          dynamic_block_queue.push(block_b_95);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_98) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_98);
        /* execute.simd:3122 [D] s_b_98_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_98_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_98_1 = constant u8 0 (const) */
        /* execute.simd:3122 [D] s_b_98_0[s_b_98_1] */
        auto s_b_98_2 = emitter.vector_extract(s_b_98_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3122 [D] s_b_98_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_98_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_98_4 = constant u8 0 (const) */
        /* execute.simd:3122 [D] s_b_98_3[s_b_98_4] */
        auto s_b_98_5 = emitter.vector_extract(s_b_98_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3122 [D] s_b_98_6 = -s_b_98_5 */
        auto s_b_98_6 = emitter.neg(s_b_98_5);
        /* execute.simd:3122 [D] s_b_98_7 = (u16)s_b_98_6 */
        auto s_b_98_7 = emitter.reinterpret(s_b_98_6, emitter.context().types().u16());
        /* execute.simd:3122 [D] s_b_98_8 = s_b_98_2>>s_b_98_7 */
        auto s_b_98_8 = emitter.shr(s_b_98_2, s_b_98_7);
        /* execute.simd:3122 [F] s_b_98_9 = sym_43423_0_rd (const) wutils::Vector<uint16_t, 8> */
        wutils::Vector<uint16_t, 8> s_b_98_9 = CV_sym_43423_0_rd;
        /* execute.simd:3122 [F] s_b_98_10 = constant s32 0 (const) */
        /* execute.simd:3122 [D] s_b_98_11 = s_b_98_9[s_b_98_10] <= s_b_98_8 */
        auto s_b_98_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_98_9[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_98_8);
        /* execute.simd:3122 [D] s_b_98_12: sym_43423_0_rd = s_b_98_11, dominates: s_b_101_9 s_b_103_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_98_11);
        /* execute.simd:3122 [F] s_b_98_13: Jump b_99 (const) */
        {
          auto block = block_b_99;
          dynamic_block_queue.push(block_b_99);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_99) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_99);
        /* execute.simd:3121 [D] s_b_99_0 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_99_0 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_99_1 = constant u8 1 (const) */
        /* execute.simd:3121 [D] s_b_99_0[s_b_99_1] */
        auto s_b_99_2 = emitter.vector_extract(s_b_99_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3121 [F] s_b_99_3 = constant s32 0 (const) */
        /* execute.simd:3121 [D] s_b_99_4 = (s32)s_b_99_2 */
        auto s_b_99_4 = emitter.sx(s_b_99_2, emitter.context().types().s32());
        /* execute.simd:3121 [D] s_b_99_5 = s_b_99_4<s_b_99_3 */
        auto s_b_99_5 = emitter.cmp_lt(s_b_99_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3121 [D] s_b_99_6: If s_b_99_5: Jump b_101 else b_103 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_101;
            dynamic_block_queue.push(block_b_101);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_103;
            dynamic_block_queue.push(block_b_103);
            false_target = block;
          }
          emitter.branch(s_b_99_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_100) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_100);
        /* execute.simd:3124 [D] s_b_100_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_100_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_100_1 = constant u8 0 (const) */
        /* execute.simd:3124 [D] s_b_100_0[s_b_100_1] */
        auto s_b_100_2 = emitter.vector_extract(s_b_100_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3124 [D] s_b_100_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_100_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_100_4 = constant u8 0 (const) */
        /* execute.simd:3124 [D] s_b_100_3[s_b_100_4] */
        auto s_b_100_5 = emitter.vector_extract(s_b_100_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3124 [D] s_b_100_6 = (u16)s_b_100_5 */
        auto s_b_100_6 = emitter.reinterpret(s_b_100_5, emitter.context().types().u16());
        /* execute.simd:3124 [D] s_b_100_7 = s_b_100_2<<s_b_100_6 */
        auto s_b_100_7 = emitter.shl(s_b_100_2, s_b_100_6);
        /* execute.simd:3124 [F] s_b_100_8 = sym_43423_0_rd (const) wutils::Vector<uint16_t, 8> */
        wutils::Vector<uint16_t, 8> s_b_100_8 = CV_sym_43423_0_rd;
        /* execute.simd:3124 [F] s_b_100_9 = constant s32 0 (const) */
        /* execute.simd:3124 [D] s_b_100_10 = s_b_100_8[s_b_100_9] <= s_b_100_7 */
        auto s_b_100_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_100_8[0], emitter.context().types().v8u16()), emitter.const_s32((int32_t)0ULL), s_b_100_7);
        /* execute.simd:3124 [D] s_b_100_11: sym_43423_0_rd = s_b_100_10, dominates: s_b_101_9 s_b_103_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_100_10);
        /* execute.simd:3124 [F] s_b_100_12: Jump b_99 (const) */
        {
          auto block = block_b_99;
          dynamic_block_queue.push(block_b_99);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_101) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_101);
        /* execute.simd:3122 [D] s_b_101_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_101_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_101_1 = constant u8 1 (const) */
        /* execute.simd:3122 [D] s_b_101_0[s_b_101_1] */
        auto s_b_101_2 = emitter.vector_extract(s_b_101_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3122 [D] s_b_101_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_101_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_101_4 = constant u8 1 (const) */
        /* execute.simd:3122 [D] s_b_101_3[s_b_101_4] */
        auto s_b_101_5 = emitter.vector_extract(s_b_101_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3122 [D] s_b_101_6 = -s_b_101_5 */
        auto s_b_101_6 = emitter.neg(s_b_101_5);
        /* execute.simd:3122 [D] s_b_101_7 = (u16)s_b_101_6 */
        auto s_b_101_7 = emitter.reinterpret(s_b_101_6, emitter.context().types().u16());
        /* execute.simd:3122 [D] s_b_101_8 = s_b_101_2>>s_b_101_7 */
        auto s_b_101_8 = emitter.shr(s_b_101_2, s_b_101_7);
        /* execute.simd:3122 [D] s_b_101_9 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_101_9 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3122 [F] s_b_101_10 = constant s32 1 (const) */
        /* execute.simd:3122 [D] s_b_101_11 = s_b_101_9[s_b_101_10] <= s_b_101_8 */
        auto s_b_101_11 = emitter.vector_insert(s_b_101_9, emitter.const_s32((int32_t)1ULL), s_b_101_8);
        /* execute.simd:3122 [D] s_b_101_12: sym_43423_0_rd = s_b_101_11, dominates: s_b_104_9 s_b_106_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_101_11);
        /* execute.simd:3122 [F] s_b_101_13: Jump b_102 (const) */
        {
          auto block = block_b_102;
          dynamic_block_queue.push(block_b_102);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_102) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_102);
        /* execute.simd:3121 [D] s_b_102_0 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_102_0 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_102_1 = constant u8 2 (const) */
        /* execute.simd:3121 [D] s_b_102_0[s_b_102_1] */
        auto s_b_102_2 = emitter.vector_extract(s_b_102_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3121 [F] s_b_102_3 = constant s32 0 (const) */
        /* execute.simd:3121 [D] s_b_102_4 = (s32)s_b_102_2 */
        auto s_b_102_4 = emitter.sx(s_b_102_2, emitter.context().types().s32());
        /* execute.simd:3121 [D] s_b_102_5 = s_b_102_4<s_b_102_3 */
        auto s_b_102_5 = emitter.cmp_lt(s_b_102_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3121 [D] s_b_102_6: If s_b_102_5: Jump b_104 else b_106 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_104;
            dynamic_block_queue.push(block_b_104);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_106;
            dynamic_block_queue.push(block_b_106);
            false_target = block;
          }
          emitter.branch(s_b_102_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_103) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_103);
        /* execute.simd:3124 [D] s_b_103_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_103_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_103_1 = constant u8 1 (const) */
        /* execute.simd:3124 [D] s_b_103_0[s_b_103_1] */
        auto s_b_103_2 = emitter.vector_extract(s_b_103_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3124 [D] s_b_103_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_103_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_103_4 = constant u8 1 (const) */
        /* execute.simd:3124 [D] s_b_103_3[s_b_103_4] */
        auto s_b_103_5 = emitter.vector_extract(s_b_103_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3124 [D] s_b_103_6 = (u16)s_b_103_5 */
        auto s_b_103_6 = emitter.reinterpret(s_b_103_5, emitter.context().types().u16());
        /* execute.simd:3124 [D] s_b_103_7 = s_b_103_2<<s_b_103_6 */
        auto s_b_103_7 = emitter.shl(s_b_103_2, s_b_103_6);
        /* execute.simd:3124 [D] s_b_103_8 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_103_8 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3124 [F] s_b_103_9 = constant s32 1 (const) */
        /* execute.simd:3124 [D] s_b_103_10 = s_b_103_8[s_b_103_9] <= s_b_103_7 */
        auto s_b_103_10 = emitter.vector_insert(s_b_103_8, emitter.const_s32((int32_t)1ULL), s_b_103_7);
        /* execute.simd:3124 [D] s_b_103_11: sym_43423_0_rd = s_b_103_10, dominates: s_b_104_9 s_b_106_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_103_10);
        /* execute.simd:3124 [F] s_b_103_12: Jump b_102 (const) */
        {
          auto block = block_b_102;
          dynamic_block_queue.push(block_b_102);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_104) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_104);
        /* execute.simd:3122 [D] s_b_104_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_104_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_104_1 = constant u8 2 (const) */
        /* execute.simd:3122 [D] s_b_104_0[s_b_104_1] */
        auto s_b_104_2 = emitter.vector_extract(s_b_104_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3122 [D] s_b_104_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_104_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_104_4 = constant u8 2 (const) */
        /* execute.simd:3122 [D] s_b_104_3[s_b_104_4] */
        auto s_b_104_5 = emitter.vector_extract(s_b_104_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3122 [D] s_b_104_6 = -s_b_104_5 */
        auto s_b_104_6 = emitter.neg(s_b_104_5);
        /* execute.simd:3122 [D] s_b_104_7 = (u16)s_b_104_6 */
        auto s_b_104_7 = emitter.reinterpret(s_b_104_6, emitter.context().types().u16());
        /* execute.simd:3122 [D] s_b_104_8 = s_b_104_2>>s_b_104_7 */
        auto s_b_104_8 = emitter.shr(s_b_104_2, s_b_104_7);
        /* execute.simd:3122 [D] s_b_104_9 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_104_9 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3122 [F] s_b_104_10 = constant s32 2 (const) */
        /* execute.simd:3122 [D] s_b_104_11 = s_b_104_9[s_b_104_10] <= s_b_104_8 */
        auto s_b_104_11 = emitter.vector_insert(s_b_104_9, emitter.const_s32((int32_t)2ULL), s_b_104_8);
        /* execute.simd:3122 [D] s_b_104_12: sym_43423_0_rd = s_b_104_11, dominates: s_b_107_9 s_b_109_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_104_11);
        /* execute.simd:3122 [F] s_b_104_13: Jump b_105 (const) */
        {
          auto block = block_b_105;
          dynamic_block_queue.push(block_b_105);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_105) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_105);
        /* execute.simd:3121 [D] s_b_105_0 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_105_0 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_105_1 = constant u8 3 (const) */
        /* execute.simd:3121 [D] s_b_105_0[s_b_105_1] */
        auto s_b_105_2 = emitter.vector_extract(s_b_105_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3121 [F] s_b_105_3 = constant s32 0 (const) */
        /* execute.simd:3121 [D] s_b_105_4 = (s32)s_b_105_2 */
        auto s_b_105_4 = emitter.sx(s_b_105_2, emitter.context().types().s32());
        /* execute.simd:3121 [D] s_b_105_5 = s_b_105_4<s_b_105_3 */
        auto s_b_105_5 = emitter.cmp_lt(s_b_105_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3121 [D] s_b_105_6: If s_b_105_5: Jump b_107 else b_109 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_107;
            dynamic_block_queue.push(block_b_107);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_109;
            dynamic_block_queue.push(block_b_109);
            false_target = block;
          }
          emitter.branch(s_b_105_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_106) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_106);
        /* execute.simd:3124 [D] s_b_106_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_106_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_106_1 = constant u8 2 (const) */
        /* execute.simd:3124 [D] s_b_106_0[s_b_106_1] */
        auto s_b_106_2 = emitter.vector_extract(s_b_106_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3124 [D] s_b_106_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_106_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_106_4 = constant u8 2 (const) */
        /* execute.simd:3124 [D] s_b_106_3[s_b_106_4] */
        auto s_b_106_5 = emitter.vector_extract(s_b_106_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3124 [D] s_b_106_6 = (u16)s_b_106_5 */
        auto s_b_106_6 = emitter.reinterpret(s_b_106_5, emitter.context().types().u16());
        /* execute.simd:3124 [D] s_b_106_7 = s_b_106_2<<s_b_106_6 */
        auto s_b_106_7 = emitter.shl(s_b_106_2, s_b_106_6);
        /* execute.simd:3124 [D] s_b_106_8 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_106_8 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3124 [F] s_b_106_9 = constant s32 2 (const) */
        /* execute.simd:3124 [D] s_b_106_10 = s_b_106_8[s_b_106_9] <= s_b_106_7 */
        auto s_b_106_10 = emitter.vector_insert(s_b_106_8, emitter.const_s32((int32_t)2ULL), s_b_106_7);
        /* execute.simd:3124 [D] s_b_106_11: sym_43423_0_rd = s_b_106_10, dominates: s_b_107_9 s_b_109_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_106_10);
        /* execute.simd:3124 [F] s_b_106_12: Jump b_105 (const) */
        {
          auto block = block_b_105;
          dynamic_block_queue.push(block_b_105);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_107) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_107);
        /* execute.simd:3122 [D] s_b_107_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_107_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_107_1 = constant u8 3 (const) */
        /* execute.simd:3122 [D] s_b_107_0[s_b_107_1] */
        auto s_b_107_2 = emitter.vector_extract(s_b_107_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3122 [D] s_b_107_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_107_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_107_4 = constant u8 3 (const) */
        /* execute.simd:3122 [D] s_b_107_3[s_b_107_4] */
        auto s_b_107_5 = emitter.vector_extract(s_b_107_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3122 [D] s_b_107_6 = -s_b_107_5 */
        auto s_b_107_6 = emitter.neg(s_b_107_5);
        /* execute.simd:3122 [D] s_b_107_7 = (u16)s_b_107_6 */
        auto s_b_107_7 = emitter.reinterpret(s_b_107_6, emitter.context().types().u16());
        /* execute.simd:3122 [D] s_b_107_8 = s_b_107_2>>s_b_107_7 */
        auto s_b_107_8 = emitter.shr(s_b_107_2, s_b_107_7);
        /* execute.simd:3122 [D] s_b_107_9 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_107_9 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3122 [F] s_b_107_10 = constant s32 3 (const) */
        /* execute.simd:3122 [D] s_b_107_11 = s_b_107_9[s_b_107_10] <= s_b_107_8 */
        auto s_b_107_11 = emitter.vector_insert(s_b_107_9, emitter.const_s32((int32_t)3ULL), s_b_107_8);
        /* execute.simd:3122 [D] s_b_107_12: sym_43423_0_rd = s_b_107_11, dominates: s_b_110_9 s_b_112_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_107_11);
        /* execute.simd:3122 [F] s_b_107_13: Jump b_108 (const) */
        {
          auto block = block_b_108;
          dynamic_block_queue.push(block_b_108);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_108) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_108);
        /* execute.simd:3121 [D] s_b_108_0 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_108_0 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_108_1 = constant u8 4 (const) */
        /* execute.simd:3121 [D] s_b_108_0[s_b_108_1] */
        auto s_b_108_2 = emitter.vector_extract(s_b_108_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3121 [F] s_b_108_3 = constant s32 0 (const) */
        /* execute.simd:3121 [D] s_b_108_4 = (s32)s_b_108_2 */
        auto s_b_108_4 = emitter.sx(s_b_108_2, emitter.context().types().s32());
        /* execute.simd:3121 [D] s_b_108_5 = s_b_108_4<s_b_108_3 */
        auto s_b_108_5 = emitter.cmp_lt(s_b_108_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3121 [D] s_b_108_6: If s_b_108_5: Jump b_110 else b_112 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_110;
            dynamic_block_queue.push(block_b_110);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_112;
            dynamic_block_queue.push(block_b_112);
            false_target = block;
          }
          emitter.branch(s_b_108_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_109) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_109);
        /* execute.simd:3124 [D] s_b_109_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_109_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_109_1 = constant u8 3 (const) */
        /* execute.simd:3124 [D] s_b_109_0[s_b_109_1] */
        auto s_b_109_2 = emitter.vector_extract(s_b_109_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3124 [D] s_b_109_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_109_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_109_4 = constant u8 3 (const) */
        /* execute.simd:3124 [D] s_b_109_3[s_b_109_4] */
        auto s_b_109_5 = emitter.vector_extract(s_b_109_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3124 [D] s_b_109_6 = (u16)s_b_109_5 */
        auto s_b_109_6 = emitter.reinterpret(s_b_109_5, emitter.context().types().u16());
        /* execute.simd:3124 [D] s_b_109_7 = s_b_109_2<<s_b_109_6 */
        auto s_b_109_7 = emitter.shl(s_b_109_2, s_b_109_6);
        /* execute.simd:3124 [D] s_b_109_8 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_109_8 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3124 [F] s_b_109_9 = constant s32 3 (const) */
        /* execute.simd:3124 [D] s_b_109_10 = s_b_109_8[s_b_109_9] <= s_b_109_7 */
        auto s_b_109_10 = emitter.vector_insert(s_b_109_8, emitter.const_s32((int32_t)3ULL), s_b_109_7);
        /* execute.simd:3124 [D] s_b_109_11: sym_43423_0_rd = s_b_109_10, dominates: s_b_110_9 s_b_112_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_109_10);
        /* execute.simd:3124 [F] s_b_109_12: Jump b_108 (const) */
        {
          auto block = block_b_108;
          dynamic_block_queue.push(block_b_108);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_110) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_110);
        /* execute.simd:3122 [D] s_b_110_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_110_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_110_1 = constant u8 4 (const) */
        /* execute.simd:3122 [D] s_b_110_0[s_b_110_1] */
        auto s_b_110_2 = emitter.vector_extract(s_b_110_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3122 [D] s_b_110_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_110_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_110_4 = constant u8 4 (const) */
        /* execute.simd:3122 [D] s_b_110_3[s_b_110_4] */
        auto s_b_110_5 = emitter.vector_extract(s_b_110_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3122 [D] s_b_110_6 = -s_b_110_5 */
        auto s_b_110_6 = emitter.neg(s_b_110_5);
        /* execute.simd:3122 [D] s_b_110_7 = (u16)s_b_110_6 */
        auto s_b_110_7 = emitter.reinterpret(s_b_110_6, emitter.context().types().u16());
        /* execute.simd:3122 [D] s_b_110_8 = s_b_110_2>>s_b_110_7 */
        auto s_b_110_8 = emitter.shr(s_b_110_2, s_b_110_7);
        /* execute.simd:3122 [D] s_b_110_9 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_110_9 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3122 [F] s_b_110_10 = constant s32 4 (const) */
        /* execute.simd:3122 [D] s_b_110_11 = s_b_110_9[s_b_110_10] <= s_b_110_8 */
        auto s_b_110_11 = emitter.vector_insert(s_b_110_9, emitter.const_s32((int32_t)4ULL), s_b_110_8);
        /* execute.simd:3122 [D] s_b_110_12: sym_43423_0_rd = s_b_110_11, dominates: s_b_113_9 s_b_115_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_110_11);
        /* execute.simd:3122 [F] s_b_110_13: Jump b_111 (const) */
        {
          auto block = block_b_111;
          dynamic_block_queue.push(block_b_111);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_111) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_111);
        /* execute.simd:3121 [D] s_b_111_0 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_111_0 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_111_1 = constant u8 5 (const) */
        /* execute.simd:3121 [D] s_b_111_0[s_b_111_1] */
        auto s_b_111_2 = emitter.vector_extract(s_b_111_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3121 [F] s_b_111_3 = constant s32 0 (const) */
        /* execute.simd:3121 [D] s_b_111_4 = (s32)s_b_111_2 */
        auto s_b_111_4 = emitter.sx(s_b_111_2, emitter.context().types().s32());
        /* execute.simd:3121 [D] s_b_111_5 = s_b_111_4<s_b_111_3 */
        auto s_b_111_5 = emitter.cmp_lt(s_b_111_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3121 [D] s_b_111_6: If s_b_111_5: Jump b_113 else b_115 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_113;
            dynamic_block_queue.push(block_b_113);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_115;
            dynamic_block_queue.push(block_b_115);
            false_target = block;
          }
          emitter.branch(s_b_111_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_112) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_112);
        /* execute.simd:3124 [D] s_b_112_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_112_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_112_1 = constant u8 4 (const) */
        /* execute.simd:3124 [D] s_b_112_0[s_b_112_1] */
        auto s_b_112_2 = emitter.vector_extract(s_b_112_0, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3124 [D] s_b_112_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_112_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_112_4 = constant u8 4 (const) */
        /* execute.simd:3124 [D] s_b_112_3[s_b_112_4] */
        auto s_b_112_5 = emitter.vector_extract(s_b_112_3, emitter.const_u8((uint8_t)4ULL));
        /* execute.simd:3124 [D] s_b_112_6 = (u16)s_b_112_5 */
        auto s_b_112_6 = emitter.reinterpret(s_b_112_5, emitter.context().types().u16());
        /* execute.simd:3124 [D] s_b_112_7 = s_b_112_2<<s_b_112_6 */
        auto s_b_112_7 = emitter.shl(s_b_112_2, s_b_112_6);
        /* execute.simd:3124 [D] s_b_112_8 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_112_8 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3124 [F] s_b_112_9 = constant s32 4 (const) */
        /* execute.simd:3124 [D] s_b_112_10 = s_b_112_8[s_b_112_9] <= s_b_112_7 */
        auto s_b_112_10 = emitter.vector_insert(s_b_112_8, emitter.const_s32((int32_t)4ULL), s_b_112_7);
        /* execute.simd:3124 [D] s_b_112_11: sym_43423_0_rd = s_b_112_10, dominates: s_b_113_9 s_b_115_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_112_10);
        /* execute.simd:3124 [F] s_b_112_12: Jump b_111 (const) */
        {
          auto block = block_b_111;
          dynamic_block_queue.push(block_b_111);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_113) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_113);
        /* execute.simd:3122 [D] s_b_113_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_113_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_113_1 = constant u8 5 (const) */
        /* execute.simd:3122 [D] s_b_113_0[s_b_113_1] */
        auto s_b_113_2 = emitter.vector_extract(s_b_113_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3122 [D] s_b_113_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_113_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_113_4 = constant u8 5 (const) */
        /* execute.simd:3122 [D] s_b_113_3[s_b_113_4] */
        auto s_b_113_5 = emitter.vector_extract(s_b_113_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3122 [D] s_b_113_6 = -s_b_113_5 */
        auto s_b_113_6 = emitter.neg(s_b_113_5);
        /* execute.simd:3122 [D] s_b_113_7 = (u16)s_b_113_6 */
        auto s_b_113_7 = emitter.reinterpret(s_b_113_6, emitter.context().types().u16());
        /* execute.simd:3122 [D] s_b_113_8 = s_b_113_2>>s_b_113_7 */
        auto s_b_113_8 = emitter.shr(s_b_113_2, s_b_113_7);
        /* execute.simd:3122 [D] s_b_113_9 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_113_9 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3122 [F] s_b_113_10 = constant s32 5 (const) */
        /* execute.simd:3122 [D] s_b_113_11 = s_b_113_9[s_b_113_10] <= s_b_113_8 */
        auto s_b_113_11 = emitter.vector_insert(s_b_113_9, emitter.const_s32((int32_t)5ULL), s_b_113_8);
        /* execute.simd:3122 [D] s_b_113_12: sym_43423_0_rd = s_b_113_11, dominates: s_b_116_9 s_b_118_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_113_11);
        /* execute.simd:3122 [F] s_b_113_13: Jump b_114 (const) */
        {
          auto block = block_b_114;
          dynamic_block_queue.push(block_b_114);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_114) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_114);
        /* execute.simd:3121 [D] s_b_114_0 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_114_0 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_114_1 = constant u8 6 (const) */
        /* execute.simd:3121 [D] s_b_114_0[s_b_114_1] */
        auto s_b_114_2 = emitter.vector_extract(s_b_114_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3121 [F] s_b_114_3 = constant s32 0 (const) */
        /* execute.simd:3121 [D] s_b_114_4 = (s32)s_b_114_2 */
        auto s_b_114_4 = emitter.sx(s_b_114_2, emitter.context().types().s32());
        /* execute.simd:3121 [D] s_b_114_5 = s_b_114_4<s_b_114_3 */
        auto s_b_114_5 = emitter.cmp_lt(s_b_114_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3121 [D] s_b_114_6: If s_b_114_5: Jump b_116 else b_118 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_116;
            dynamic_block_queue.push(block_b_116);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_118;
            dynamic_block_queue.push(block_b_118);
            false_target = block;
          }
          emitter.branch(s_b_114_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_115) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_115);
        /* execute.simd:3124 [D] s_b_115_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_115_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_115_1 = constant u8 5 (const) */
        /* execute.simd:3124 [D] s_b_115_0[s_b_115_1] */
        auto s_b_115_2 = emitter.vector_extract(s_b_115_0, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3124 [D] s_b_115_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_115_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_115_4 = constant u8 5 (const) */
        /* execute.simd:3124 [D] s_b_115_3[s_b_115_4] */
        auto s_b_115_5 = emitter.vector_extract(s_b_115_3, emitter.const_u8((uint8_t)5ULL));
        /* execute.simd:3124 [D] s_b_115_6 = (u16)s_b_115_5 */
        auto s_b_115_6 = emitter.reinterpret(s_b_115_5, emitter.context().types().u16());
        /* execute.simd:3124 [D] s_b_115_7 = s_b_115_2<<s_b_115_6 */
        auto s_b_115_7 = emitter.shl(s_b_115_2, s_b_115_6);
        /* execute.simd:3124 [D] s_b_115_8 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_115_8 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3124 [F] s_b_115_9 = constant s32 5 (const) */
        /* execute.simd:3124 [D] s_b_115_10 = s_b_115_8[s_b_115_9] <= s_b_115_7 */
        auto s_b_115_10 = emitter.vector_insert(s_b_115_8, emitter.const_s32((int32_t)5ULL), s_b_115_7);
        /* execute.simd:3124 [D] s_b_115_11: sym_43423_0_rd = s_b_115_10, dominates: s_b_116_9 s_b_118_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_115_10);
        /* execute.simd:3124 [F] s_b_115_12: Jump b_114 (const) */
        {
          auto block = block_b_114;
          dynamic_block_queue.push(block_b_114);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_116) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_116);
        /* execute.simd:3122 [D] s_b_116_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_116_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_116_1 = constant u8 6 (const) */
        /* execute.simd:3122 [D] s_b_116_0[s_b_116_1] */
        auto s_b_116_2 = emitter.vector_extract(s_b_116_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3122 [D] s_b_116_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_116_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_116_4 = constant u8 6 (const) */
        /* execute.simd:3122 [D] s_b_116_3[s_b_116_4] */
        auto s_b_116_5 = emitter.vector_extract(s_b_116_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3122 [D] s_b_116_6 = -s_b_116_5 */
        auto s_b_116_6 = emitter.neg(s_b_116_5);
        /* execute.simd:3122 [D] s_b_116_7 = (u16)s_b_116_6 */
        auto s_b_116_7 = emitter.reinterpret(s_b_116_6, emitter.context().types().u16());
        /* execute.simd:3122 [D] s_b_116_8 = s_b_116_2>>s_b_116_7 */
        auto s_b_116_8 = emitter.shr(s_b_116_2, s_b_116_7);
        /* execute.simd:3122 [D] s_b_116_9 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_116_9 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3122 [F] s_b_116_10 = constant s32 6 (const) */
        /* execute.simd:3122 [D] s_b_116_11 = s_b_116_9[s_b_116_10] <= s_b_116_8 */
        auto s_b_116_11 = emitter.vector_insert(s_b_116_9, emitter.const_s32((int32_t)6ULL), s_b_116_8);
        /* execute.simd:3122 [D] s_b_116_12: sym_43423_0_rd = s_b_116_11, dominates: s_b_119_9 s_b_121_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_116_11);
        /* execute.simd:3122 [F] s_b_116_13: Jump b_117 (const) */
        {
          auto block = block_b_117;
          dynamic_block_queue.push(block_b_117);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_117) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_117);
        /* execute.simd:3121 [D] s_b_117_0 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_117_0 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_117_1 = constant u8 7 (const) */
        /* execute.simd:3121 [D] s_b_117_0[s_b_117_1] */
        auto s_b_117_2 = emitter.vector_extract(s_b_117_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3121 [F] s_b_117_3 = constant s32 0 (const) */
        /* execute.simd:3121 [D] s_b_117_4 = (s32)s_b_117_2 */
        auto s_b_117_4 = emitter.sx(s_b_117_2, emitter.context().types().s32());
        /* execute.simd:3121 [D] s_b_117_5 = s_b_117_4<s_b_117_3 */
        auto s_b_117_5 = emitter.cmp_lt(s_b_117_4, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3121 [D] s_b_117_6: If s_b_117_5: Jump b_119 else b_121 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_119;
            dynamic_block_queue.push(block_b_119);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_121;
            dynamic_block_queue.push(block_b_121);
            false_target = block;
          }
          emitter.branch(s_b_117_5, true_target, false_target);
        }
      }
      else if (block_index == block_b_118) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_118);
        /* execute.simd:3124 [D] s_b_118_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_118_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_118_1 = constant u8 6 (const) */
        /* execute.simd:3124 [D] s_b_118_0[s_b_118_1] */
        auto s_b_118_2 = emitter.vector_extract(s_b_118_0, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3124 [D] s_b_118_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_118_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_118_4 = constant u8 6 (const) */
        /* execute.simd:3124 [D] s_b_118_3[s_b_118_4] */
        auto s_b_118_5 = emitter.vector_extract(s_b_118_3, emitter.const_u8((uint8_t)6ULL));
        /* execute.simd:3124 [D] s_b_118_6 = (u16)s_b_118_5 */
        auto s_b_118_6 = emitter.reinterpret(s_b_118_5, emitter.context().types().u16());
        /* execute.simd:3124 [D] s_b_118_7 = s_b_118_2<<s_b_118_6 */
        auto s_b_118_7 = emitter.shl(s_b_118_2, s_b_118_6);
        /* execute.simd:3124 [D] s_b_118_8 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_118_8 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3124 [F] s_b_118_9 = constant s32 6 (const) */
        /* execute.simd:3124 [D] s_b_118_10 = s_b_118_8[s_b_118_9] <= s_b_118_7 */
        auto s_b_118_10 = emitter.vector_insert(s_b_118_8, emitter.const_s32((int32_t)6ULL), s_b_118_7);
        /* execute.simd:3124 [D] s_b_118_11: sym_43423_0_rd = s_b_118_10, dominates: s_b_119_9 s_b_121_8  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_118_10);
        /* execute.simd:3124 [F] s_b_118_12: Jump b_117 (const) */
        {
          auto block = block_b_117;
          dynamic_block_queue.push(block_b_117);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_119) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_119);
        /* execute.simd:3122 [D] s_b_119_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_119_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_119_1 = constant u8 7 (const) */
        /* execute.simd:3122 [D] s_b_119_0[s_b_119_1] */
        auto s_b_119_2 = emitter.vector_extract(s_b_119_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3122 [D] s_b_119_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_119_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_119_4 = constant u8 7 (const) */
        /* execute.simd:3122 [D] s_b_119_3[s_b_119_4] */
        auto s_b_119_5 = emitter.vector_extract(s_b_119_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3122 [D] s_b_119_6 = -s_b_119_5 */
        auto s_b_119_6 = emitter.neg(s_b_119_5);
        /* execute.simd:3122 [D] s_b_119_7 = (u16)s_b_119_6 */
        auto s_b_119_7 = emitter.reinterpret(s_b_119_6, emitter.context().types().u16());
        /* execute.simd:3122 [D] s_b_119_8 = s_b_119_2>>s_b_119_7 */
        auto s_b_119_8 = emitter.shr(s_b_119_2, s_b_119_7);
        /* execute.simd:3122 [D] s_b_119_9 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_119_9 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3122 [F] s_b_119_10 = constant s32 7 (const) */
        /* execute.simd:3122 [D] s_b_119_11 = s_b_119_9[s_b_119_10] <= s_b_119_8 */
        auto s_b_119_11 = emitter.vector_insert(s_b_119_9, emitter.const_s32((int32_t)7ULL), s_b_119_8);
        /* execute.simd:3122 [D] s_b_119_12: sym_43423_0_rd = s_b_119_11, dominates: s_b_120_1  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_119_11);
        /* execute.simd:3122 [F] s_b_119_13: Jump b_120 (const) */
        {
          auto block = block_b_120;
          dynamic_block_queue.push(block_b_120);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_120) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_120);
        /* execute.simd:3128 [F] s_b_120_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3128 [D] s_b_120_1 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_120_1 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3128 [D] s_b_120_2: WriteRegBank 18:s_b_120_0 = s_b_120_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_120_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_120_1);
        /* execute.simd:0 [F] s_b_120_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_121) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_121);
        /* execute.simd:3124 [D] s_b_121_0 = sym_43414_0_rn wutils::Vector<uint16_t, 8> */
        auto s_b_121_0 = emitter.load_local(DV_sym_43414_0_rn, emitter.context().types().v8u16());
        /* ???:4294967295 [F] s_b_121_1 = constant u8 7 (const) */
        /* execute.simd:3124 [D] s_b_121_0[s_b_121_1] */
        auto s_b_121_2 = emitter.vector_extract(s_b_121_0, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3124 [D] s_b_121_3 = sym_43418_0_rm wutils::Vector<int16_t, 8> */
        auto s_b_121_3 = emitter.load_local(DV_sym_43418_0_rm, emitter.context().types().v8s16());
        /* ???:4294967295 [F] s_b_121_4 = constant u8 7 (const) */
        /* execute.simd:3124 [D] s_b_121_3[s_b_121_4] */
        auto s_b_121_5 = emitter.vector_extract(s_b_121_3, emitter.const_u8((uint8_t)7ULL));
        /* execute.simd:3124 [D] s_b_121_6 = (u16)s_b_121_5 */
        auto s_b_121_6 = emitter.reinterpret(s_b_121_5, emitter.context().types().u16());
        /* execute.simd:3124 [D] s_b_121_7 = s_b_121_2<<s_b_121_6 */
        auto s_b_121_7 = emitter.shl(s_b_121_2, s_b_121_6);
        /* execute.simd:3124 [D] s_b_121_8 = sym_43423_0_rd wutils::Vector<uint16_t, 8> */
        auto s_b_121_8 = emitter.load_local(DV_sym_43423_0_rd, emitter.context().types().v8u16());
        /* execute.simd:3124 [F] s_b_121_9 = constant s32 7 (const) */
        /* execute.simd:3124 [D] s_b_121_10 = s_b_121_8[s_b_121_9] <= s_b_121_7 */
        auto s_b_121_10 = emitter.vector_insert(s_b_121_8, emitter.const_s32((int32_t)7ULL), s_b_121_7);
        /* execute.simd:3124 [D] s_b_121_11: sym_43423_0_rd = s_b_121_10, dominates: s_b_120_1  */
        emitter.store_local(DV_sym_43423_0_rd, s_b_121_10);
        /* execute.simd:3124 [F] s_b_121_12: Jump b_120 (const) */
        {
          auto block = block_b_120;
          dynamic_block_queue.push(block_b_120);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_123) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_123);
        /* execute.simd:3138 [D] s_b_123_0 = sym_43820_0_rn wutils::Vector<uint32_t, 2> */
        auto s_b_123_0 = emitter.load_local(DV_sym_43820_0_rn, emitter.context().types().v2u32());
        /* ???:4294967295 [F] s_b_123_1 = constant u8 0 (const) */
        /* execute.simd:3138 [D] s_b_123_0[s_b_123_1] */
        auto s_b_123_2 = emitter.vector_extract(s_b_123_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3138 [D] s_b_123_3 = sym_43824_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_123_3 = emitter.load_local(DV_sym_43824_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_123_4 = constant u8 0 (const) */
        /* execute.simd:3138 [D] s_b_123_3[s_b_123_4] */
        auto s_b_123_5 = emitter.vector_extract(s_b_123_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3138 [D] s_b_123_6 = -s_b_123_5 */
        auto s_b_123_6 = emitter.neg(s_b_123_5);
        /* execute.simd:3138 [D] s_b_123_7 = (u32)s_b_123_6 */
        auto s_b_123_7 = emitter.reinterpret(s_b_123_6, emitter.context().types().u32());
        /* execute.simd:3138 [D] s_b_123_8 = s_b_123_2>>s_b_123_7 */
        auto s_b_123_8 = emitter.shr(s_b_123_2, s_b_123_7);
        /* execute.simd:3138 [F] s_b_123_9 = sym_43829_0_rd (const) wutils::Vector<uint32_t, 4> */
        wutils::Vector<uint32_t, 4> s_b_123_9 = CV_sym_43829_0_rd;
        /* execute.simd:3138 [F] s_b_123_10 = constant s32 0 (const) */
        /* execute.simd:3138 [D] s_b_123_11 = s_b_123_9[s_b_123_10] <= s_b_123_8 */
        auto s_b_123_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_123_9[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_123_8);
        /* execute.simd:3138 [D] s_b_123_12: sym_43829_0_rd = s_b_123_11, dominates: s_b_126_9 s_b_128_8  */
        emitter.store_local(DV_sym_43829_0_rd, s_b_123_11);
        /* execute.simd:3138 [F] s_b_123_13: Jump b_124 (const) */
        {
          auto block = block_b_124;
          dynamic_block_queue.push(block_b_124);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_124) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_124);
        /* execute.simd:3137 [D] s_b_124_0 = sym_43824_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_124_0 = emitter.load_local(DV_sym_43824_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_124_1 = constant u8 1 (const) */
        /* execute.simd:3137 [D] s_b_124_0[s_b_124_1] */
        auto s_b_124_2 = emitter.vector_extract(s_b_124_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3137 [F] s_b_124_3 = constant s32 0 (const) */
        /* execute.simd:3137 [D] s_b_124_4 = s_b_124_2<s_b_124_3 */
        auto s_b_124_4 = emitter.cmp_lt(s_b_124_2, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3137 [D] s_b_124_5: If s_b_124_4: Jump b_126 else b_128 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_126;
            dynamic_block_queue.push(block_b_126);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_128;
            dynamic_block_queue.push(block_b_128);
            false_target = block;
          }
          emitter.branch(s_b_124_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_125) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_125);
        /* execute.simd:3140 [D] s_b_125_0 = sym_43820_0_rn wutils::Vector<uint32_t, 2> */
        auto s_b_125_0 = emitter.load_local(DV_sym_43820_0_rn, emitter.context().types().v2u32());
        /* ???:4294967295 [F] s_b_125_1 = constant u8 0 (const) */
        /* execute.simd:3140 [D] s_b_125_0[s_b_125_1] */
        auto s_b_125_2 = emitter.vector_extract(s_b_125_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3140 [D] s_b_125_3 = sym_43824_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_125_3 = emitter.load_local(DV_sym_43824_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_125_4 = constant u8 0 (const) */
        /* execute.simd:3140 [D] s_b_125_3[s_b_125_4] */
        auto s_b_125_5 = emitter.vector_extract(s_b_125_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3140 [D] s_b_125_6 = (u32)s_b_125_5 */
        auto s_b_125_6 = emitter.reinterpret(s_b_125_5, emitter.context().types().u32());
        /* execute.simd:3140 [D] s_b_125_7 = s_b_125_2<<s_b_125_6 */
        auto s_b_125_7 = emitter.shl(s_b_125_2, s_b_125_6);
        /* execute.simd:3140 [F] s_b_125_8 = sym_43829_0_rd (const) wutils::Vector<uint32_t, 4> */
        wutils::Vector<uint32_t, 4> s_b_125_8 = CV_sym_43829_0_rd;
        /* execute.simd:3140 [F] s_b_125_9 = constant s32 0 (const) */
        /* execute.simd:3140 [D] s_b_125_10 = s_b_125_8[s_b_125_9] <= s_b_125_7 */
        auto s_b_125_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_125_8[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_125_7);
        /* execute.simd:3140 [D] s_b_125_11: sym_43829_0_rd = s_b_125_10, dominates: s_b_126_9 s_b_128_8  */
        emitter.store_local(DV_sym_43829_0_rd, s_b_125_10);
        /* execute.simd:3140 [F] s_b_125_12: Jump b_124 (const) */
        {
          auto block = block_b_124;
          dynamic_block_queue.push(block_b_124);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_126) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_126);
        /* execute.simd:3138 [D] s_b_126_0 = sym_43820_0_rn wutils::Vector<uint32_t, 2> */
        auto s_b_126_0 = emitter.load_local(DV_sym_43820_0_rn, emitter.context().types().v2u32());
        /* ???:4294967295 [F] s_b_126_1 = constant u8 1 (const) */
        /* execute.simd:3138 [D] s_b_126_0[s_b_126_1] */
        auto s_b_126_2 = emitter.vector_extract(s_b_126_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3138 [D] s_b_126_3 = sym_43824_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_126_3 = emitter.load_local(DV_sym_43824_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_126_4 = constant u8 1 (const) */
        /* execute.simd:3138 [D] s_b_126_3[s_b_126_4] */
        auto s_b_126_5 = emitter.vector_extract(s_b_126_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3138 [D] s_b_126_6 = -s_b_126_5 */
        auto s_b_126_6 = emitter.neg(s_b_126_5);
        /* execute.simd:3138 [D] s_b_126_7 = (u32)s_b_126_6 */
        auto s_b_126_7 = emitter.reinterpret(s_b_126_6, emitter.context().types().u32());
        /* execute.simd:3138 [D] s_b_126_8 = s_b_126_2>>s_b_126_7 */
        auto s_b_126_8 = emitter.shr(s_b_126_2, s_b_126_7);
        /* execute.simd:3138 [D] s_b_126_9 = sym_43829_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_126_9 = emitter.load_local(DV_sym_43829_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3138 [F] s_b_126_10 = constant s32 1 (const) */
        /* execute.simd:3138 [D] s_b_126_11 = s_b_126_9[s_b_126_10] <= s_b_126_8 */
        auto s_b_126_11 = emitter.vector_insert(s_b_126_9, emitter.const_s32((int32_t)1ULL), s_b_126_8);
        /* execute.simd:3138 [D] s_b_126_12: sym_43829_0_rd = s_b_126_11, dominates: s_b_127_1  */
        emitter.store_local(DV_sym_43829_0_rd, s_b_126_11);
        /* execute.simd:3138 [F] s_b_126_13: Jump b_127 (const) */
        {
          auto block = block_b_127;
          dynamic_block_queue.push(block_b_127);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_127) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_127);
        /* execute.simd:3144 [F] s_b_127_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3144 [D] s_b_127_1 = sym_43829_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_127_1 = emitter.load_local(DV_sym_43829_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3144 [D] s_b_127_2: WriteRegBank 20:s_b_127_0 = s_b_127_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_127_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_127_1);
        /* execute.simd:0 [F] s_b_127_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_128) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_128);
        /* execute.simd:3140 [D] s_b_128_0 = sym_43820_0_rn wutils::Vector<uint32_t, 2> */
        auto s_b_128_0 = emitter.load_local(DV_sym_43820_0_rn, emitter.context().types().v2u32());
        /* ???:4294967295 [F] s_b_128_1 = constant u8 1 (const) */
        /* execute.simd:3140 [D] s_b_128_0[s_b_128_1] */
        auto s_b_128_2 = emitter.vector_extract(s_b_128_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3140 [D] s_b_128_3 = sym_43824_0_rm wutils::Vector<int32_t, 2> */
        auto s_b_128_3 = emitter.load_local(DV_sym_43824_0_rm, emitter.context().types().v2s32());
        /* ???:4294967295 [F] s_b_128_4 = constant u8 1 (const) */
        /* execute.simd:3140 [D] s_b_128_3[s_b_128_4] */
        auto s_b_128_5 = emitter.vector_extract(s_b_128_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3140 [D] s_b_128_6 = (u32)s_b_128_5 */
        auto s_b_128_6 = emitter.reinterpret(s_b_128_5, emitter.context().types().u32());
        /* execute.simd:3140 [D] s_b_128_7 = s_b_128_2<<s_b_128_6 */
        auto s_b_128_7 = emitter.shl(s_b_128_2, s_b_128_6);
        /* execute.simd:3140 [D] s_b_128_8 = sym_43829_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_128_8 = emitter.load_local(DV_sym_43829_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3140 [F] s_b_128_9 = constant s32 1 (const) */
        /* execute.simd:3140 [D] s_b_128_10 = s_b_128_8[s_b_128_9] <= s_b_128_7 */
        auto s_b_128_10 = emitter.vector_insert(s_b_128_8, emitter.const_s32((int32_t)1ULL), s_b_128_7);
        /* execute.simd:3140 [D] s_b_128_11: sym_43829_0_rd = s_b_128_10, dominates: s_b_127_1  */
        emitter.store_local(DV_sym_43829_0_rd, s_b_128_10);
        /* execute.simd:3140 [F] s_b_128_12: Jump b_127 (const) */
        {
          auto block = block_b_127;
          dynamic_block_queue.push(block_b_127);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_130) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_130);
        /* execute.simd:3154 [D] s_b_130_0 = sym_43936_0_rn wutils::Vector<uint32_t, 4> */
        auto s_b_130_0 = emitter.load_local(DV_sym_43936_0_rn, emitter.context().types().v4u32());
        /* ???:4294967295 [F] s_b_130_1 = constant u8 0 (const) */
        /* execute.simd:3154 [D] s_b_130_0[s_b_130_1] */
        auto s_b_130_2 = emitter.vector_extract(s_b_130_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3154 [D] s_b_130_3 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_130_3 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_130_4 = constant u8 0 (const) */
        /* execute.simd:3154 [D] s_b_130_3[s_b_130_4] */
        auto s_b_130_5 = emitter.vector_extract(s_b_130_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3154 [D] s_b_130_6 = -s_b_130_5 */
        auto s_b_130_6 = emitter.neg(s_b_130_5);
        /* execute.simd:3154 [D] s_b_130_7 = (u32)s_b_130_6 */
        auto s_b_130_7 = emitter.reinterpret(s_b_130_6, emitter.context().types().u32());
        /* execute.simd:3154 [D] s_b_130_8 = s_b_130_2>>s_b_130_7 */
        auto s_b_130_8 = emitter.shr(s_b_130_2, s_b_130_7);
        /* execute.simd:3154 [F] s_b_130_9 = sym_43945_0_rd (const) wutils::Vector<uint32_t, 4> */
        wutils::Vector<uint32_t, 4> s_b_130_9 = CV_sym_43945_0_rd;
        /* execute.simd:3154 [F] s_b_130_10 = constant s32 0 (const) */
        /* execute.simd:3154 [D] s_b_130_11 = s_b_130_9[s_b_130_10] <= s_b_130_8 */
        auto s_b_130_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_130_9[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_130_8);
        /* execute.simd:3154 [D] s_b_130_12: sym_43945_0_rd = s_b_130_11, dominates: s_b_133_9 s_b_135_8  */
        emitter.store_local(DV_sym_43945_0_rd, s_b_130_11);
        /* execute.simd:3154 [F] s_b_130_13: Jump b_131 (const) */
        {
          auto block = block_b_131;
          dynamic_block_queue.push(block_b_131);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_131) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_131);
        /* execute.simd:3153 [D] s_b_131_0 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_131_0 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_131_1 = constant u8 1 (const) */
        /* execute.simd:3153 [D] s_b_131_0[s_b_131_1] */
        auto s_b_131_2 = emitter.vector_extract(s_b_131_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3153 [F] s_b_131_3 = constant s32 0 (const) */
        /* execute.simd:3153 [D] s_b_131_4 = s_b_131_2<s_b_131_3 */
        auto s_b_131_4 = emitter.cmp_lt(s_b_131_2, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3153 [D] s_b_131_5: If s_b_131_4: Jump b_133 else b_135 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_133;
            dynamic_block_queue.push(block_b_133);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_135;
            dynamic_block_queue.push(block_b_135);
            false_target = block;
          }
          emitter.branch(s_b_131_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_132) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_132);
        /* execute.simd:3156 [D] s_b_132_0 = sym_43936_0_rn wutils::Vector<uint32_t, 4> */
        auto s_b_132_0 = emitter.load_local(DV_sym_43936_0_rn, emitter.context().types().v4u32());
        /* ???:4294967295 [F] s_b_132_1 = constant u8 0 (const) */
        /* execute.simd:3156 [D] s_b_132_0[s_b_132_1] */
        auto s_b_132_2 = emitter.vector_extract(s_b_132_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3156 [D] s_b_132_3 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_132_3 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_132_4 = constant u8 0 (const) */
        /* execute.simd:3156 [D] s_b_132_3[s_b_132_4] */
        auto s_b_132_5 = emitter.vector_extract(s_b_132_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3156 [D] s_b_132_6 = (u32)s_b_132_5 */
        auto s_b_132_6 = emitter.reinterpret(s_b_132_5, emitter.context().types().u32());
        /* execute.simd:3156 [D] s_b_132_7 = s_b_132_2<<s_b_132_6 */
        auto s_b_132_7 = emitter.shl(s_b_132_2, s_b_132_6);
        /* execute.simd:3156 [F] s_b_132_8 = sym_43945_0_rd (const) wutils::Vector<uint32_t, 4> */
        wutils::Vector<uint32_t, 4> s_b_132_8 = CV_sym_43945_0_rd;
        /* execute.simd:3156 [F] s_b_132_9 = constant s32 0 (const) */
        /* execute.simd:3156 [D] s_b_132_10 = s_b_132_8[s_b_132_9] <= s_b_132_7 */
        auto s_b_132_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_132_8[0], emitter.context().types().v4u32()), emitter.const_s32((int32_t)0ULL), s_b_132_7);
        /* execute.simd:3156 [D] s_b_132_11: sym_43945_0_rd = s_b_132_10, dominates: s_b_133_9 s_b_135_8  */
        emitter.store_local(DV_sym_43945_0_rd, s_b_132_10);
        /* execute.simd:3156 [F] s_b_132_12: Jump b_131 (const) */
        {
          auto block = block_b_131;
          dynamic_block_queue.push(block_b_131);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_133) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_133);
        /* execute.simd:3154 [D] s_b_133_0 = sym_43936_0_rn wutils::Vector<uint32_t, 4> */
        auto s_b_133_0 = emitter.load_local(DV_sym_43936_0_rn, emitter.context().types().v4u32());
        /* ???:4294967295 [F] s_b_133_1 = constant u8 1 (const) */
        /* execute.simd:3154 [D] s_b_133_0[s_b_133_1] */
        auto s_b_133_2 = emitter.vector_extract(s_b_133_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3154 [D] s_b_133_3 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_133_3 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_133_4 = constant u8 1 (const) */
        /* execute.simd:3154 [D] s_b_133_3[s_b_133_4] */
        auto s_b_133_5 = emitter.vector_extract(s_b_133_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3154 [D] s_b_133_6 = -s_b_133_5 */
        auto s_b_133_6 = emitter.neg(s_b_133_5);
        /* execute.simd:3154 [D] s_b_133_7 = (u32)s_b_133_6 */
        auto s_b_133_7 = emitter.reinterpret(s_b_133_6, emitter.context().types().u32());
        /* execute.simd:3154 [D] s_b_133_8 = s_b_133_2>>s_b_133_7 */
        auto s_b_133_8 = emitter.shr(s_b_133_2, s_b_133_7);
        /* execute.simd:3154 [D] s_b_133_9 = sym_43945_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_133_9 = emitter.load_local(DV_sym_43945_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3154 [F] s_b_133_10 = constant s32 1 (const) */
        /* execute.simd:3154 [D] s_b_133_11 = s_b_133_9[s_b_133_10] <= s_b_133_8 */
        auto s_b_133_11 = emitter.vector_insert(s_b_133_9, emitter.const_s32((int32_t)1ULL), s_b_133_8);
        /* execute.simd:3154 [D] s_b_133_12: sym_43945_0_rd = s_b_133_11, dominates: s_b_136_9 s_b_138_8  */
        emitter.store_local(DV_sym_43945_0_rd, s_b_133_11);
        /* execute.simd:3154 [F] s_b_133_13: Jump b_134 (const) */
        {
          auto block = block_b_134;
          dynamic_block_queue.push(block_b_134);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_134) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_134);
        /* execute.simd:3153 [D] s_b_134_0 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_134_0 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_134_1 = constant u8 2 (const) */
        /* execute.simd:3153 [D] s_b_134_0[s_b_134_1] */
        auto s_b_134_2 = emitter.vector_extract(s_b_134_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3153 [F] s_b_134_3 = constant s32 0 (const) */
        /* execute.simd:3153 [D] s_b_134_4 = s_b_134_2<s_b_134_3 */
        auto s_b_134_4 = emitter.cmp_lt(s_b_134_2, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3153 [D] s_b_134_5: If s_b_134_4: Jump b_136 else b_138 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_136;
            dynamic_block_queue.push(block_b_136);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_138;
            dynamic_block_queue.push(block_b_138);
            false_target = block;
          }
          emitter.branch(s_b_134_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_135) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_135);
        /* execute.simd:3156 [D] s_b_135_0 = sym_43936_0_rn wutils::Vector<uint32_t, 4> */
        auto s_b_135_0 = emitter.load_local(DV_sym_43936_0_rn, emitter.context().types().v4u32());
        /* ???:4294967295 [F] s_b_135_1 = constant u8 1 (const) */
        /* execute.simd:3156 [D] s_b_135_0[s_b_135_1] */
        auto s_b_135_2 = emitter.vector_extract(s_b_135_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3156 [D] s_b_135_3 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_135_3 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_135_4 = constant u8 1 (const) */
        /* execute.simd:3156 [D] s_b_135_3[s_b_135_4] */
        auto s_b_135_5 = emitter.vector_extract(s_b_135_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3156 [D] s_b_135_6 = (u32)s_b_135_5 */
        auto s_b_135_6 = emitter.reinterpret(s_b_135_5, emitter.context().types().u32());
        /* execute.simd:3156 [D] s_b_135_7 = s_b_135_2<<s_b_135_6 */
        auto s_b_135_7 = emitter.shl(s_b_135_2, s_b_135_6);
        /* execute.simd:3156 [D] s_b_135_8 = sym_43945_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_135_8 = emitter.load_local(DV_sym_43945_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3156 [F] s_b_135_9 = constant s32 1 (const) */
        /* execute.simd:3156 [D] s_b_135_10 = s_b_135_8[s_b_135_9] <= s_b_135_7 */
        auto s_b_135_10 = emitter.vector_insert(s_b_135_8, emitter.const_s32((int32_t)1ULL), s_b_135_7);
        /* execute.simd:3156 [D] s_b_135_11: sym_43945_0_rd = s_b_135_10, dominates: s_b_136_9 s_b_138_8  */
        emitter.store_local(DV_sym_43945_0_rd, s_b_135_10);
        /* execute.simd:3156 [F] s_b_135_12: Jump b_134 (const) */
        {
          auto block = block_b_134;
          dynamic_block_queue.push(block_b_134);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_136) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_136);
        /* execute.simd:3154 [D] s_b_136_0 = sym_43936_0_rn wutils::Vector<uint32_t, 4> */
        auto s_b_136_0 = emitter.load_local(DV_sym_43936_0_rn, emitter.context().types().v4u32());
        /* ???:4294967295 [F] s_b_136_1 = constant u8 2 (const) */
        /* execute.simd:3154 [D] s_b_136_0[s_b_136_1] */
        auto s_b_136_2 = emitter.vector_extract(s_b_136_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3154 [D] s_b_136_3 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_136_3 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_136_4 = constant u8 2 (const) */
        /* execute.simd:3154 [D] s_b_136_3[s_b_136_4] */
        auto s_b_136_5 = emitter.vector_extract(s_b_136_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3154 [D] s_b_136_6 = -s_b_136_5 */
        auto s_b_136_6 = emitter.neg(s_b_136_5);
        /* execute.simd:3154 [D] s_b_136_7 = (u32)s_b_136_6 */
        auto s_b_136_7 = emitter.reinterpret(s_b_136_6, emitter.context().types().u32());
        /* execute.simd:3154 [D] s_b_136_8 = s_b_136_2>>s_b_136_7 */
        auto s_b_136_8 = emitter.shr(s_b_136_2, s_b_136_7);
        /* execute.simd:3154 [D] s_b_136_9 = sym_43945_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_136_9 = emitter.load_local(DV_sym_43945_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3154 [F] s_b_136_10 = constant s32 2 (const) */
        /* execute.simd:3154 [D] s_b_136_11 = s_b_136_9[s_b_136_10] <= s_b_136_8 */
        auto s_b_136_11 = emitter.vector_insert(s_b_136_9, emitter.const_s32((int32_t)2ULL), s_b_136_8);
        /* execute.simd:3154 [D] s_b_136_12: sym_43945_0_rd = s_b_136_11, dominates: s_b_139_9 s_b_141_8  */
        emitter.store_local(DV_sym_43945_0_rd, s_b_136_11);
        /* execute.simd:3154 [F] s_b_136_13: Jump b_137 (const) */
        {
          auto block = block_b_137;
          dynamic_block_queue.push(block_b_137);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_137) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_137);
        /* execute.simd:3153 [D] s_b_137_0 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_137_0 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_137_1 = constant u8 3 (const) */
        /* execute.simd:3153 [D] s_b_137_0[s_b_137_1] */
        auto s_b_137_2 = emitter.vector_extract(s_b_137_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3153 [F] s_b_137_3 = constant s32 0 (const) */
        /* execute.simd:3153 [D] s_b_137_4 = s_b_137_2<s_b_137_3 */
        auto s_b_137_4 = emitter.cmp_lt(s_b_137_2, emitter.const_s32((int32_t)0ULL));
        /* execute.simd:3153 [D] s_b_137_5: If s_b_137_4: Jump b_139 else b_141 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_139;
            dynamic_block_queue.push(block_b_139);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_141;
            dynamic_block_queue.push(block_b_141);
            false_target = block;
          }
          emitter.branch(s_b_137_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_138) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_138);
        /* execute.simd:3156 [D] s_b_138_0 = sym_43936_0_rn wutils::Vector<uint32_t, 4> */
        auto s_b_138_0 = emitter.load_local(DV_sym_43936_0_rn, emitter.context().types().v4u32());
        /* ???:4294967295 [F] s_b_138_1 = constant u8 2 (const) */
        /* execute.simd:3156 [D] s_b_138_0[s_b_138_1] */
        auto s_b_138_2 = emitter.vector_extract(s_b_138_0, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3156 [D] s_b_138_3 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_138_3 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_138_4 = constant u8 2 (const) */
        /* execute.simd:3156 [D] s_b_138_3[s_b_138_4] */
        auto s_b_138_5 = emitter.vector_extract(s_b_138_3, emitter.const_u8((uint8_t)2ULL));
        /* execute.simd:3156 [D] s_b_138_6 = (u32)s_b_138_5 */
        auto s_b_138_6 = emitter.reinterpret(s_b_138_5, emitter.context().types().u32());
        /* execute.simd:3156 [D] s_b_138_7 = s_b_138_2<<s_b_138_6 */
        auto s_b_138_7 = emitter.shl(s_b_138_2, s_b_138_6);
        /* execute.simd:3156 [D] s_b_138_8 = sym_43945_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_138_8 = emitter.load_local(DV_sym_43945_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3156 [F] s_b_138_9 = constant s32 2 (const) */
        /* execute.simd:3156 [D] s_b_138_10 = s_b_138_8[s_b_138_9] <= s_b_138_7 */
        auto s_b_138_10 = emitter.vector_insert(s_b_138_8, emitter.const_s32((int32_t)2ULL), s_b_138_7);
        /* execute.simd:3156 [D] s_b_138_11: sym_43945_0_rd = s_b_138_10, dominates: s_b_139_9 s_b_141_8  */
        emitter.store_local(DV_sym_43945_0_rd, s_b_138_10);
        /* execute.simd:3156 [F] s_b_138_12: Jump b_137 (const) */
        {
          auto block = block_b_137;
          dynamic_block_queue.push(block_b_137);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_139) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_139);
        /* execute.simd:3154 [D] s_b_139_0 = sym_43936_0_rn wutils::Vector<uint32_t, 4> */
        auto s_b_139_0 = emitter.load_local(DV_sym_43936_0_rn, emitter.context().types().v4u32());
        /* ???:4294967295 [F] s_b_139_1 = constant u8 3 (const) */
        /* execute.simd:3154 [D] s_b_139_0[s_b_139_1] */
        auto s_b_139_2 = emitter.vector_extract(s_b_139_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3154 [D] s_b_139_3 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_139_3 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_139_4 = constant u8 3 (const) */
        /* execute.simd:3154 [D] s_b_139_3[s_b_139_4] */
        auto s_b_139_5 = emitter.vector_extract(s_b_139_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3154 [D] s_b_139_6 = -s_b_139_5 */
        auto s_b_139_6 = emitter.neg(s_b_139_5);
        /* execute.simd:3154 [D] s_b_139_7 = (u32)s_b_139_6 */
        auto s_b_139_7 = emitter.reinterpret(s_b_139_6, emitter.context().types().u32());
        /* execute.simd:3154 [D] s_b_139_8 = s_b_139_2>>s_b_139_7 */
        auto s_b_139_8 = emitter.shr(s_b_139_2, s_b_139_7);
        /* execute.simd:3154 [D] s_b_139_9 = sym_43945_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_139_9 = emitter.load_local(DV_sym_43945_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3154 [F] s_b_139_10 = constant s32 3 (const) */
        /* execute.simd:3154 [D] s_b_139_11 = s_b_139_9[s_b_139_10] <= s_b_139_8 */
        auto s_b_139_11 = emitter.vector_insert(s_b_139_9, emitter.const_s32((int32_t)3ULL), s_b_139_8);
        /* execute.simd:3154 [D] s_b_139_12: sym_43945_0_rd = s_b_139_11, dominates: s_b_140_1  */
        emitter.store_local(DV_sym_43945_0_rd, s_b_139_11);
        /* execute.simd:3154 [F] s_b_139_13: Jump b_140 (const) */
        {
          auto block = block_b_140;
          dynamic_block_queue.push(block_b_140);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_140) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_140);
        /* execute.simd:3160 [F] s_b_140_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3160 [D] s_b_140_1 = sym_43945_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_140_1 = emitter.load_local(DV_sym_43945_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3160 [D] s_b_140_2: WriteRegBank 20:s_b_140_0 = s_b_140_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_140_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_140_1);
        /* execute.simd:0 [F] s_b_140_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_141) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_141);
        /* execute.simd:3156 [D] s_b_141_0 = sym_43936_0_rn wutils::Vector<uint32_t, 4> */
        auto s_b_141_0 = emitter.load_local(DV_sym_43936_0_rn, emitter.context().types().v4u32());
        /* ???:4294967295 [F] s_b_141_1 = constant u8 3 (const) */
        /* execute.simd:3156 [D] s_b_141_0[s_b_141_1] */
        auto s_b_141_2 = emitter.vector_extract(s_b_141_0, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3156 [D] s_b_141_3 = sym_43940_0_rm wutils::Vector<int32_t, 4> */
        auto s_b_141_3 = emitter.load_local(DV_sym_43940_0_rm, emitter.context().types().v4s32());
        /* ???:4294967295 [F] s_b_141_4 = constant u8 3 (const) */
        /* execute.simd:3156 [D] s_b_141_3[s_b_141_4] */
        auto s_b_141_5 = emitter.vector_extract(s_b_141_3, emitter.const_u8((uint8_t)3ULL));
        /* execute.simd:3156 [D] s_b_141_6 = (u32)s_b_141_5 */
        auto s_b_141_6 = emitter.reinterpret(s_b_141_5, emitter.context().types().u32());
        /* execute.simd:3156 [D] s_b_141_7 = s_b_141_2<<s_b_141_6 */
        auto s_b_141_7 = emitter.shl(s_b_141_2, s_b_141_6);
        /* execute.simd:3156 [D] s_b_141_8 = sym_43945_0_rd wutils::Vector<uint32_t, 4> */
        auto s_b_141_8 = emitter.load_local(DV_sym_43945_0_rd, emitter.context().types().v4u32());
        /* execute.simd:3156 [F] s_b_141_9 = constant s32 3 (const) */
        /* execute.simd:3156 [D] s_b_141_10 = s_b_141_8[s_b_141_9] <= s_b_141_7 */
        auto s_b_141_10 = emitter.vector_insert(s_b_141_8, emitter.const_s32((int32_t)3ULL), s_b_141_7);
        /* execute.simd:3156 [D] s_b_141_11: sym_43945_0_rd = s_b_141_10, dominates: s_b_140_1  */
        emitter.store_local(DV_sym_43945_0_rd, s_b_141_10);
        /* execute.simd:3156 [F] s_b_141_12: Jump b_140 (const) */
        {
          auto block = block_b_140;
          dynamic_block_queue.push(block_b_140);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_143) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_143);
        /* execute.simd:3170 [D] s_b_143_0 = sym_44146_0_rn wutils::Vector<uint64_t, 2> */
        auto s_b_143_0 = emitter.load_local(DV_sym_44146_0_rn, emitter.context().types().v2u64());
        /* ???:4294967295 [F] s_b_143_1 = constant u8 0 (const) */
        /* execute.simd:3170 [D] s_b_143_0[s_b_143_1] */
        auto s_b_143_2 = emitter.vector_extract(s_b_143_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3170 [D] s_b_143_3 = sym_44150_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_143_3 = emitter.load_local(DV_sym_44150_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_143_4 = constant u8 0 (const) */
        /* execute.simd:3170 [D] s_b_143_3[s_b_143_4] */
        auto s_b_143_5 = emitter.vector_extract(s_b_143_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3170 [D] s_b_143_6 = -s_b_143_5 */
        auto s_b_143_6 = emitter.neg(s_b_143_5);
        /* execute.simd:3170 [D] s_b_143_7 = (u64)s_b_143_6 */
        auto s_b_143_7 = emitter.reinterpret(s_b_143_6, emitter.context().types().u64());
        /* execute.simd:3170 [D] s_b_143_8 = s_b_143_2>>s_b_143_7 */
        auto s_b_143_8 = emitter.shr(s_b_143_2, s_b_143_7);
        /* execute.simd:3170 [F] s_b_143_9 = sym_44155_0_rd (const) wutils::Vector<uint64_t, 2> */
        wutils::Vector<uint64_t, 2> s_b_143_9 = CV_sym_44155_0_rd;
        /* execute.simd:3170 [F] s_b_143_10 = constant s32 0 (const) */
        /* execute.simd:3170 [D] s_b_143_11 = s_b_143_9[s_b_143_10] <= s_b_143_8 */
        auto s_b_143_11 = emitter.vector_insert(emitter.constant_vector_splat(s_b_143_9[0], emitter.context().types().v2u64()), emitter.const_s32((int32_t)0ULL), s_b_143_8);
        /* execute.simd:3170 [D] s_b_143_12: sym_44155_0_rd = s_b_143_11, dominates: s_b_146_9 s_b_148_8  */
        emitter.store_local(DV_sym_44155_0_rd, s_b_143_11);
        /* execute.simd:3170 [F] s_b_143_13: Jump b_144 (const) */
        {
          auto block = block_b_144;
          dynamic_block_queue.push(block_b_144);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_144) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_144);
        /* execute.simd:3169 [D] s_b_144_0 = sym_44150_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_144_0 = emitter.load_local(DV_sym_44150_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_144_1 = constant u8 1 (const) */
        /* execute.simd:3169 [D] s_b_144_0[s_b_144_1] */
        auto s_b_144_2 = emitter.vector_extract(s_b_144_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3169 [F] s_b_144_3 = constant s64 0 (const) */
        /* execute.simd:3169 [D] s_b_144_4 = s_b_144_2<s_b_144_3 */
        auto s_b_144_4 = emitter.cmp_lt(s_b_144_2, emitter.const_s64((int64_t)0ULL));
        /* execute.simd:3169 [D] s_b_144_5: If s_b_144_4: Jump b_146 else b_148 */
        {
          captive::arch::dbt::el::Block *true_target;
          {
            auto block = block_b_146;
            dynamic_block_queue.push(block_b_146);
            true_target = block;
          }
          captive::arch::dbt::el::Block *false_target;
          {
            auto block = block_b_148;
            dynamic_block_queue.push(block_b_148);
            false_target = block;
          }
          emitter.branch(s_b_144_4, true_target, false_target);
        }
      }
      else if (block_index == block_b_145) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_145);
        /* execute.simd:3172 [D] s_b_145_0 = sym_44146_0_rn wutils::Vector<uint64_t, 2> */
        auto s_b_145_0 = emitter.load_local(DV_sym_44146_0_rn, emitter.context().types().v2u64());
        /* ???:4294967295 [F] s_b_145_1 = constant u8 0 (const) */
        /* execute.simd:3172 [D] s_b_145_0[s_b_145_1] */
        auto s_b_145_2 = emitter.vector_extract(s_b_145_0, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3172 [D] s_b_145_3 = sym_44150_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_145_3 = emitter.load_local(DV_sym_44150_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_145_4 = constant u8 0 (const) */
        /* execute.simd:3172 [D] s_b_145_3[s_b_145_4] */
        auto s_b_145_5 = emitter.vector_extract(s_b_145_3, emitter.const_u8((uint8_t)0ULL));
        /* execute.simd:3172 [D] s_b_145_6 = (u64)s_b_145_5 */
        auto s_b_145_6 = emitter.reinterpret(s_b_145_5, emitter.context().types().u64());
        /* execute.simd:3172 [D] s_b_145_7 = s_b_145_2<<s_b_145_6 */
        auto s_b_145_7 = emitter.shl(s_b_145_2, s_b_145_6);
        /* execute.simd:3172 [F] s_b_145_8 = sym_44155_0_rd (const) wutils::Vector<uint64_t, 2> */
        wutils::Vector<uint64_t, 2> s_b_145_8 = CV_sym_44155_0_rd;
        /* execute.simd:3172 [F] s_b_145_9 = constant s32 0 (const) */
        /* execute.simd:3172 [D] s_b_145_10 = s_b_145_8[s_b_145_9] <= s_b_145_7 */
        auto s_b_145_10 = emitter.vector_insert(emitter.constant_vector_splat(s_b_145_8[0], emitter.context().types().v2u64()), emitter.const_s32((int32_t)0ULL), s_b_145_7);
        /* execute.simd:3172 [D] s_b_145_11: sym_44155_0_rd = s_b_145_10, dominates: s_b_146_9 s_b_148_8  */
        emitter.store_local(DV_sym_44155_0_rd, s_b_145_10);
        /* execute.simd:3172 [F] s_b_145_12: Jump b_144 (const) */
        {
          auto block = block_b_144;
          dynamic_block_queue.push(block_b_144);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_146) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_146);
        /* execute.simd:3170 [D] s_b_146_0 = sym_44146_0_rn wutils::Vector<uint64_t, 2> */
        auto s_b_146_0 = emitter.load_local(DV_sym_44146_0_rn, emitter.context().types().v2u64());
        /* ???:4294967295 [F] s_b_146_1 = constant u8 1 (const) */
        /* execute.simd:3170 [D] s_b_146_0[s_b_146_1] */
        auto s_b_146_2 = emitter.vector_extract(s_b_146_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3170 [D] s_b_146_3 = sym_44150_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_146_3 = emitter.load_local(DV_sym_44150_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_146_4 = constant u8 1 (const) */
        /* execute.simd:3170 [D] s_b_146_3[s_b_146_4] */
        auto s_b_146_5 = emitter.vector_extract(s_b_146_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3170 [D] s_b_146_6 = -s_b_146_5 */
        auto s_b_146_6 = emitter.neg(s_b_146_5);
        /* execute.simd:3170 [D] s_b_146_7 = (u64)s_b_146_6 */
        auto s_b_146_7 = emitter.reinterpret(s_b_146_6, emitter.context().types().u64());
        /* execute.simd:3170 [D] s_b_146_8 = s_b_146_2>>s_b_146_7 */
        auto s_b_146_8 = emitter.shr(s_b_146_2, s_b_146_7);
        /* execute.simd:3170 [D] s_b_146_9 = sym_44155_0_rd wutils::Vector<uint64_t, 2> */
        auto s_b_146_9 = emitter.load_local(DV_sym_44155_0_rd, emitter.context().types().v2u64());
        /* execute.simd:3170 [F] s_b_146_10 = constant s32 1 (const) */
        /* execute.simd:3170 [D] s_b_146_11 = s_b_146_9[s_b_146_10] <= s_b_146_8 */
        auto s_b_146_11 = emitter.vector_insert(s_b_146_9, emitter.const_s32((int32_t)1ULL), s_b_146_8);
        /* execute.simd:3170 [D] s_b_146_12: sym_44155_0_rd = s_b_146_11, dominates: s_b_147_1  */
        emitter.store_local(DV_sym_44155_0_rd, s_b_146_11);
        /* execute.simd:3170 [F] s_b_146_13: Jump b_147 (const) */
        {
          auto block = block_b_147;
          dynamic_block_queue.push(block_b_147);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_147) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_147);
        /* execute.simd:3176 [F] s_b_147_0=sym_41930_3_parameter_inst.rd (const) */
        /* execute.simd:3176 [D] s_b_147_1 = sym_44155_0_rd wutils::Vector<uint64_t, 2> */
        auto s_b_147_1 = emitter.load_local(DV_sym_44155_0_rd, emitter.context().types().v2u64());
        /* execute.simd:3176 [D] s_b_147_2: WriteRegBank 21:s_b_147_0 = s_b_147_1 */
        if (TRACE) 
        {
          emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_147_1,emitter.const_u8(16));
        }
        emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rd))),s_b_147_1);
        /* execute.simd:0 [F] s_b_147_3: Jump b_2 (const) */
        {
          auto block = block_b_2;
          dynamic_block_queue.push(block_b_2);
          emitter.jump(block);
        }
      }
      else if (block_index == block_b_148) // BLOCK START LINE 0, END LINE 0
      {
        emitter.set_current_block(block_b_148);
        /* execute.simd:3172 [D] s_b_148_0 = sym_44146_0_rn wutils::Vector<uint64_t, 2> */
        auto s_b_148_0 = emitter.load_local(DV_sym_44146_0_rn, emitter.context().types().v2u64());
        /* ???:4294967295 [F] s_b_148_1 = constant u8 1 (const) */
        /* execute.simd:3172 [D] s_b_148_0[s_b_148_1] */
        auto s_b_148_2 = emitter.vector_extract(s_b_148_0, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3172 [D] s_b_148_3 = sym_44150_0_rm wutils::Vector<int64_t, 2> */
        auto s_b_148_3 = emitter.load_local(DV_sym_44150_0_rm, emitter.context().types().v2s64());
        /* ???:4294967295 [F] s_b_148_4 = constant u8 1 (const) */
        /* execute.simd:3172 [D] s_b_148_3[s_b_148_4] */
        auto s_b_148_5 = emitter.vector_extract(s_b_148_3, emitter.const_u8((uint8_t)1ULL));
        /* execute.simd:3172 [D] s_b_148_6 = (u64)s_b_148_5 */
        auto s_b_148_6 = emitter.reinterpret(s_b_148_5, emitter.context().types().u64());
        /* execute.simd:3172 [D] s_b_148_7 = s_b_148_2<<s_b_148_6 */
        auto s_b_148_7 = emitter.shl(s_b_148_2, s_b_148_6);
        /* execute.simd:3172 [D] s_b_148_8 = sym_44155_0_rd wutils::Vector<uint64_t, 2> */
        auto s_b_148_8 = emitter.load_local(DV_sym_44155_0_rd, emitter.context().types().v2u64());
        /* execute.simd:3172 [F] s_b_148_9 = constant s32 1 (const) */
        /* execute.simd:3172 [D] s_b_148_10 = s_b_148_8[s_b_148_9] <= s_b_148_7 */
        auto s_b_148_10 = emitter.vector_insert(s_b_148_8, emitter.const_s32((int32_t)1ULL), s_b_148_7);
        /* execute.simd:3172 [D] s_b_148_11: sym_44155_0_rd = s_b_148_10, dominates: s_b_147_1  */
        emitter.store_local(DV_sym_44155_0_rd, s_b_148_10);
        /* execute.simd:3172 [F] s_b_148_12: Jump b_147 (const) */
        {
          auto block = block_b_147;
          dynamic_block_queue.push(block_b_147);
          emitter.jump(block);
        }
      }
    }
  }
  else 
  {
    emitter.jump(__exit_block);
  }
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template<bool TRACE>bool arm64_jit2<TRACE>::translate_a64_vldur(const arm64_decode_a64_LS_REG_USIMM&insn, captive::arch::dbt::el::Emitter& emitter)
{
  emitter.mark_used_feature(0);
  emitter.mark_used_feature(1);
  captive::arch::dbt::el::Block *__exit_block = emitter.context().create_block();
  auto DV_sym_159500_0_value = emitter.alloc_local(emitter.context().types().u32(), false);
  auto DV_sym_159477_0_value = emitter.alloc_local(emitter.context().types().u8(), false);
  auto DV_sym_159511_0_value = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_159521_0_vl = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_159384_0_return_symbol = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_159401_1__R_s_b_3_0 = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_159475_0_replaced_parameter_addr = emitter.alloc_local(emitter.context().types().u64(), false);
  auto DV_sym_159489_0_value = emitter.alloc_local(emitter.context().types().u16(), false);
  auto DV_sym_159525_0_vh = emitter.alloc_local(emitter.context().types().u64(), false);
  goto fixed_block_b_0;
  /*  */
  fixed_block_b_0: 
  {
    /* execute.simd:3996 [F] s_b_0_0=sym_47531_3_parameter_inst.rn (const) */
    /* execute.a64:2793 [F] s_b_0_1 = (u32)s_b_0_0 (const) */
    /* execute.a64:2793 [F] s_b_0_2 = constant u32 1f (const) */
    /* execute.a64:2793 [F] s_b_0_3 = s_b_0_1==s_b_0_2 (const) */
    uint8_t s_b_0_3 = ((uint8_t)(((uint32_t)insn.rn) == (uint32_t)31ULL));
    /* execute.a64:2793 [F] s_b_0_4: If s_b_0_3: Jump b_1 else b_2 (const) */
    if (s_b_0_3) 
    {
      goto fixed_block_b_1;
    }
    else 
    {
      goto fixed_block_b_2;
    }
  }
  /* b_0,  */
  fixed_block_b_1: 
  {
    /* execute.a64:2764 [F] s_b_1_0 = constant u32 1 (const) */
    /* execute.a64:2764 [F] s_b_1_1 = __builtin_get_feature */
    uint32_t s_b_1_1 = __get_feature((uint32_t)1ULL);
    /* execute.a64:2764 [F] s_b_1_2 = constant u32 0 (const) */
    /* execute.a64:2764 [F] s_b_1_3 = s_b_1_1==s_b_1_2 (const) */
    uint8_t s_b_1_3 = ((uint8_t)(s_b_1_1 == (uint32_t)0ULL));
    /* execute.a64:2764 [F] s_b_1_4: If s_b_1_3: Jump b_4 else b_5 (const) */
    if (s_b_1_3) 
    {
      goto fixed_block_b_4;
    }
    else 
    {
      goto fixed_block_b_5;
    }
  }
  /* b_0,  */
  fixed_block_b_2: 
  {
    /* execute.a64:2796 [F] s_b_2_0=sym_47531_3_parameter_inst.rn (const) */
    /* execute.a64:2796 [D] s_b_2_1 = ReadRegBank 0:s_b_2_0 (u64) */
    auto s_b_2_1 = emitter.load_register(emitter.const_u32((uint32_t)(0 + (8 * insn.rn))), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32((uint32_t)(0 + (8 * insn.rn))),s_b_2_1,emitter.const_u8(8));
    }
    /* ???:4294967295 [D] s_b_2_2: sym_159384_0_return_symbol = s_b_2_1, dominates: s_b_3_0  */
    emitter.store_local(DV_sym_159384_0_return_symbol, s_b_2_1);
    /* ???:4294967295 [F] s_b_2_3: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  /* b_2, b_6,  */
  fixed_block_b_3: 
  {
    /* ???:4294967295 [D] s_b_3_0 = sym_159384_0_return_symbol uint64_t */
    auto s_b_3_0 = emitter.load_local(DV_sym_159384_0_return_symbol, emitter.context().types().u64());
    /* execute.simd:3997 [F] s_b_3_1=sym_47531_3_parameter_inst.imms64 (const) */
    /* ???:4294967295 [F] s_b_3_2 = (u64)s_b_3_1 (const) */
    /* ???:4294967295 [D] s_b_3_3 = s_b_3_0+s_b_3_2 */
    auto s_b_3_3 = emitter.add(s_b_3_0, emitter.const_u64(((uint64_t)insn.imms64)));
    /* execute.simd:3999 [F] s_b_3_4=sym_47531_3_parameter_inst.size (const) */
    /* execute.simd:3999 [F] s_b_3_5 = (u32)s_b_3_4 (const) */
    /* execute.simd:3999 [F] s_b_3_6 = constant u32 0 (const) */
    /* execute.simd:3999 [F] s_b_3_7 = s_b_3_5==s_b_3_6 (const) */
    uint8_t s_b_3_7 = ((uint8_t)(((uint32_t)insn.size) == (uint32_t)0ULL));
    /* execute.simd:3999 [F] s_b_3_8=sym_47531_3_parameter_inst.opc (const) */
    /* execute.simd:3999 [F] s_b_3_9 = (u32)s_b_3_8 (const) */
    /* execute.simd:3999 [F] s_b_3_10 = constant u32 1 (const) */
    /* execute.simd:3999 [F] s_b_3_11 = s_b_3_9==s_b_3_10 (const) */
    uint8_t s_b_3_11 = ((uint8_t)(((uint32_t)insn.opc) == (uint32_t)1ULL));
    /* execute.simd:3999 [F] s_b_3_12 = constant u8 0 (const) */
    /* execute.simd:3999 [F] s_b_3_13 = constant u8 4 (const) */
    /* execute.simd:3999 [F] s_b_3_14: Select s_b_3_11 ? s_b_3_12 : s_b_3_13 (const) */
    uint8_t s_b_3_14 = ((uint8_t)(s_b_3_11 ? ((uint8_t)0ULL) : ((uint8_t)4ULL)));
    /* execute.simd:3999 [F] s_b_3_15=sym_47531_3_parameter_inst.size (const) */
    /* execute.simd:3999 [F] s_b_3_16 = (u8)s_b_3_15 (const) */
    /* execute.simd:3999 [F] s_b_3_17: Select s_b_3_7 ? s_b_3_14 : s_b_3_16 (const) */
    uint8_t s_b_3_17 = ((uint8_t)(s_b_3_7 ? (s_b_3_14) : (((uint8_t)insn.size))));
    /* ???:4294967295 [D] s_b_3_18: sym_159475_0_replaced_parameter_addr = s_b_3_3, dominates: s_b_13_0 s_b_10_0 s_b_12_0 s_b_9_0 s_b_11_0  */
    emitter.store_local(DV_sym_159475_0_replaced_parameter_addr, s_b_3_3);
    /* execute.simd:3763 [F] s_b_3_19 = constant s32 0 (const) */
    /* execute.simd:3770 [F] s_b_3_20 = constant s32 1 (const) */
    /* execute.simd:3777 [F] s_b_3_21 = constant s32 2 (const) */
    /* execute.simd:3784 [F] s_b_3_22 = constant s32 3 (const) */
    /* execute.simd:3791 [F] s_b_3_23 = constant s32 4 (const) */
    /* execute.simd:3762 [F] s_b_3_24: Switch s_b_3_17: < <todo> > def b_14 (const) -> b_13, b_14, b_10, b_12, b_9, b_11,  */
    switch (s_b_3_17) 
    {
    case (int32_t)4ULL:
      goto fixed_block_b_13;
      break;
    case (int32_t)0ULL:
      goto fixed_block_b_9;
      break;
    case (int32_t)1ULL:
      goto fixed_block_b_10;
      break;
    case (int32_t)2ULL:
      goto fixed_block_b_11;
      break;
    case (int32_t)3ULL:
      goto fixed_block_b_12;
      break;
    default:
      goto fixed_block_b_14;
    }
  }
  /* b_1,  */
  fixed_block_b_4: 
  {
    /* execute.a64:2765 [D] s_b_4_0 = ReadReg 21 (u64) */
    auto s_b_4_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_4_0, emitter.const_u8(8));
    }
    /* execute.a64:2765 [D] s_b_4_1: sym_159401_1__R_s_b_3_0 = s_b_4_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_159401_1__R_s_b_3_0, s_b_4_0);
    /* execute.a64:2765 [F] s_b_4_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_1,  */
  fixed_block_b_5: 
  {
    /* execute.a64:3075 [F] s_b_5_0 = constant u32 0 (const) */
    /* execute.a64:3075 [F] s_b_5_1 = __builtin_get_feature */
    uint32_t s_b_5_1 = __get_feature((uint32_t)0ULL);
    /* execute.a64:3075 [F] s_b_5_2 = (u8)s_b_5_1 (const) */
    /* execute.a64:2767 [F] s_b_5_3 = (u32)s_b_5_2 (const) */
    /* execute.a64:2767 [F] s_b_5_4 = constant u32 0 (const) */
    /* execute.a64:2767 [F] s_b_5_5 = s_b_5_3==s_b_5_4 (const) */
    uint8_t s_b_5_5 = ((uint8_t)(((uint32_t)((uint8_t)s_b_5_1)) == (uint32_t)0ULL));
    /* execute.a64:2767 [F] s_b_5_6: If s_b_5_5: Jump b_7 else b_8 (const) */
    if (s_b_5_5) 
    {
      goto fixed_block_b_7;
    }
    else 
    {
      goto fixed_block_b_8;
    }
  }
  /* b_4, b_7, b_8,  */
  fixed_block_b_6: 
  {
    /* execute.a64:2794 [D] s_b_6_0 = sym_159401_1__R_s_b_3_0 uint64_t */
    auto s_b_6_0 = emitter.load_local(DV_sym_159401_1__R_s_b_3_0, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_6_1: sym_159384_0_return_symbol = s_b_6_0, dominates: s_b_3_0  */
    emitter.store_local(DV_sym_159384_0_return_symbol, s_b_6_0);
    /* ???:4294967295 [F] s_b_6_2: Jump b_3 (const) */
    goto fixed_block_b_3;
  }
  /* b_5,  */
  fixed_block_b_7: 
  {
    /* execute.a64:2768 [D] s_b_7_0 = ReadReg 21 (u64) */
    auto s_b_7_0 = emitter.load_register(emitter.const_u32(1408), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1408), s_b_7_0, emitter.const_u8(8));
    }
    /* execute.a64:2768 [D] s_b_7_1: sym_159401_1__R_s_b_3_0 = s_b_7_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_159401_1__R_s_b_3_0, s_b_7_0);
    /* execute.a64:2768 [F] s_b_7_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_5,  */
  fixed_block_b_8: 
  {
    /* execute.a64:2770 [D] s_b_8_0 = ReadReg 22 (u64) */
    auto s_b_8_0 = emitter.load_register(emitter.const_u32(1416), emitter.context().types().u64());
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_REGISTER, emitter.const_u32(1416), s_b_8_0, emitter.const_u8(8));
    }
    /* execute.a64:2770 [D] s_b_8_1: sym_159401_1__R_s_b_3_0 = s_b_8_0, dominates: s_b_6_0  */
    emitter.store_local(DV_sym_159401_1__R_s_b_3_0, s_b_8_0);
    /* execute.a64:2770 [F] s_b_8_2: Jump b_6 (const) */
    goto fixed_block_b_6;
  }
  /* b_3,  */
  fixed_block_b_9: 
  {
    /* execute.simd:3766 [D] s_b_9_0 = sym_159475_0_replaced_parameter_addr uint64_t */
    auto s_b_9_0 = emitter.load_local(DV_sym_159475_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_9_1 = Load 1 s_b_9_0 => sym_159477_0_value */
    auto s_b_9_1 = emitter.load_memory(s_b_9_0, emitter.context().types().u8());
    emitter.store_local(DV_sym_159477_0_value, s_b_9_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_9_0, s_b_9_1, emitter.const_u8(1));
    }
    /* execute.simd:3767 [F] s_b_9_2=sym_47531_3_parameter_inst.rt (const) */
    /* execute.simd:3767 [D] s_b_9_3 = sym_159477_0_value uint8_t */
    auto s_b_9_3 = emitter.load_local(DV_sym_159477_0_value, emitter.context().types().u8());
    /* execute.simd:6305 [D] s_b_9_4 = (u64)s_b_9_3 */
    auto s_b_9_4 = emitter.zx(s_b_9_3, emitter.context().types().u64());
    /* execute.simd:6305 [D] s_b_9_5: WriteRegBank 2:s_b_9_2 = s_b_9_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_9_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_9_4);
    /* execute.simd:6306 [F] s_b_9_6 = constant u64 0 (const) */
    /* execute.simd:6306 [F] s_b_9_7: WriteRegBank 3:s_b_9_2 = s_b_9_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_9_8: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_3,  */
  fixed_block_b_10: 
  {
    /* execute.simd:3773 [D] s_b_10_0 = sym_159475_0_replaced_parameter_addr uint64_t */
    auto s_b_10_0 = emitter.load_local(DV_sym_159475_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_10_1 = Load 2 s_b_10_0 => sym_159489_0_value */
    auto s_b_10_1 = emitter.load_memory(s_b_10_0, emitter.context().types().u16());
    emitter.store_local(DV_sym_159489_0_value, s_b_10_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_10_0, s_b_10_1, emitter.const_u8(2));
    }
    /* execute.simd:3774 [F] s_b_10_2=sym_47531_3_parameter_inst.rt (const) */
    /* execute.simd:3774 [D] s_b_10_3 = sym_159489_0_value uint16_t */
    auto s_b_10_3 = emitter.load_local(DV_sym_159489_0_value, emitter.context().types().u16());
    /* execute.simd:6312 [D] s_b_10_4 = (u64)s_b_10_3 */
    auto s_b_10_4 = emitter.zx(s_b_10_3, emitter.context().types().u64());
    /* execute.simd:6312 [D] s_b_10_5: WriteRegBank 2:s_b_10_2 = s_b_10_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_10_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_10_4);
    /* execute.simd:6313 [F] s_b_10_6 = constant u64 0 (const) */
    /* execute.simd:6313 [F] s_b_10_7: WriteRegBank 3:s_b_10_2 = s_b_10_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_10_8: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_3,  */
  fixed_block_b_11: 
  {
    /* execute.simd:3780 [D] s_b_11_0 = sym_159475_0_replaced_parameter_addr uint64_t */
    auto s_b_11_0 = emitter.load_local(DV_sym_159475_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_11_1 = Load 4 s_b_11_0 => sym_159500_0_value */
    auto s_b_11_1 = emitter.load_memory(s_b_11_0, emitter.context().types().u32());
    emitter.store_local(DV_sym_159500_0_value, s_b_11_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_11_0, s_b_11_1, emitter.const_u8(4));
    }
    /* execute.simd:3781 [F] s_b_11_2=sym_47531_3_parameter_inst.rt (const) */
    /* execute.simd:3781 [D] s_b_11_3 = sym_159500_0_value uint32_t */
    auto s_b_11_3 = emitter.load_local(DV_sym_159500_0_value, emitter.context().types().u32());
    /* execute.simd:6319 [D] s_b_11_4 = (u64)s_b_11_3 */
    auto s_b_11_4 = emitter.zx(s_b_11_3, emitter.context().types().u64());
    /* execute.simd:6319 [D] s_b_11_5: WriteRegBank 2:s_b_11_2 = s_b_11_4 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_11_4,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_11_4);
    /* execute.simd:6320 [F] s_b_11_6 = constant u64 0 (const) */
    /* execute.simd:6320 [F] s_b_11_7: WriteRegBank 3:s_b_11_2 = s_b_11_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_11_8: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_3,  */
  fixed_block_b_12: 
  {
    /* execute.simd:3787 [D] s_b_12_0 = sym_159475_0_replaced_parameter_addr uint64_t */
    auto s_b_12_0 = emitter.load_local(DV_sym_159475_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_12_1 = Load 8 s_b_12_0 => sym_159511_0_value */
    auto s_b_12_1 = emitter.load_memory(s_b_12_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_159511_0_value, s_b_12_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_12_0, s_b_12_1, emitter.const_u8(8));
    }
    /* execute.simd:3788 [F] s_b_12_2=sym_47531_3_parameter_inst.rt (const) */
    /* execute.simd:3788 [D] s_b_12_3 = sym_159511_0_value uint64_t */
    auto s_b_12_3 = emitter.load_local(DV_sym_159511_0_value, emitter.context().types().u64());
    /* execute.simd:6326 [D] s_b_12_4: WriteRegBank 2:s_b_12_2 = s_b_12_3 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_12_3,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_12_3);
    /* execute.simd:6327 [F] s_b_12_5 = constant u64 0 (const) */
    /* execute.simd:6327 [F] s_b_12_6: WriteRegBank 3:s_b_12_2 = s_b_12_5 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL),emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),emitter.const_u64((uint64_t)0ULL));
    /* execute.simd:0 [F] s_b_12_7: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_3,  */
  fixed_block_b_13: 
  {
    /* execute.simd:3795 [D] s_b_13_0 = sym_159475_0_replaced_parameter_addr uint64_t */
    auto s_b_13_0 = emitter.load_local(DV_sym_159475_0_replaced_parameter_addr, emitter.context().types().u64());
    /* ???:4294967295 [D] s_b_13_1 = Load 8 s_b_13_0 => sym_159521_0_vl */
    auto s_b_13_1 = emitter.load_memory(s_b_13_0, emitter.context().types().u64());
    emitter.store_local(DV_sym_159521_0_vl, s_b_13_1);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_13_0, s_b_13_1, emitter.const_u8(8));
    }
    /* execute.simd:3796 [F] s_b_13_2 = constant u64 8 (const) */
    /* execute.simd:3796 [D] s_b_13_3 = s_b_13_0+s_b_13_2 */
    auto s_b_13_3 = emitter.add(s_b_13_0, emitter.const_u64((uint64_t)8ULL));
    /* ???:4294967295 [D] s_b_13_4 = Load 8 s_b_13_3 => sym_159525_0_vh */
    auto s_b_13_4 = emitter.load_memory(s_b_13_3, emitter.context().types().u64());
    emitter.store_local(DV_sym_159525_0_vh, s_b_13_4);
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::LOAD_MEMORY, s_b_13_3, s_b_13_4, emitter.const_u8(8));
    }
    /* execute.simd:3797 [F] s_b_13_5=sym_47531_3_parameter_inst.rt (const) */
    /* execute.simd:3797 [D] s_b_13_6 = sym_159521_0_vl uint64_t */
    auto s_b_13_6 = emitter.load_local(DV_sym_159521_0_vl, emitter.context().types().u64());
    /* execute.simd:3797 [D] s_b_13_7 = sym_159525_0_vh uint64_t */
    auto s_b_13_7 = emitter.load_local(DV_sym_159525_0_vh, emitter.context().types().u64());
    /* execute.simd:6333 [D] s_b_13_8: WriteRegBank 2:s_b_13_5 = s_b_13_6 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_13_6,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(256 + (16 * insn.rt))),s_b_13_6);
    /* execute.simd:6334 [D] s_b_13_9: WriteRegBank 3:s_b_13_5 = s_b_13_7 */
    if (TRACE) 
    {
      emitter.trace(captive::arch::dbt::el::TraceEvent::STORE_REGISTER,emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),s_b_13_7,emitter.const_u8(8));
    }
    emitter.store_register(emitter.const_u32((uint32_t)(264 + (16 * insn.rt))),s_b_13_7);
    /* execute.simd:0 [F] s_b_13_10: Jump b_14 (const) */
    goto fixed_block_b_14;
  }
  /* b_3, b_9, b_10, b_11, b_12, b_13,  */
  fixed_block_b_14: 
  {
    /* ???:4294967295 [F] s_b_14_0: Return */
    goto fixed_done;
  }
  fixed_done:
  emitter.jump(__exit_block);
  emitter.set_current_block(__exit_block);
  if (!insn.end_of_block) 
  {
    emitter.inc_pc(emitter.const_u8(4));
  }
  return true;
}
template class arm64_jit2<true>;
template class arm64_jit2<false>;
